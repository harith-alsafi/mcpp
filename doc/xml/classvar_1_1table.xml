<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.9.2" xml:lang="en-US">
  <compounddef id="classvar_1_1table" kind="class" language="C++" prot="public">
    <compoundname>var::table</compoundname>
    <basecompoundref prot="public" virt="non-virtual">std::vector&lt; std::vector&lt; D &gt; &gt;</basecompoundref>
    <includes local="yes">table.hpp</includes>
    <templateparamlist>
      <param>
        <type>typename D</type>
      </param>
    </templateparamlist>
      <sectiondef kind="protected-attrib">
      <memberdef kind="variable" id="classvar_1_1table_1a55535e54d90e2ddf7fbc98532e3dbaa3" prot="protected" static="no" mutable="no">
        <type>std::vector&lt; std::string &gt;</type>
        <definition>std::vector&lt;std::string&gt; var::table&lt; D &gt;::col_names</definition>
        <argsstring></argsstring>
        <name>col_names</name>
        <briefdescription>
<para>Stores the column names. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="includes/variables/table.hpp" line="28" column="13" bodyfile="includes/variables/table.hpp" bodystart="28" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classvar_1_1table_1ad69844095e9fd79ebdca86f22fa42ff5" prot="protected" static="no" mutable="no">
        <type>std::vector&lt; std::string &gt;</type>
        <definition>std::vector&lt;std::string&gt; var::table&lt; D &gt;::row_names</definition>
        <argsstring></argsstring>
        <name>row_names</name>
        <briefdescription>
<para>Stores the row names. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="includes/variables/table.hpp" line="29" column="13" bodyfile="includes/variables/table.hpp" bodystart="29" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classvar_1_1table_1a3d195e6796cfbc441b8e240b651d695b" prot="protected" static="no" mutable="no">
        <type>int</type>
        <definition>int var::table&lt; D &gt;::_row</definition>
        <argsstring></argsstring>
        <name>_row</name>
        <briefdescription>
<para>Row size. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="includes/variables/table.hpp" line="30" column="5" bodyfile="includes/variables/table.hpp" bodystart="30" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classvar_1_1table_1ad9a35db73dbd794283bf9b986c133ca3" prot="protected" static="no" mutable="no">
        <type>int</type>
        <definition>int var::table&lt; D &gt;::_col</definition>
        <argsstring></argsstring>
        <name>_col</name>
        <briefdescription>
<para>Colum size. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="includes/variables/table.hpp" line="31" column="5" bodyfile="includes/variables/table.hpp" bodystart="31" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classvar_1_1table_1ae067e021bec7ba45f14e0a6c45c6116d" prot="protected" static="no" mutable="no">
        <type>int</type>
        <definition>int var::table&lt; D &gt;::sz</definition>
        <argsstring></argsstring>
        <name>sz</name>
        <initializer>= 10</initializer>
        <briefdescription>
<para>Spacing size for print. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="includes/variables/table.hpp" line="32" column="5" bodyfile="includes/variables/table.hpp" bodystart="32" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="protected-func">
      <memberdef kind="function" id="classvar_1_1table_1abeffbc869d8244691cf7f05125e18fd2" prot="protected" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void var::table&lt; D &gt;::set_size</definition>
        <argsstring>()</argsstring>
        <name>set_size</name>
        <briefdescription>
<para>Sets the <ref refid="classvar_1_1table_1a3d195e6796cfbc441b8e240b651d695b" kindref="member">_row</ref> and <ref refid="classvar_1_1table_1ad9a35db73dbd794283bf9b986c133ca3" kindref="member">_col</ref> according to the current class size. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="includes/variables/table.hpp" line="38" column="6" bodyfile="includes/variables/table.hpp" bodystart="38" bodyend="47"/>
      </memberdef>
      <memberdef kind="function" id="classvar_1_1table_1af5c68e6a9c7857107e5ba88fcff52119" prot="protected" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>int</type>
        <definition>int var::table&lt; D &gt;::check_header</definition>
        <argsstring>(std::string headname)</argsstring>
        <name>check_header</name>
        <param>
          <type>std::string</type>
          <declname>headname</declname>
        </param>
        <briefdescription>
<para>Returns column index of given header/column name. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>headname</parametername>
</parameternamelist>
<parameterdescription>
<para>string of column name </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para><computeroutput>int</computeroutput>: $[-1]$: index not found <linebreak/>
 </para>
</simplesect>
<simplesect kind="return"><para><computeroutput>int</computeroutput>: $[\geq 0]$: index found </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="includes/variables/table.hpp" line="57" column="5" bodyfile="includes/variables/table.hpp" bodystart="57" bodyend="65"/>
      </memberdef>
      <memberdef kind="function" id="classvar_1_1table_1a6a199939870fc52d1cf6de8dc64581e5" prot="protected" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>std::vector&lt;&amp;D &gt;</type>
        <definition>std::vector&lt;&amp;D&gt; var::table&lt; D &gt;::get_col_</definition>
        <argsstring>(int index)</argsstring>
        <name>get_col_</name>
        <param>
          <type>int</type>
          <declname>index</declname>
        </param>
        <briefdescription>
<para>Get the colum based on index. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>index</parametername>
</parameternamelist>
<parameterdescription>
<para>index of that colum </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para><computeroutput>std::vector&lt;&amp;D&gt;</computeroutput> <linebreak/>
 </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="includes/variables/table.hpp" line="73" column="13" bodyfile="includes/variables/table.hpp" bodystart="73" bodyend="81"/>
      </memberdef>
      <memberdef kind="function" id="classvar_1_1table_1ad3c49fc9f806e825a40618000a6cb0ca" prot="protected" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>std::vector&lt;&amp;D &gt;</type>
        <definition>std::vector&lt;&amp;D&gt; var::table&lt; D &gt;::get_col_</definition>
        <argsstring>(std::string headname)</argsstring>
        <name>get_col_</name>
        <param>
          <type>std::string</type>
          <declname>headname</declname>
        </param>
        <briefdescription>
<para>Get the column vector based on header name. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>headname</parametername>
</parameternamelist>
<parameterdescription>
<para></para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para><computeroutput>std::vector&lt;D&gt;</computeroutput>: Empty if nothing exits <linebreak/>
 </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="includes/variables/table.hpp" line="90" column="13" bodyfile="includes/variables/table.hpp" bodystart="90" bodyend="99"/>
      </memberdef>
      <memberdef kind="function" id="classvar_1_1table_1a4ad03a888518a0919abcef08d9b307ea" prot="protected" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>std::string</type>
        <definition>std::string var::table&lt; D &gt;::generate_line</definition>
        <argsstring>(int l)</argsstring>
        <name>generate_line</name>
        <param>
          <type>int</type>
          <declname>l</declname>
        </param>
        <briefdescription>
<para>Generates line to seperate rows. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>l</parametername>
</parameternamelist>
<parameterdescription>
<para>number of &quot;â€•&quot; in the generated string </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para><computeroutput>std::string</computeroutput> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="includes/variables/table.hpp" line="166" column="13" bodyfile="includes/variables/table.hpp" bodystart="166" bodyend="173"/>
      </memberdef>
      <memberdef kind="function" id="classvar_1_1table_1a2032fb3518fc73b1af05770202d61e8c" prot="protected" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void var::table&lt; D &gt;::generate_rows</definition>
        <argsstring>()</argsstring>
        <name>generate_rows</name>
        <briefdescription>
<para>Clears current row names and generates new ones. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="includes/variables/table.hpp" line="179" column="6" bodyfile="includes/variables/table.hpp" bodystart="179" bodyend="188"/>
      </memberdef>
      <memberdef kind="function" id="classvar_1_1table_1a75cd6fd5f807343b311152f5118bb085" prot="protected" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void var::table&lt; D &gt;::generate_cols</definition>
        <argsstring>()</argsstring>
        <name>generate_cols</name>
        <briefdescription>
<para>Clears current column names and generates new ones. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="includes/variables/table.hpp" line="194" column="6" bodyfile="includes/variables/table.hpp" bodystart="194" bodyend="203"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="protected-static-func">
      <memberdef kind="function" id="classvar_1_1table_1a215cdf3b672a7231d895f4e6c4214b64" prot="protected" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>std::string</type>
        <definition>static std::string var::table&lt; D &gt;::center</definition>
        <argsstring>(const std::string s, const int w)</argsstring>
        <name>center</name>
        <param>
          <type>const std::string</type>
          <declname>s</declname>
        </param>
        <param>
          <type>const int</type>
          <declname>w</declname>
        </param>
        <briefdescription>
<para>Re-centers a string based on given width. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>s</parametername>
</parameternamelist>
<parameterdescription>
<para>string given </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>w</parametername>
</parameternamelist>
<parameterdescription>
<para>width to center the string to </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para><computeroutput>std::string</computeroutput> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="includes/variables/table.hpp" line="108" column="20" bodyfile="includes/variables/table.hpp" bodystart="108" bodyend="121"/>
      </memberdef>
      <memberdef kind="function" id="classvar_1_1table_1a0b08c797c3314998239636e4840ff74e" prot="protected" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>std::string</type>
        <definition>static std::string var::table&lt; D &gt;::prd</definition>
        <argsstring>(D x, int width)</argsstring>
        <name>prd</name>
        <param>
          <type>D</type>
          <declname>x</declname>
        </param>
        <param>
          <type>int</type>
          <declname>width</declname>
        </param>
        <briefdescription>
<para>Fills the string with given width with empty space. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>x</parametername>
</parameternamelist>
<parameterdescription>
<para>string given </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>width</parametername>
</parameternamelist>
<parameterdescription>
<para>width to center the string to </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para><computeroutput>std::string</computeroutput> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="includes/variables/table.hpp" line="130" column="20" bodyfile="includes/variables/table.hpp" bodystart="130" bodyend="139"/>
      </memberdef>
      <memberdef kind="function" id="classvar_1_1table_1ae783c7e8063d4999c621f28a44dd215c" prot="protected" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>std::string</type>
        <definition>static std::string var::table&lt; D &gt;::prd</definition>
        <argsstring>(std::string x, int width)</argsstring>
        <name>prd</name>
        <param>
          <type>std::string</type>
          <declname>x</declname>
        </param>
        <param>
          <type>int</type>
          <declname>width</declname>
        </param>
        <briefdescription>
<para>Gives spacing to a string. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="see"><para>Similar to <ref refid="classvar_1_1table_1a0b08c797c3314998239636e4840ff74e" kindref="member">var::table::prd(D, int)</ref></para>
</simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>x</parametername>
</parameternamelist>
<parameterdescription>
<para>string given </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>width</parametername>
</parameternamelist>
<parameterdescription>
<para>width to center the string to </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para><computeroutput>std::string</computeroutput> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="includes/variables/table.hpp" line="150" column="20" bodyfile="includes/variables/table.hpp" bodystart="150" bodyend="158"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-func">
      <memberdef kind="function" id="classvar_1_1table_1ada6ebdf0a90915bedfa07fc57b31a504" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type></type>
        <definition>var::table&lt; D &gt;::table</definition>
        <argsstring>()</argsstring>
        <name>table</name>
        <briefdescription>
<para>Construct a new table object. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="includes/variables/table.hpp" line="210" column="1" bodyfile="includes/variables/table.hpp" bodystart="210" bodyend="212"/>
      </memberdef>
      <memberdef kind="function" id="classvar_1_1table_1a7dbdb10f2db71872774179122ba9520b" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>int</type>
        <definition>int var::table&lt; D &gt;::row</definition>
        <argsstring>()</argsstring>
        <name>row</name>
        <briefdescription>
<para>Get the row size. </para>
        </briefdescription>
        <detaileddescription>
<sect2 id="classvar_1_1table_1autotoc_md4">
<title>Getters</title>
<para><simplesect kind="return"><para></para>
</simplesect>
<simplesect kind="return"><para><computeroutput>int</computeroutput> </para>
</simplesect>
</para>
</sect2>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="includes/variables/table.hpp" line="228" column="5" bodyfile="includes/variables/table.hpp" bodystart="228" bodyend="232"/>
      </memberdef>
      <memberdef kind="function" id="classvar_1_1table_1a70b568d560efd34b1a67aee49135b8a6" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>int</type>
        <definition>int var::table&lt; D &gt;::col</definition>
        <argsstring>()</argsstring>
        <name>col</name>
        <briefdescription>
<para>Get the col size. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para><computeroutput>int</computeroutput> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="includes/variables/table.hpp" line="239" column="5" bodyfile="includes/variables/table.hpp" bodystart="239" bodyend="243"/>
      </memberdef>
      <memberdef kind="function" id="classvar_1_1table_1abc5c989c570b6c90e15623cc7b2db1d0" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>std::vector&lt; std::string &gt;</type>
        <definition>std::vector&lt;std::string&gt; var::table&lt; D &gt;::get_col_names</definition>
        <argsstring>()</argsstring>
        <name>get_col_names</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="includes/variables/table.hpp" line="246" column="13" bodyfile="includes/variables/table.hpp" bodystart="246" bodyend="249"/>
      </memberdef>
      <memberdef kind="function" id="classvar_1_1table_1a86899556462d8e8fc6499432157e4352" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void var::table&lt; D &gt;::set_col_names</definition>
        <argsstring>(std::vector&lt; std::string &gt; names)</argsstring>
        <name>set_col_names</name>
        <param>
          <type>std::vector&lt; std::string &gt;</type>
          <declname>names</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="includes/variables/table.hpp" line="251" column="6" bodyfile="includes/variables/table.hpp" bodystart="251" bodyend="259"/>
      </memberdef>
      <memberdef kind="function" id="classvar_1_1table_1aaec876550ab824cf2e02af43d1e519de" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>std::vector&lt; std::string &gt;</type>
        <definition>std::vector&lt;std::string&gt; var::table&lt; D &gt;::get_row_names</definition>
        <argsstring>()</argsstring>
        <name>get_row_names</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="includes/variables/table.hpp" line="261" column="13" bodyfile="includes/variables/table.hpp" bodystart="261" bodyend="264"/>
      </memberdef>
      <memberdef kind="function" id="classvar_1_1table_1a60611dd76aa2d387bb2909ef3a948427" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void var::table&lt; D &gt;::set_row_names</definition>
        <argsstring>(std::vector&lt; std::string &gt; names)</argsstring>
        <name>set_row_names</name>
        <param>
          <type>std::vector&lt; std::string &gt;</type>
          <declname>names</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="includes/variables/table.hpp" line="266" column="6" bodyfile="includes/variables/table.hpp" bodystart="266" bodyend="274"/>
      </memberdef>
      <memberdef kind="function" id="classvar_1_1table_1ae6fcb87b2b648ee28fb2258f1eab3f6c" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>D &amp;</type>
        <definition>D&amp; var::table&lt; D &gt;::get_element</definition>
        <argsstring>(int i, int j)</argsstring>
        <name>get_element</name>
        <param>
          <type>int</type>
          <declname>i</declname>
        </param>
        <param>
          <type>int</type>
          <declname>j</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="includes/variables/table.hpp" line="276" column="3" bodyfile="includes/variables/table.hpp" bodystart="276" bodyend="279"/>
      </memberdef>
      <memberdef kind="function" id="classvar_1_1table_1a39534497537c1b9a7f9ab79280fba6f9" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>std::vector&lt; D &gt; &amp;</type>
        <definition>std::vector&lt;D&gt;&amp; var::table&lt; D &gt;::operator[]</definition>
        <argsstring>(std::string headname)</argsstring>
        <name>operator[]</name>
        <param>
          <type>std::string</type>
          <declname>headname</declname>
        </param>
        <briefdescription>
<para>Returns refrence to colum of given column name. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>headname</parametername>
</parameternamelist>
<parameterdescription>
<para></para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para><computeroutput>std::vector&lt;D&gt;&amp;</computeroutput> Refrence to given column name </para>
</simplesect>
<parameterlist kind="exception"><parameteritem>
<parameternamelist>
<parametername>&lt;tt&gt;std::invalid_argument&lt;/tt&gt;</parametername>
</parameternamelist>
<parameterdescription>
<para>given column name doesn&apos;t exist </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="includes/variables/table.hpp" line="292" column="13" bodyfile="includes/variables/table.hpp" bodystart="292" bodyend="298"/>
      </memberdef>
      <memberdef kind="function" id="classvar_1_1table_1ac3f099c46a47c6428689efefad42dcf2" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool var::table&lt; D &gt;::read_csv</definition>
        <argsstring>(std::string filename)</argsstring>
        <name>read_csv</name>
        <param>
          <type>std::string</type>
          <declname>filename</declname>
        </param>
        <briefdescription>
<para>Reads from csv file. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>file</parametername>
</parameternamelist>
<parameterdescription>
<para>file name </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para><computeroutput>true</computeroutput> : if read is success </para>
</simplesect>
<simplesect kind="return"><para><computeroutput>false</computeroutput>: if read did not complete </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="includes/variables/table.hpp" line="307" column="6" bodyfile="includes/variables/table.hpp" bodystart="307" bodyend="344"/>
      </memberdef>
      <memberdef kind="function" id="classvar_1_1table_1aa287b9c7b64b4d5d8bd03e9a6a65a044" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool var::table&lt; D &gt;::save_csv</definition>
        <argsstring>(std::string filename)</argsstring>
        <name>save_csv</name>
        <param>
          <type>std::string</type>
          <declname>filename</declname>
        </param>
        <briefdescription>
<para>Reads from csv file. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>file</parametername>
</parameternamelist>
<parameterdescription>
<para></para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>true: if read is success </para>
</simplesect>
<simplesect kind="return"><para>false: if read did not complete </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="includes/variables/table.hpp" line="353" column="6" bodyfile="includes/variables/table.hpp" bodystart="353" bodyend="381"/>
      </memberdef>
      <memberdef kind="function" id="classvar_1_1table_1a462865ba0a86a2e26cce1ab85b60cbbf" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void var::table&lt; D &gt;::show</definition>
        <argsstring>(int r)</argsstring>
        <name>show</name>
        <param>
          <type>int</type>
          <declname>r</declname>
        </param>
        <briefdescription>
<para>Shows a certain number of rows in table. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>r</parametername>
</parameternamelist>
<parameterdescription>
<para></para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="includes/variables/table.hpp" line="388" column="6" bodyfile="includes/variables/table.hpp" bodystart="388" bodyend="446"/>
      </memberdef>
      <memberdef kind="function" id="classvar_1_1table_1ad471ed11d98bd02b5935cc71ba911bae" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void var::table&lt; D &gt;::show</definition>
        <argsstring>()</argsstring>
        <name>show</name>
        <briefdescription>
<para>shows all of the table </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="includes/variables/table.hpp" line="452" column="6" bodyfile="includes/variables/table.hpp" bodystart="452" bodyend="456"/>
      </memberdef>
      <memberdef kind="function" id="classvar_1_1table_1a5e7459882c4bd4bc29759f5fb3c1ee10" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void var::table&lt; D &gt;::show_header</definition>
        <argsstring>()</argsstring>
        <name>show_header</name>
        <briefdescription>
<para>Shows col_names only. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="includes/variables/table.hpp" line="462" column="6" bodyfile="includes/variables/table.hpp" bodystart="462" bodyend="465"/>
      </memberdef>
      <memberdef kind="function" id="classvar_1_1table_1a30907a37fd8b053fcdddf9b0fab3bb3a" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classvar_1_1table" kindref="compound">table</ref></type>
        <definition>table var::table&lt; D &gt;::get_row_table</definition>
        <argsstring>(int r)</argsstring>
        <name>get_row_table</name>
        <param>
          <type>int</type>
          <declname>r</declname>
        </param>
        <briefdescription>
<para>Get the row as table. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>r</parametername>
</parameternamelist>
<parameterdescription>
<para></para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>table </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="includes/variables/table.hpp" line="475" column="7" bodyfile="includes/variables/table.hpp" bodystart="475" bodyend="485"/>
      </memberdef>
      <memberdef kind="function" id="classvar_1_1table_1a28b6553353daf2c3e34a5786f90dd25c" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classvar_1_1table" kindref="compound">table</ref></type>
        <definition>table var::table&lt; D &gt;::get_col_table</definition>
        <argsstring>(std::string name)</argsstring>
        <name>get_col_table</name>
        <param>
          <type>std::string</type>
          <declname>name</declname>
        </param>
        <briefdescription>
<para>Get the col as table. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>name</parametername>
</parameternamelist>
<parameterdescription>
<para></para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>table </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="includes/variables/table.hpp" line="493" column="7" bodyfile="includes/variables/table.hpp" bodystart="493" bodyend="505"/>
      </memberdef>
      <memberdef kind="function" id="classvar_1_1table_1aa749af1d60dccf89e6c72819a58b0227" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool var::table&lt; D &gt;::add_col</definition>
        <argsstring>(std::vector&lt; D &gt; col_data, std::string col_name=std::string())</argsstring>
        <name>add_col</name>
        <param>
          <type>std::vector&lt; D &gt;</type>
          <declname>col_data</declname>
        </param>
        <param>
          <type>std::string</type>
          <declname>col_name</declname>
          <defval>std::string()</defval>
        </param>
        <briefdescription>
<para>Adds new colum. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>col_name</parametername>
</parameternamelist>
<parameterdescription>
<para></para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>col_data</parametername>
</parameternamelist>
<parameterdescription>
<para></para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>true </para>
</simplesect>
<simplesect kind="return"><para>false </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="includes/variables/table.hpp" line="515" column="6" bodyfile="includes/variables/table.hpp" bodystart="515" bodyend="531"/>
      </memberdef>
      <memberdef kind="function" id="classvar_1_1table_1abe04d33a4b04fff930fa8158e41309bb" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool var::table&lt; D &gt;::add_row</definition>
        <argsstring>(std::vector&lt; D &gt; row_data)</argsstring>
        <name>add_row</name>
        <param>
          <type>std::vector&lt; D &gt;</type>
          <declname>row_data</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="includes/variables/table.hpp" line="533" column="6" bodyfile="includes/variables/table.hpp" bodystart="533" bodyend="536"/>
      </memberdef>
      <memberdef kind="function" id="classvar_1_1table_1a4c6b4d98de8c0e527ac5f55ce455270b" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>std::vector&lt; D &gt;</type>
        <definition>std::vector&lt;D&gt; var::table&lt; D &gt;::get_avgs</definition>
        <argsstring>()</argsstring>
        <name>get_avgs</name>
        <briefdescription>
<para>Extract average of each column into a vector. </para>
        </briefdescription>
        <detaileddescription>
<para>Used in <computeroutput>describe_all()</computeroutput></para>
<para><simplesect kind="return"><para><computeroutput>std::vector&lt;D&gt;</computeroutput>: same size as number of columns </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="includes/variables/table.hpp" line="545" column="13" bodyfile="includes/variables/table.hpp" bodystart="545" bodyend="553"/>
      </memberdef>
      <memberdef kind="function" id="classvar_1_1table_1a2c2a9860253cc9e72b822d35c777e749" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>std::vector&lt; D &gt;</type>
        <definition>std::vector&lt;D&gt; var::table&lt; D &gt;::get_stds</definition>
        <argsstring>()</argsstring>
        <name>get_stds</name>
        <briefdescription>
<para>Extract STD of each column into a vector. </para>
        </briefdescription>
        <detaileddescription>
<para>Used in <computeroutput>describe_all()</computeroutput></para>
<para><simplesect kind="return"><para><computeroutput>std::vector&lt;D&gt;</computeroutput> same size as number of columns </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="includes/variables/table.hpp" line="562" column="13" bodyfile="includes/variables/table.hpp" bodystart="562" bodyend="570"/>
      </memberdef>
      <memberdef kind="function" id="classvar_1_1table_1a196ea90112f0e84e30ea8fa6e7b1cb98" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>std::vector&lt; D &gt;</type>
        <definition>std::vector&lt;D&gt; var::table&lt; D &gt;::get_vars</definition>
        <argsstring>()</argsstring>
        <name>get_vars</name>
        <briefdescription>
<para>Extract variance of each column into a vector. </para>
        </briefdescription>
        <detaileddescription>
<para>Used in <computeroutput>describe_all()</computeroutput></para>
<para><simplesect kind="return"><para><computeroutput>std::vector&lt;D&gt;</computeroutput>: same size as numebr of columns </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="includes/variables/table.hpp" line="579" column="13" bodyfile="includes/variables/table.hpp" bodystart="579" bodyend="586"/>
      </memberdef>
      <memberdef kind="function" id="classvar_1_1table_1acde3b5b518d75c28078e60b2acfe9e1f" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>std::vector&lt; <ref refid="structvar_1_1QR" kindref="compound">QR</ref>&lt; D &gt; &gt;</type>
        <definition>std::vector&lt;QR&lt;D&gt; &gt; var::table&lt; D &gt;::get_qrs</definition>
        <argsstring>()</argsstring>
        <name>get_qrs</name>
        <briefdescription>
<para>Extract QR of each column into a vector. </para>
        </briefdescription>
        <detaileddescription>
<para>Used in <computeroutput>describe_all()</computeroutput></para>
<para><simplesect kind="return"><para><computeroutput>std::vector&lt;QR&gt;</computeroutput>: same size as number of colums </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="includes/variables/table.hpp" line="595" column="13" bodyfile="includes/variables/table.hpp" bodystart="595" bodyend="603"/>
      </memberdef>
      <memberdef kind="function" id="classvar_1_1table_1a85c69677672bfc6a61b0499e868c7465" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>std::vector&lt; D &gt;</type>
        <definition>std::vector&lt;D&gt; var::table&lt; D &gt;::get_sums</definition>
        <argsstring>()</argsstring>
        <name>get_sums</name>
        <briefdescription>
<para>Extract sum of each column into a vector. </para>
        </briefdescription>
        <detaileddescription>
<para>Used in <computeroutput>describe_all()</computeroutput></para>
<para><simplesect kind="return"><para><computeroutput>std::vector&lt;D&gt;</computeroutput> size is same size as number of colums </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="includes/variables/table.hpp" line="614" column="13" bodyfile="includes/variables/table.hpp" bodystart="614" bodyend="622"/>
      </memberdef>
      <memberdef kind="function" id="classvar_1_1table_1afa3958110fe2532e0e8f47c9281b9a90" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classvar_1_1table" kindref="compound">table</ref></type>
        <definition>table var::table&lt; D &gt;::describe_all</definition>
        <argsstring>()</argsstring>
        <name>describe_all</name>
        <briefdescription>
<para>Statistical summary of all colums in table. </para>
        </briefdescription>
        <detaileddescription>
<para>*Example:</para>
<para><table rows="3" cols="11"><row>
<entry thead="yes"><para></para>
</entry><entry thead="yes"><para>Avg   </para>
</entry><entry thead="yes"><para>STD   </para>
</entry><entry thead="yes"><para>VAR   </para>
</entry><entry thead="yes"><para>Min   </para>
</entry><entry thead="yes"><para>Q1   </para>
</entry><entry thead="yes"><para>Q2   </para>
</entry><entry thead="yes"><para>Q3   </para>
</entry><entry thead="yes"><para>Max   </para>
</entry><entry thead="yes"><para>IQR   </para>
</entry><entry thead="yes"><para>Sum    </para>
</entry></row>
<row>
<entry thead="no"><para>col-0   </para>
</entry><entry thead="no"><para>..   </para>
</entry><entry thead="no"><para>..   </para>
</entry><entry thead="no"><para>..   </para>
</entry><entry thead="no"><para>..   </para>
</entry><entry thead="no"><para>..   </para>
</entry><entry thead="no"><para>..   </para>
</entry><entry thead="no"><para>..   </para>
</entry><entry thead="no"><para>..   </para>
</entry><entry thead="no"><para>..   </para>
</entry><entry thead="no"><para>..    </para>
</entry></row>
<row>
<entry thead="no"><para>col-1   </para>
</entry><entry thead="no"><para>..   </para>
</entry><entry thead="no"><para>..   </para>
</entry><entry thead="no"><para>..   </para>
</entry><entry thead="no"><para>..   </para>
</entry><entry thead="no"><para>..   </para>
</entry><entry thead="no"><para>..   </para>
</entry><entry thead="no"><para>..   </para>
</entry><entry thead="no"><para>..   </para>
</entry><entry thead="no"><para>..   </para>
</entry><entry thead="no"><para>..   </para>
</entry></row>
</table>
</para>
<para><simplesect kind="return"><para><computeroutput>table&lt;D&gt;</computeroutput> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="includes/variables/table.hpp" line="636" column="7" bodyfile="includes/variables/table.hpp" bodystart="636" bodyend="681"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
<para>2D array class inheriting from <computeroutput>std::vector&lt;std::vector&lt;D&gt;&gt;</computeroutput> </para>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <inheritancegraph>
      <node id="2">
        <label>std::vector&lt; T &gt;</label>
      </node>
      <node id="1">
        <label>var::table&lt; D &gt;</label>
        <link refid="classvar_1_1table"/>
        <childnode refid="2" relation="public-inheritance">
        </childnode>
      </node>
    </inheritancegraph>
    <collaborationgraph>
      <node id="3">
        <label>T</label>
      </node>
      <node id="2">
        <label>std::vector&lt; T &gt;</label>
        <childnode refid="3" relation="usage">
          <edgelabel>+elements</edgelabel>
        </childnode>
      </node>
      <node id="1">
        <label>var::table&lt; D &gt;</label>
        <link refid="classvar_1_1table"/>
        <childnode refid="2" relation="public-inheritance">
        </childnode>
      </node>
    </collaborationgraph>
    <location file="includes/variables/table.hpp" line="25" column="1" bodyfile="includes/variables/table.hpp" bodystart="26" bodyend="682"/>
    <listofallmembers>
      <member refid="classvar_1_1table_1ad9a35db73dbd794283bf9b986c133ca3" prot="protected" virt="non-virtual"><scope>var::table</scope><name>_col</name></member>
      <member refid="classvar_1_1table_1a3d195e6796cfbc441b8e240b651d695b" prot="protected" virt="non-virtual"><scope>var::table</scope><name>_row</name></member>
      <member refid="classvar_1_1table_1aa749af1d60dccf89e6c72819a58b0227" prot="public" virt="non-virtual"><scope>var::table</scope><name>add_col</name></member>
      <member refid="classvar_1_1table_1abe04d33a4b04fff930fa8158e41309bb" prot="public" virt="non-virtual"><scope>var::table</scope><name>add_row</name></member>
      <member refid="classvar_1_1table_1a215cdf3b672a7231d895f4e6c4214b64" prot="protected" virt="non-virtual"><scope>var::table</scope><name>center</name></member>
      <member refid="classvar_1_1table_1af5c68e6a9c7857107e5ba88fcff52119" prot="protected" virt="non-virtual"><scope>var::table</scope><name>check_header</name></member>
      <member refid="classvar_1_1table_1a70b568d560efd34b1a67aee49135b8a6" prot="public" virt="non-virtual"><scope>var::table</scope><name>col</name></member>
      <member refid="classvar_1_1table_1a55535e54d90e2ddf7fbc98532e3dbaa3" prot="protected" virt="non-virtual"><scope>var::table</scope><name>col_names</name></member>
      <member refid="classvar_1_1table_1afa3958110fe2532e0e8f47c9281b9a90" prot="public" virt="non-virtual"><scope>var::table</scope><name>describe_all</name></member>
      <member refid="classstd_1_1vector_1a2396209900e8f592db1f0b2467f7d899" prot="public" virt="non-virtual"><scope>var::table</scope><name>elements</name></member>
      <member refid="classvar_1_1table_1a75cd6fd5f807343b311152f5118bb085" prot="protected" virt="non-virtual"><scope>var::table</scope><name>generate_cols</name></member>
      <member refid="classvar_1_1table_1a4ad03a888518a0919abcef08d9b307ea" prot="protected" virt="non-virtual"><scope>var::table</scope><name>generate_line</name></member>
      <member refid="classvar_1_1table_1a2032fb3518fc73b1af05770202d61e8c" prot="protected" virt="non-virtual"><scope>var::table</scope><name>generate_rows</name></member>
      <member refid="classvar_1_1table_1a4c6b4d98de8c0e527ac5f55ce455270b" prot="public" virt="non-virtual"><scope>var::table</scope><name>get_avgs</name></member>
      <member refid="classvar_1_1table_1a6a199939870fc52d1cf6de8dc64581e5" prot="protected" virt="non-virtual"><scope>var::table</scope><name>get_col_</name></member>
      <member refid="classvar_1_1table_1ad3c49fc9f806e825a40618000a6cb0ca" prot="protected" virt="non-virtual"><scope>var::table</scope><name>get_col_</name></member>
      <member refid="classvar_1_1table_1abc5c989c570b6c90e15623cc7b2db1d0" prot="public" virt="non-virtual"><scope>var::table</scope><name>get_col_names</name></member>
      <member refid="classvar_1_1table_1a28b6553353daf2c3e34a5786f90dd25c" prot="public" virt="non-virtual"><scope>var::table</scope><name>get_col_table</name></member>
      <member refid="classvar_1_1table_1ae6fcb87b2b648ee28fb2258f1eab3f6c" prot="public" virt="non-virtual"><scope>var::table</scope><name>get_element</name></member>
      <member refid="classvar_1_1table_1acde3b5b518d75c28078e60b2acfe9e1f" prot="public" virt="non-virtual"><scope>var::table</scope><name>get_qrs</name></member>
      <member refid="classvar_1_1table_1aaec876550ab824cf2e02af43d1e519de" prot="public" virt="non-virtual"><scope>var::table</scope><name>get_row_names</name></member>
      <member refid="classvar_1_1table_1a30907a37fd8b053fcdddf9b0fab3bb3a" prot="public" virt="non-virtual"><scope>var::table</scope><name>get_row_table</name></member>
      <member refid="classvar_1_1table_1a2c2a9860253cc9e72b822d35c777e749" prot="public" virt="non-virtual"><scope>var::table</scope><name>get_stds</name></member>
      <member refid="classvar_1_1table_1a85c69677672bfc6a61b0499e868c7465" prot="public" virt="non-virtual"><scope>var::table</scope><name>get_sums</name></member>
      <member refid="classvar_1_1table_1a196ea90112f0e84e30ea8fa6e7b1cb98" prot="public" virt="non-virtual"><scope>var::table</scope><name>get_vars</name></member>
      <member refid="classvar_1_1table_1a39534497537c1b9a7f9ab79280fba6f9" prot="public" virt="non-virtual"><scope>var::table</scope><name>operator[]</name></member>
      <member refid="classvar_1_1table_1a0b08c797c3314998239636e4840ff74e" prot="protected" virt="non-virtual"><scope>var::table</scope><name>prd</name></member>
      <member refid="classvar_1_1table_1ae783c7e8063d4999c621f28a44dd215c" prot="protected" virt="non-virtual"><scope>var::table</scope><name>prd</name></member>
      <member refid="classvar_1_1table_1ac3f099c46a47c6428689efefad42dcf2" prot="public" virt="non-virtual"><scope>var::table</scope><name>read_csv</name></member>
      <member refid="classvar_1_1table_1a7dbdb10f2db71872774179122ba9520b" prot="public" virt="non-virtual"><scope>var::table</scope><name>row</name></member>
      <member refid="classvar_1_1table_1ad69844095e9fd79ebdca86f22fa42ff5" prot="protected" virt="non-virtual"><scope>var::table</scope><name>row_names</name></member>
      <member refid="classvar_1_1table_1aa287b9c7b64b4d5d8bd03e9a6a65a044" prot="public" virt="non-virtual"><scope>var::table</scope><name>save_csv</name></member>
      <member refid="classvar_1_1table_1a86899556462d8e8fc6499432157e4352" prot="public" virt="non-virtual"><scope>var::table</scope><name>set_col_names</name></member>
      <member refid="classvar_1_1table_1a60611dd76aa2d387bb2909ef3a948427" prot="public" virt="non-virtual"><scope>var::table</scope><name>set_row_names</name></member>
      <member refid="classvar_1_1table_1abeffbc869d8244691cf7f05125e18fd2" prot="protected" virt="non-virtual"><scope>var::table</scope><name>set_size</name></member>
      <member refid="classvar_1_1table_1a462865ba0a86a2e26cce1ab85b60cbbf" prot="public" virt="non-virtual"><scope>var::table</scope><name>show</name></member>
      <member refid="classvar_1_1table_1ad471ed11d98bd02b5935cc71ba911bae" prot="public" virt="non-virtual"><scope>var::table</scope><name>show</name></member>
      <member refid="classvar_1_1table_1a5e7459882c4bd4bc29759f5fb3c1ee10" prot="public" virt="non-virtual"><scope>var::table</scope><name>show_header</name></member>
      <member refid="classvar_1_1table_1ae067e021bec7ba45f14e0a6c45c6116d" prot="protected" virt="non-virtual"><scope>var::table</scope><name>sz</name></member>
      <member refid="classvar_1_1table_1ada6ebdf0a90915bedfa07fc57b31a504" prot="public" virt="non-virtual"><scope>var::table</scope><name>table</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
