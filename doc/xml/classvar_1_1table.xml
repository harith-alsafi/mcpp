<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.9.2" xml:lang="en-US">
  <compounddef id="classvar_1_1table" kind="class" language="C++" prot="public">
    <compoundname>var::table</compoundname>
    <includes local="yes">table.hpp</includes>
    <templateparamlist>
      <param>
        <type>typename D</type>
      </param>
    </templateparamlist>
      <sectiondef kind="protected-attrib">
      <memberdef kind="variable" id="classvar_1_1table_1a35741492731785ddcf09bcb83a87d2d3" prot="protected" static="no" mutable="no">
        <type>std::vector&lt; D &gt;</type>
        <definition>std::vector&lt;D&gt; var::table&lt; D &gt;::data</definition>
        <argsstring></argsstring>
        <name>data</name>
        <briefdescription>
<para>Data container. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="includes/variables/table.hpp" line="35" column="13" bodyfile="includes/variables/table.hpp" bodystart="35" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classvar_1_1table_1a4c5403a105d653588858bf31a6a6224d" prot="protected" static="no" mutable="no">
        <type>std::map&lt; int, std::string &gt;</type>
        <definition>std::map&lt;int, std::string&gt; var::table&lt; D &gt;::col_names</definition>
        <argsstring></argsstring>
        <name>col_names</name>
        <briefdescription>
<para>Column names. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="includes/variables/table.hpp" line="36" column="10" bodyfile="includes/variables/table.hpp" bodystart="36" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classvar_1_1table_1abaccb2b99ccdc47306134797f28c4a95" prot="protected" static="no" mutable="no">
        <type>std::map&lt; int, std::string &gt;</type>
        <definition>std::map&lt;int, std::string&gt; var::table&lt; D &gt;::row_names</definition>
        <argsstring></argsstring>
        <name>row_names</name>
        <briefdescription>
<para>Row names. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="includes/variables/table.hpp" line="37" column="10" bodyfile="includes/variables/table.hpp" bodystart="37" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classvar_1_1table_1a3d195e6796cfbc441b8e240b651d695b" prot="protected" static="no" mutable="no">
        <type>int</type>
        <definition>int var::table&lt; D &gt;::_row</definition>
        <argsstring></argsstring>
        <name>_row</name>
        <briefdescription>
<para>Row size. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="includes/variables/table.hpp" line="38" column="5" bodyfile="includes/variables/table.hpp" bodystart="38" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classvar_1_1table_1ad9a35db73dbd794283bf9b986c133ca3" prot="protected" static="no" mutable="no">
        <type>int</type>
        <definition>int var::table&lt; D &gt;::_col</definition>
        <argsstring></argsstring>
        <name>_col</name>
        <briefdescription>
<para>Colum size. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="includes/variables/table.hpp" line="39" column="5" bodyfile="includes/variables/table.hpp" bodystart="39" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classvar_1_1table_1ae067e021bec7ba45f14e0a6c45c6116d" prot="protected" static="no" mutable="no">
        <type>int</type>
        <definition>int var::table&lt; D &gt;::sz</definition>
        <argsstring></argsstring>
        <name>sz</name>
        <initializer>= 10</initializer>
        <briefdescription>
<para>Spacing size for print. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="includes/variables/table.hpp" line="40" column="5" bodyfile="includes/variables/table.hpp" bodystart="40" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="protected-static-attrib">
      <memberdef kind="variable" id="classvar_1_1table_1a5220f83aec460bcdde68215bb08a7cd7" prot="protected" static="yes" mutable="no">
        <type>const std::string</type>
        <definition>const std::string var::table&lt; D &gt;::empty_name</definition>
        <argsstring></argsstring>
        <name>empty_name</name>
        <initializer>= &quot;n/a&quot;</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="includes/variables/table.hpp" line="41" column="37" bodyfile="includes/variables/table.hpp" bodystart="41" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="protected-func">
      <memberdef kind="function" id="classvar_1_1table_1ab07ae6c9f4caef7a61a1fbc98ca638fd" prot="protected" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>int</type>
        <definition>int var::table&lt; D &gt;::get_index</definition>
        <argsstring>(int i, int j)</argsstring>
        <name>get_index</name>
        <param>
          <type>int</type>
          <declname>i</declname>
        </param>
        <param>
          <type>int</type>
          <declname>j</declname>
        </param>
        <briefdescription>
<para>Get the index (maps 1D vector to 2D vector) </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>i</parametername>
</parameternamelist>
<parameterdescription>
<para>row index </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>j</parametername>
</parameternamelist>
<parameterdescription>
<para>column index </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para><computeroutput>int</computeroutput> used for <computeroutput>data</computeroutput> index <linebreak/>
 </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="includes/variables/table.hpp" line="50" column="5" bodyfile="includes/variables/table.hpp" bodystart="50" bodyend="53"/>
      </memberdef>
      <memberdef kind="function" id="classvar_1_1table_1a42caed33499ca87d392e45e53fb6bc89" prot="protected" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>int</type>
        <definition>int var::table&lt; D &gt;::check_col_name</definition>
        <argsstring>(std::string name)</argsstring>
        <name>check_col_name</name>
        <param>
          <type>std::string</type>
          <declname>name</declname>
        </param>
        <briefdescription>
<para>Returns column index of given column name. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>name</parametername>
</parameternamelist>
<parameterdescription>
<para>string of column name </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para><computeroutput>int</computeroutput> $[-1]$: index not found <linebreak/>
 </para>
</simplesect>
<simplesect kind="return"><para><computeroutput>int</computeroutput> $[\geq 0]$: index found </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="includes/variables/table.hpp" line="62" column="5" bodyfile="includes/variables/table.hpp" bodystart="62" bodyend="72"/>
      </memberdef>
      <memberdef kind="function" id="classvar_1_1table_1ac3e95893eeb5711dbdcd402a6b06dea3" prot="protected" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>int</type>
        <definition>int var::table&lt; D &gt;::check_row_name</definition>
        <argsstring>(std::string name)</argsstring>
        <name>check_row_name</name>
        <param>
          <type>std::string</type>
          <declname>name</declname>
        </param>
        <briefdescription>
<para>Returns row index of given row name. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>name</parametername>
</parameternamelist>
<parameterdescription>
<para>string of row name </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para><computeroutput>int</computeroutput> $[-1]$: index not found <linebreak/>
 </para>
</simplesect>
<simplesect kind="return"><para><computeroutput>int</computeroutput> $[\geq 0]$: index found </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="includes/variables/table.hpp" line="81" column="5" bodyfile="includes/variables/table.hpp" bodystart="81" bodyend="91"/>
      </memberdef>
      <memberdef kind="function" id="classvar_1_1table_1a4ad03a888518a0919abcef08d9b307ea" prot="protected" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>std::string</type>
        <definition>std::string var::table&lt; D &gt;::generate_line</definition>
        <argsstring>(int l)</argsstring>
        <name>generate_line</name>
        <param>
          <type>int</type>
          <declname>l</declname>
        </param>
        <briefdescription>
<para>Generates line to seperate rows. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>l</parametername>
</parameternamelist>
<parameterdescription>
<para>number of &quot;―&quot; in the generated string </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para><computeroutput>std::string</computeroutput> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="includes/variables/table.hpp" line="158" column="13" bodyfile="includes/variables/table.hpp" bodystart="158" bodyend="165"/>
      </memberdef>
      <memberdef kind="function" id="classvar_1_1table_1a75cd6fd5f807343b311152f5118bb085" prot="protected" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void var::table&lt; D &gt;::generate_cols</definition>
        <argsstring>()</argsstring>
        <name>generate_cols</name>
        <briefdescription>
<para>Clears current column names and generates new ones. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="includes/variables/table.hpp" line="171" column="6" bodyfile="includes/variables/table.hpp" bodystart="171" bodyend="176"/>
      </memberdef>
      <memberdef kind="function" id="classvar_1_1table_1a2032fb3518fc73b1af05770202d61e8c" prot="protected" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void var::table&lt; D &gt;::generate_rows</definition>
        <argsstring>()</argsstring>
        <name>generate_rows</name>
        <briefdescription>
<para>Clears current column names and generates new ones. </para>
        </briefdescription>
        <detaileddescription>
<sect2 id="classvar_1_1table_1autotoc_md4">
<title>Constructors</title>
</sect2>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="includes/variables/table.hpp" line="182" column="6" bodyfile="includes/variables/table.hpp" bodystart="182" bodyend="187"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="protected-static-func">
      <memberdef kind="function" id="classvar_1_1table_1a215cdf3b672a7231d895f4e6c4214b64" prot="protected" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>std::string</type>
        <definition>static std::string var::table&lt; D &gt;::center</definition>
        <argsstring>(const std::string s, const int w)</argsstring>
        <name>center</name>
        <param>
          <type>const std::string</type>
          <declname>s</declname>
        </param>
        <param>
          <type>const int</type>
          <declname>w</declname>
        </param>
        <briefdescription>
<para>Re-centers a string based on given width. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>s</parametername>
</parameternamelist>
<parameterdescription>
<para>string given </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>w</parametername>
</parameternamelist>
<parameterdescription>
<para>width to center the string to </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para><computeroutput>std::string</computeroutput> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="includes/variables/table.hpp" line="100" column="20" bodyfile="includes/variables/table.hpp" bodystart="100" bodyend="113"/>
      </memberdef>
      <memberdef kind="function" id="classvar_1_1table_1a0b08c797c3314998239636e4840ff74e" prot="protected" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>std::string</type>
        <definition>static std::string var::table&lt; D &gt;::prd</definition>
        <argsstring>(D x, int width)</argsstring>
        <name>prd</name>
        <param>
          <type>D</type>
          <declname>x</declname>
        </param>
        <param>
          <type>int</type>
          <declname>width</declname>
        </param>
        <briefdescription>
<para>Fills the string with given width with empty space. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>x</parametername>
</parameternamelist>
<parameterdescription>
<para>string given </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>width</parametername>
</parameternamelist>
<parameterdescription>
<para>width to center the string to </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para><computeroutput>std::string</computeroutput> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="includes/variables/table.hpp" line="122" column="20" bodyfile="includes/variables/table.hpp" bodystart="122" bodyend="131"/>
      </memberdef>
      <memberdef kind="function" id="classvar_1_1table_1ae783c7e8063d4999c621f28a44dd215c" prot="protected" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>std::string</type>
        <definition>static std::string var::table&lt; D &gt;::prd</definition>
        <argsstring>(std::string x, int width)</argsstring>
        <name>prd</name>
        <param>
          <type>std::string</type>
          <declname>x</declname>
        </param>
        <param>
          <type>int</type>
          <declname>width</declname>
        </param>
        <briefdescription>
<para>Gives spacing to a string. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="see"><para>Similar to <ref refid="classvar_1_1table_1a0b08c797c3314998239636e4840ff74e" kindref="member">var::table::prd(D, int)</ref></para>
</simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>x</parametername>
</parameternamelist>
<parameterdescription>
<para>string given </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>width</parametername>
</parameternamelist>
<parameterdescription>
<para>width to center the string to </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para><computeroutput>std::string</computeroutput> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="includes/variables/table.hpp" line="142" column="20" bodyfile="includes/variables/table.hpp" bodystart="142" bodyend="150"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-func">
      <memberdef kind="function" id="classvar_1_1table_1ada6ebdf0a90915bedfa07fc57b31a504" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type></type>
        <definition>var::table&lt; D &gt;::table</definition>
        <argsstring>()</argsstring>
        <name>table</name>
        <briefdescription>
<para>Construct a new table object. </para>
        </briefdescription>
        <detaileddescription>
<para><itemizedlist>
<listitem><para>Usage: <programlisting filename=".cpp"><codeline><highlight class="normal"><ref refid="classvar_1_1table" kindref="compound">var::table&lt;int&gt;</ref><sp/>t;</highlight></codeline>
</programlisting> </para>
</listitem></itemizedlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="includes/variables/table.hpp" line="198" column="1" bodyfile="includes/variables/table.hpp" bodystart="198" bodyend="200"/>
      </memberdef>
      <memberdef kind="function" id="classvar_1_1table_1af13ef05abffb251c15846e8f881867db" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type></type>
        <definition>var::table&lt; D &gt;::table</definition>
        <argsstring>(int r, int c)</argsstring>
        <name>table</name>
        <param>
          <type>int</type>
          <declname>r</declname>
        </param>
        <param>
          <type>int</type>
          <declname>c</declname>
        </param>
        <briefdescription>
<para>Construct a new table object. </para>
        </briefdescription>
        <detaileddescription>
<para><bold>Usage</bold>: <programlisting filename=".cpp"><codeline><highlight class="normal"><ref refid="classvar_1_1table" kindref="compound">var::table&lt;int&gt;</ref><sp/>t(2,<sp/>3);<sp/></highlight><highlight class="comment">//<sp/>2<sp/>rows,<sp/>3<sp/>colums<sp/>of<sp/>all<sp/>0</highlight></codeline>
</programlisting> <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>r</parametername>
</parameternamelist>
<parameterdescription>
<para>number of rows </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>c</parametername>
</parameternamelist>
<parameterdescription>
<para>number of colums </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="includes/variables/table.hpp" line="212" column="1" bodyfile="includes/variables/table.hpp" bodystart="212" bodyend="222"/>
      </memberdef>
      <memberdef kind="function" id="classvar_1_1table_1aa41d04fa2ccba5635d9b3308eea7fcc1" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type></type>
        <definition>var::table&lt; D &gt;::table</definition>
        <argsstring>(std::initializer_list&lt; std::initializer_list&lt; D &gt;&gt; a)</argsstring>
        <name>table</name>
        <param>
          <type>std::initializer_list&lt; std::initializer_list&lt; D &gt;&gt;</type>
          <declname>a</declname>
        </param>
        <briefdescription>
<para>Construct a new table object. </para>
        </briefdescription>
        <detaileddescription>
<para><bold>Usage</bold>: <programlisting filename=".cpp"><codeline><highlight class="normal"><ref refid="classvar_1_1table" kindref="compound">var::table&lt;int&gt;</ref><sp/>m<sp/>=<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/>{1,<sp/>2,<sp/>3},</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/>{4,<sp/>5,<sp/>6},</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/>{7,<sp/>8,<sp/>9}</highlight></codeline>
<codeline><highlight class="normal">};</highlight></codeline>
</programlisting></para>
<sect2 id="classvar_1_1table_1autotoc_md5">
<title>General getters</title>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>a</parametername>
</parameternamelist>
<parameterdescription>
<para>initializer list </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
</sect2>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="includes/variables/table.hpp" line="240" column="1" bodyfile="includes/variables/table.hpp" bodystart="240" bodyend="248"/>
      </memberdef>
      <memberdef kind="function" id="classvar_1_1table_1a7dbdb10f2db71872774179122ba9520b" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>int</type>
        <definition>int var::table&lt; D &gt;::row</definition>
        <argsstring>()</argsstring>
        <name>row</name>
        <briefdescription>
<para>Get the row size. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para><computeroutput>int</computeroutput> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="includes/variables/table.hpp" line="257" column="5" bodyfile="includes/variables/table.hpp" bodystart="257" bodyend="260"/>
      </memberdef>
      <memberdef kind="function" id="classvar_1_1table_1a70b568d560efd34b1a67aee49135b8a6" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>int</type>
        <definition>int var::table&lt; D &gt;::col</definition>
        <argsstring>()</argsstring>
        <name>col</name>
        <briefdescription>
<para>Get the col size. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para><computeroutput>int</computeroutput> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="includes/variables/table.hpp" line="267" column="5" bodyfile="includes/variables/table.hpp" bodystart="267" bodyend="270"/>
      </memberdef>
      <memberdef kind="function" id="classvar_1_1table_1ac80c2b7b248e832d49280e71a9b34081" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>int</type>
        <definition>int var::table&lt; D &gt;::size</definition>
        <argsstring>()</argsstring>
        <name>size</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="includes/variables/table.hpp" line="272" column="5" bodyfile="includes/variables/table.hpp" bodystart="272" bodyend="275"/>
      </memberdef>
      <memberdef kind="function" id="classvar_1_1table_1a03c80af84df447196e80c74952211c2f" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>D &amp;</type>
        <definition>D&amp; var::table&lt; D &gt;::at</definition>
        <argsstring>(int i, int j)</argsstring>
        <name>at</name>
        <param>
          <type>int</type>
          <declname>i</declname>
        </param>
        <param>
          <type>int</type>
          <declname>j</declname>
        </param>
        <briefdescription>
<para>Returns reference to element (i, j) </para>
        </briefdescription>
        <detaileddescription>
<sect2 id="classvar_1_1table_1autotoc_md6">
<title>Column getters</title>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>i</parametername>
</parameternamelist>
<parameterdescription>
<para>row index </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>j</parametername>
</parameternamelist>
<parameterdescription>
<para>column index </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para><computeroutput>D&amp;</computeroutput> element <linebreak/>
 </para>
</simplesect>
<parameterlist kind="exception"><parameteritem>
<parameternamelist>
<parametername>&lt;tt&gt;std::invalid_argument&lt;/tt&gt;</parametername>
</parameternamelist>
<parameterdescription>
<para>if invalid indexes </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
</sect2>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="includes/variables/table.hpp" line="287" column="3" bodyfile="includes/variables/table.hpp" bodystart="287" bodyend="293"/>
      </memberdef>
      <memberdef kind="function" id="classvar_1_1table_1a0bb55e3d7e124c19b2ef1e9298c71cf8" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>std::map&lt; int, std::string &gt;</type>
        <definition>std::map&lt;int, std::string&gt; var::table&lt; D &gt;::get_col_names</definition>
        <argsstring>()</argsstring>
        <name>get_col_names</name>
        <briefdescription>
<para>Get the col names with the index that they refer to If column name was not added then you won&apos;t find the index. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para><computeroutput>std::map&lt;int, std::string&gt;</computeroutput> <linebreak/>
 </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="includes/variables/table.hpp" line="301" column="10" bodyfile="includes/variables/table.hpp" bodystart="301" bodyend="304"/>
      </memberdef>
      <memberdef kind="function" id="classvar_1_1table_1a1f769b9eae28d7c8fed43acd4fca1bd4" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>std::vector&lt; D &gt;</type>
        <definition>std::vector&lt;D&gt; var::table&lt; D &gt;::get_col</definition>
        <argsstring>(int j)</argsstring>
        <name>get_col</name>
        <param>
          <type>int</type>
          <declname>j</declname>
        </param>
        <briefdescription>
<para>Get the colum based on index. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>j</parametername>
</parameternamelist>
<parameterdescription>
<para>index of that colum </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para><computeroutput>std::vector&lt;D&gt;</computeroutput> <linebreak/>
 </para>
</simplesect>
<parameterlist kind="exception"><parameteritem>
<parameternamelist>
<parametername>&lt;tt&gt;std::invalid_argument&lt;/tt&gt;</parametername>
</parameternamelist>
<parameterdescription>
<para>in case index is invalid </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="includes/variables/table.hpp" line="313" column="13" bodyfile="includes/variables/table.hpp" bodystart="313" bodyend="323"/>
      </memberdef>
      <memberdef kind="function" id="classvar_1_1table_1a894dfeda7b8fed0898b5395c6d9f1fa5" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>std::vector&lt; D &gt;</type>
        <definition>std::vector&lt;D&gt; var::table&lt; D &gt;::get_col</definition>
        <argsstring>(std::string name)</argsstring>
        <name>get_col</name>
        <param>
          <type>std::string</type>
          <declname>name</declname>
        </param>
        <briefdescription>
<para>Get the column vector based on header name. </para>
        </briefdescription>
        <detaileddescription>
<sect2 id="classvar_1_1table_1autotoc_md7">
<title>Row getters</title>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>name</parametername>
</parameternamelist>
<parameterdescription>
<para>name of the column </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para><computeroutput>std::vector&lt;D&gt;</computeroutput> </para>
</simplesect>
<parameterlist kind="exception"><parameteritem>
<parameternamelist>
<parametername>&lt;tt&gt;std::invalid_argument&lt;/tt&gt;</parametername>
</parameternamelist>
<parameterdescription>
<para>in case name is invalid </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
</sect2>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="includes/variables/table.hpp" line="333" column="13" bodyfile="includes/variables/table.hpp" bodystart="333" bodyend="336"/>
      </memberdef>
      <memberdef kind="function" id="classvar_1_1table_1ab394c03c2c51586641f2a41a2e3a1759" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classvar_1_1table" kindref="compound">table</ref></type>
        <definition>table var::table&lt; D &gt;::get_col_table</definition>
        <argsstring>(int j)</argsstring>
        <name>get_col_table</name>
        <param>
          <type>int</type>
          <declname>j</declname>
        </param>
        <briefdescription>
<para>Get the col as <computeroutput>table</computeroutput> </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>j</parametername>
</parameternamelist>
<parameterdescription>
<para>index ofo that column </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para><computeroutput>table</computeroutput> </para>
</simplesect>
<parameterlist kind="exception"><parameteritem>
<parameternamelist>
<parametername>&lt;tt&gt;std::invalid_argument&lt;/tt&gt;</parametername>
</parameternamelist>
<parameterdescription>
<para>in case index is invalid </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="includes/variables/table.hpp" line="345" column="7" bodyfile="includes/variables/table.hpp" bodystart="345" bodyend="356"/>
      </memberdef>
      <memberdef kind="function" id="classvar_1_1table_1a28b6553353daf2c3e34a5786f90dd25c" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classvar_1_1table" kindref="compound">table</ref></type>
        <definition>table var::table&lt; D &gt;::get_col_table</definition>
        <argsstring>(std::string name)</argsstring>
        <name>get_col_table</name>
        <param>
          <type>std::string</type>
          <declname>name</declname>
        </param>
        <briefdescription>
<para>Get the col as <computeroutput>table</computeroutput> </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>name</parametername>
</parameternamelist>
<parameterdescription>
<para>column name </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para><computeroutput>table</computeroutput> </para>
</simplesect>
<parameterlist kind="exception"><parameteritem>
<parameternamelist>
<parametername>&lt;tt&gt;std::invalid_argument&lt;/tt&gt;</parametername>
</parameternamelist>
<parameterdescription>
<para>in case name is invalid </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="includes/variables/table.hpp" line="365" column="7" bodyfile="includes/variables/table.hpp" bodystart="365" bodyend="368"/>
      </memberdef>
      <memberdef kind="function" id="classvar_1_1table_1ae879752be3975566d379d416aef96775" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>std::map&lt; int, std::string &gt;</type>
        <definition>std::map&lt;int, std::string&gt; var::table&lt; D &gt;::get_row_names</definition>
        <argsstring>()</argsstring>
        <name>get_row_names</name>
        <briefdescription>
<para>Get the row names. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para><computeroutput>std::map&lt;int, std::string&gt;</computeroutput> <linebreak/>
 </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="includes/variables/table.hpp" line="375" column="10" bodyfile="includes/variables/table.hpp" bodystart="375" bodyend="378"/>
      </memberdef>
      <memberdef kind="function" id="classvar_1_1table_1aee7e0ae316423385adcf7f6d325db712" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>std::vector&lt; D &gt;</type>
        <definition>std::vector&lt;D&gt; var::table&lt; D &gt;::get_row</definition>
        <argsstring>(int i)</argsstring>
        <name>get_row</name>
        <param>
          <type>int</type>
          <declname>i</declname>
        </param>
        <briefdescription>
<para>Get the row based on index. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>i</parametername>
</parameternamelist>
<parameterdescription>
<para>index of that row </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para><computeroutput>std::vector&lt;&amp;D&gt;</computeroutput> <linebreak/>
 </para>
</simplesect>
<parameterlist kind="exception"><parameteritem>
<parameternamelist>
<parametername>&lt;tt&gt;std::invalid_argument&lt;/tt&gt;</parametername>
</parameternamelist>
<parameterdescription>
<para>in case index is invalid </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="includes/variables/table.hpp" line="387" column="13" bodyfile="includes/variables/table.hpp" bodystart="387" bodyend="397"/>
      </memberdef>
      <memberdef kind="function" id="classvar_1_1table_1af06d391ee69ef70848c9620621dee65d" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>std::vector&lt; D &gt;</type>
        <definition>std::vector&lt;D&gt; var::table&lt; D &gt;::get_row</definition>
        <argsstring>(std::string name)</argsstring>
        <name>get_row</name>
        <param>
          <type>std::string</type>
          <declname>name</declname>
        </param>
        <briefdescription>
<para>Get the row vector based on header name. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>name</parametername>
</parameternamelist>
<parameterdescription>
<para>name of the row </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para><computeroutput>std::vector&lt;D&gt;</computeroutput>: Empty if nothing exits <linebreak/>
 </para>
</simplesect>
<parameterlist kind="exception"><parameteritem>
<parameternamelist>
<parametername>&lt;tt&gt;std::invalid_argument&lt;/tt&gt;</parametername>
</parameternamelist>
<parameterdescription>
<para>in case name is invalid </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="includes/variables/table.hpp" line="407" column="13" bodyfile="includes/variables/table.hpp" bodystart="407" bodyend="410"/>
      </memberdef>
      <memberdef kind="function" id="classvar_1_1table_1a42805f86e64469221e5d789b8373a34c" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classvar_1_1table" kindref="compound">table</ref></type>
        <definition>table var::table&lt; D &gt;::get_row_table</definition>
        <argsstring>(int i)</argsstring>
        <name>get_row_table</name>
        <param>
          <type>int</type>
          <declname>i</declname>
        </param>
        <briefdescription>
<para>Get the row as table. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>i</parametername>
</parameternamelist>
<parameterdescription>
<para></para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>table </para>
</simplesect>
<parameterlist kind="exception"><parameteritem>
<parameternamelist>
<parametername>&lt;tt&gt;std::invalid_argument&lt;/tt&gt;</parametername>
</parameternamelist>
<parameterdescription>
<para>in case index is invalid </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="includes/variables/table.hpp" line="419" column="7" bodyfile="includes/variables/table.hpp" bodystart="419" bodyend="430"/>
      </memberdef>
      <memberdef kind="function" id="classvar_1_1table_1a8d7d4f9bf7d3ef4dac586449436018fc" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classvar_1_1table" kindref="compound">table</ref></type>
        <definition>table var::table&lt; D &gt;::get_row_table</definition>
        <argsstring>(std::string name)</argsstring>
        <name>get_row_table</name>
        <param>
          <type>std::string</type>
          <declname>name</declname>
        </param>
        <briefdescription>
<para>Get the row as table. </para>
        </briefdescription>
        <detaileddescription>
<sect2 id="classvar_1_1table_1autotoc_md8">
<title>Column setters</title>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>name</parametername>
</parameternamelist>
<parameterdescription>
<para></para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>table </para>
</simplesect>
<parameterlist kind="exception"><parameteritem>
<parameternamelist>
<parametername>&lt;tt&gt;std::invalid_argument&lt;/tt&gt;</parametername>
</parameternamelist>
<parameterdescription>
<para>in case name is invalid </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
</sect2>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="includes/variables/table.hpp" line="441" column="7" bodyfile="includes/variables/table.hpp" bodystart="441" bodyend="444"/>
      </memberdef>
      <memberdef kind="function" id="classvar_1_1table_1a86899556462d8e8fc6499432157e4352" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void var::table&lt; D &gt;::set_col_names</definition>
        <argsstring>(std::vector&lt; std::string &gt; names)</argsstring>
        <name>set_col_names</name>
        <param>
          <type>std::vector&lt; std::string &gt;</type>
          <declname>names</declname>
        </param>
        <briefdescription>
<para>Set the col names. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>names</parametername>
</parameternamelist>
<parameterdescription>
<para><computeroutput>vector</computeroutput> of column names </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="exception"><parameteritem>
<parameternamelist>
<parametername>&lt;tt&gt;std::invalid_argument&lt;/tt&gt;</parametername>
</parameternamelist>
<parameterdescription>
<para>size of <computeroutput>vector</computeroutput> names doesnt match column size </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="includes/variables/table.hpp" line="454" column="6" bodyfile="includes/variables/table.hpp" bodystart="454" bodyend="462"/>
      </memberdef>
      <memberdef kind="function" id="classvar_1_1table_1aea28b09580171d064d30c57f2039252a" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void var::table&lt; D &gt;::set_col_name</definition>
        <argsstring>(int j, std::string name)</argsstring>
        <name>set_col_name</name>
        <param>
          <type>int</type>
          <declname>j</declname>
        </param>
        <param>
          <type>std::string</type>
          <declname>name</declname>
        </param>
        <briefdescription>
<para>Set the col name Doesn&apos;t set empty names (no exception) </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>j</parametername>
</parameternamelist>
<parameterdescription>
<para>index of column </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>name</parametername>
</parameternamelist>
<parameterdescription>
<para>name of column </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="exception"><parameteritem>
<parameternamelist>
<parametername>&lt;tt&gt;std::invalid_argument&lt;/tt&gt;</parametername>
</parameternamelist>
<parameterdescription>
<para>invalid index <computeroutput>j</computeroutput> </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="includes/variables/table.hpp" line="471" column="6" bodyfile="includes/variables/table.hpp" bodystart="471" bodyend="479"/>
      </memberdef>
      <memberdef kind="function" id="classvar_1_1table_1aba93eaa51558c8d2fea4c3d457b31935" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void var::table&lt; D &gt;::insert_col</definition>
        <argsstring>(std::vector&lt; D &gt; a, int j, std::string name=empty_name)</argsstring>
        <name>insert_col</name>
        <param>
          <type>std::vector&lt; D &gt;</type>
          <declname>a</declname>
        </param>
        <param>
          <type>int</type>
          <declname>j</declname>
        </param>
        <param>
          <type>std::string</type>
          <declname>name</declname>
          <defval><ref refid="classvar_1_1table_1a5220f83aec460bcdde68215bb08a7cd7" kindref="member">empty_name</ref></defval>
        </param>
        <briefdescription>
<para>Inserts new column into given index Doesn&apos;t set empty names (no exception) </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>a</parametername>
</parameternamelist>
<parameterdescription>
<para>column to be inserted </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>j</parametername>
</parameternamelist>
<parameterdescription>
<para>column index to insert at </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>name</parametername>
</parameternamelist>
<parameterdescription>
<para><computeroutput>default(&quot;n/a&quot;)</computeroutput> name of the column </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="exception"><parameteritem>
<parameternamelist>
<parametername>&lt;tt&gt;std::invalid_argument&lt;/tt&gt;</parametername>
</parameternamelist>
<parameterdescription>
<para>invalid column index </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>&lt;tt&gt;std::invalid_argument&lt;/tt&gt;</parametername>
</parameternamelist>
<parameterdescription>
<para><computeroutput>a.size()</computeroutput> $\neq$ row size </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="includes/variables/table.hpp" line="490" column="6" bodyfile="includes/variables/table.hpp" bodystart="490" bodyend="517"/>
      </memberdef>
      <memberdef kind="function" id="classvar_1_1table_1a90ba82fb775f945bd18c3897e0992c0d" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void var::table&lt; D &gt;::push_col</definition>
        <argsstring>(std::vector&lt; D &gt; a, std::string name=empty_name)</argsstring>
        <name>push_col</name>
        <param>
          <type>std::vector&lt; D &gt;</type>
          <declname>a</declname>
        </param>
        <param>
          <type>std::string</type>
          <declname>name</declname>
          <defval><ref refid="classvar_1_1table_1a5220f83aec460bcdde68215bb08a7cd7" kindref="member">empty_name</ref></defval>
        </param>
        <briefdescription>
<para>Pushes column at the end of the table Doesn&apos;t set empty names (no exception) </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>a</parametername>
</parameternamelist>
<parameterdescription>
<para>column to be inserted </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>name</parametername>
</parameternamelist>
<parameterdescription>
<para><computeroutput>default(&quot;n/a&quot;)</computeroutput> name of the column </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="exception"><parameteritem>
<parameternamelist>
<parametername>&lt;tt&gt;std::invalid_argument&lt;/tt&gt;</parametername>
</parameternamelist>
<parameterdescription>
<para><computeroutput>a.size()</computeroutput> $\neq$ row size </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="includes/variables/table.hpp" line="526" column="6" bodyfile="includes/variables/table.hpp" bodystart="526" bodyend="532"/>
      </memberdef>
      <memberdef kind="function" id="classvar_1_1table_1a183820c43f0aaa542c1ac9db22be5eec" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void var::table&lt; D &gt;::swap_col</definition>
        <argsstring>(int j1, int j2)</argsstring>
        <name>swap_col</name>
        <param>
          <type>int</type>
          <declname>j1</declname>
        </param>
        <param>
          <type>int</type>
          <declname>j2</declname>
        </param>
        <briefdescription>
<para>Swaps two column with their names. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>j1</parametername>
</parameternamelist>
<parameterdescription>
<para>index 1 </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>j2</parametername>
</parameternamelist>
<parameterdescription>
<para>index 2 </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="exception"><parameteritem>
<parameternamelist>
<parametername>&lt;tt&gt;std::invalid_argument&lt;/tt&gt;</parametername>
</parameternamelist>
<parameterdescription>
<para>invalid index </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="includes/variables/table.hpp" line="541" column="6" bodyfile="includes/variables/table.hpp" bodystart="541" bodyend="550"/>
      </memberdef>
      <memberdef kind="function" id="classvar_1_1table_1ac1102a8aa522698a3db1b6ab75e754dd" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void var::table&lt; D &gt;::replace_col</definition>
        <argsstring>(int j, std::vector&lt; D &gt; a, std::string name=empty_name)</argsstring>
        <name>replace_col</name>
        <param>
          <type>int</type>
          <declname>j</declname>
        </param>
        <param>
          <type>std::vector&lt; D &gt;</type>
          <declname>a</declname>
        </param>
        <param>
          <type>std::string</type>
          <declname>name</declname>
          <defval><ref refid="classvar_1_1table_1a5220f83aec460bcdde68215bb08a7cd7" kindref="member">empty_name</ref></defval>
        </param>
        <briefdescription>
<para>Replaces given column index Doesn&apos;t set empty names (no exception) </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>j</parametername>
</parameternamelist>
<parameterdescription>
<para>column index </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>a</parametername>
</parameternamelist>
<parameterdescription>
<para>new column </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>name</parametername>
</parameternamelist>
<parameterdescription>
<para><computeroutput>default(&quot;n/a&quot;)</computeroutput> name of column </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="exception"><parameteritem>
<parameternamelist>
<parametername>&lt;tt&gt;std::invalid_argument&lt;/tt&gt;</parametername>
</parameternamelist>
<parameterdescription>
<para>invalid <computeroutput>j</computeroutput> index </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>&lt;tt&gt;std::invalid_argument&lt;/tt&gt;</parametername>
</parameternamelist>
<parameterdescription>
<para><computeroutput>a.size()</computeroutput> $\neq$ row size </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="includes/variables/table.hpp" line="561" column="6" bodyfile="includes/variables/table.hpp" bodystart="561" bodyend="575"/>
      </memberdef>
      <memberdef kind="function" id="classvar_1_1table_1af68d6a2034707b3de5b4a5373d924346" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void var::table&lt; D &gt;::join_col</definition>
        <argsstring>(table other)</argsstring>
        <name>join_col</name>
        <param>
          <type><ref refid="classvar_1_1table" kindref="compound">table</ref></type>
          <declname>other</declname>
        </param>
        <briefdescription>
<para>Combines the columns of another table. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>other</parametername>
</parameternamelist>
<parameterdescription>
<para><computeroutput>table</computeroutput> </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="exception"><parameteritem>
<parameternamelist>
<parametername>&lt;tt&gt;std::invalid_argument&lt;/tt&gt;</parametername>
</parameternamelist>
<parameterdescription>
<para><computeroutput>other</computeroutput> doesn&apos;t have same number of rows </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="includes/variables/table.hpp" line="583" column="6" bodyfile="includes/variables/table.hpp" bodystart="583" bodyend="591"/>
      </memberdef>
      <memberdef kind="function" id="classvar_1_1table_1a8a3caec35a441a3c961e046df741848e" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void var::table&lt; D &gt;::erase_col</definition>
        <argsstring>(int j)</argsstring>
        <name>erase_col</name>
        <param>
          <type>int</type>
          <declname>j</declname>
        </param>
        <briefdescription>
<para>Erases given index column. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>j</parametername>
</parameternamelist>
<parameterdescription>
<para>column index </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="exception"><parameteritem>
<parameternamelist>
<parametername>&lt;tt&gt;std::invalid_argument&lt;/tt&gt;</parametername>
</parameternamelist>
<parameterdescription>
<para>invalid index </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>&lt;tt&gt;std::runtime_error&lt;/tt&gt;</parametername>
</parameternamelist>
<parameterdescription>
<para>table is empty </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="includes/variables/table.hpp" line="600" column="6" bodyfile="includes/variables/table.hpp" bodystart="600" bodyend="615"/>
      </memberdef>
      <memberdef kind="function" id="classvar_1_1table_1afcb4f6a05981d8618b9d23c4819804f1" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void var::table&lt; D &gt;::pop_col</definition>
        <argsstring>()</argsstring>
        <name>pop_col</name>
        <briefdescription>
<para>Removes last column. </para>
        </briefdescription>
        <detaileddescription>
<sect2 id="classvar_1_1table_1autotoc_md9">
<title>Row setters</title>
<para><parameterlist kind="exception"><parameteritem>
<parameternamelist>
<parametername>&lt;tt&gt;std::runtime_error&lt;/tt&gt;</parametername>
</parameternamelist>
<parameterdescription>
<para>table is empty </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
</sect2>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="includes/variables/table.hpp" line="623" column="6" bodyfile="includes/variables/table.hpp" bodystart="623" bodyend="629"/>
      </memberdef>
      <memberdef kind="function" id="classvar_1_1table_1a60611dd76aa2d387bb2909ef3a948427" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void var::table&lt; D &gt;::set_row_names</definition>
        <argsstring>(std::vector&lt; std::string &gt; names)</argsstring>
        <name>set_row_names</name>
        <param>
          <type>std::vector&lt; std::string &gt;</type>
          <declname>names</declname>
        </param>
        <briefdescription>
<para>Set the row names Doesn&apos;t set empty names (no exception) </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>names</parametername>
</parameternamelist>
<parameterdescription>
<para>vector of row names </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="exception"><parameteritem>
<parameternamelist>
<parametername>&lt;tt&gt;std::invalid_argument&lt;/tt&gt;</parametername>
</parameternamelist>
<parameterdescription>
<para>if <computeroutput>names.size()</computeroutput> doesnt match row size </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="includes/variables/table.hpp" line="637" column="6" bodyfile="includes/variables/table.hpp" bodystart="637" bodyend="645"/>
      </memberdef>
      <memberdef kind="function" id="classvar_1_1table_1ac1d7113447069abdad85ca9986a5807c" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void var::table&lt; D &gt;::set_row_name</definition>
        <argsstring>(int i, std::string name)</argsstring>
        <name>set_row_name</name>
        <param>
          <type>int</type>
          <declname>i</declname>
        </param>
        <param>
          <type>std::string</type>
          <declname>name</declname>
        </param>
        <briefdescription>
<para>Set the row name Doesn&apos;t set empty names (no exception) </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>i</parametername>
</parameternamelist>
<parameterdescription>
<para>index of row </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>name</parametername>
</parameternamelist>
<parameterdescription>
<para>name of row </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="exception"><parameteritem>
<parameternamelist>
<parametername>&lt;tt&gt;std::invalid_argument&lt;/tt&gt;</parametername>
</parameternamelist>
<parameterdescription>
<para>invalid index <computeroutput>i</computeroutput> </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="includes/variables/table.hpp" line="654" column="6" bodyfile="includes/variables/table.hpp" bodystart="654" bodyend="662"/>
      </memberdef>
      <memberdef kind="function" id="classvar_1_1table_1a302c3709f9fcd1f4c30007784746e7c7" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void var::table&lt; D &gt;::insert_row</definition>
        <argsstring>(std::vector&lt; D &gt; a, int i, std::string name=empty_name)</argsstring>
        <name>insert_row</name>
        <param>
          <type>std::vector&lt; D &gt;</type>
          <declname>a</declname>
        </param>
        <param>
          <type>int</type>
          <declname>i</declname>
        </param>
        <param>
          <type>std::string</type>
          <declname>name</declname>
          <defval><ref refid="classvar_1_1table_1a5220f83aec460bcdde68215bb08a7cd7" kindref="member">empty_name</ref></defval>
        </param>
        <briefdescription>
<para>Inserts new row into given index Doesn&apos;t set empty names (no exception) </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>a</parametername>
</parameternamelist>
<parameterdescription>
<para>row to be inserted </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>i</parametername>
</parameternamelist>
<parameterdescription>
<para>row index to insert at </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>name</parametername>
</parameternamelist>
<parameterdescription>
<para><computeroutput>default(&quot;n/a&quot;)</computeroutput> name of the row </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="exception"><parameteritem>
<parameternamelist>
<parametername>&lt;tt&gt;std::invalid_argument&lt;/tt&gt;</parametername>
</parameternamelist>
<parameterdescription>
<para>invalid row index </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>&lt;tt&gt;std::invalid_argument&lt;/tt&gt;</parametername>
</parameternamelist>
<parameterdescription>
<para><computeroutput>a.size()</computeroutput> $\neq$ column size </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="includes/variables/table.hpp" line="673" column="6" bodyfile="includes/variables/table.hpp" bodystart="673" bodyend="700"/>
      </memberdef>
      <memberdef kind="function" id="classvar_1_1table_1a1bfa369256370bd65a92bdc7057ce6cd" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void var::table&lt; D &gt;::push_row</definition>
        <argsstring>(std::vector&lt; D &gt; a, std::string name=empty_name)</argsstring>
        <name>push_row</name>
        <param>
          <type>std::vector&lt; D &gt;</type>
          <declname>a</declname>
        </param>
        <param>
          <type>std::string</type>
          <declname>name</declname>
          <defval><ref refid="classvar_1_1table_1a5220f83aec460bcdde68215bb08a7cd7" kindref="member">empty_name</ref></defval>
        </param>
        <briefdescription>
<para>Pushes row at the end of the table Doesn&apos;t set empty names (no exception) </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>a</parametername>
</parameternamelist>
<parameterdescription>
<para>row to be inserted </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>name</parametername>
</parameternamelist>
<parameterdescription>
<para>name of the row </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="exception"><parameteritem>
<parameternamelist>
<parametername>&lt;tt&gt;std::invalid_argument&lt;/tt&gt;</parametername>
</parameternamelist>
<parameterdescription>
<para><computeroutput>a.size()</computeroutput> $\neq$ column size </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="includes/variables/table.hpp" line="709" column="6" bodyfile="includes/variables/table.hpp" bodystart="709" bodyend="715"/>
      </memberdef>
      <memberdef kind="function" id="classvar_1_1table_1a285b40395022a70cba2f4f7087122635" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void var::table&lt; D &gt;::swap_row</definition>
        <argsstring>(int i1, int i2)</argsstring>
        <name>swap_row</name>
        <param>
          <type>int</type>
          <declname>i1</declname>
        </param>
        <param>
          <type>int</type>
          <declname>i2</declname>
        </param>
        <briefdescription>
<para>Swaps two rows with theri names. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>i1</parametername>
</parameternamelist>
<parameterdescription>
<para>index 1 </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>i2</parametername>
</parameternamelist>
<parameterdescription>
<para>index 2 </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="exception"><parameteritem>
<parameternamelist>
<parametername>&lt;tt&gt;std::invalid_argument&lt;/tt&gt;</parametername>
</parameternamelist>
<parameterdescription>
<para>invalid index </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="includes/variables/table.hpp" line="724" column="6" bodyfile="includes/variables/table.hpp" bodystart="724" bodyend="733"/>
      </memberdef>
      <memberdef kind="function" id="classvar_1_1table_1a83b285e1829b5508d6473d8f3bacb476" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void var::table&lt; D &gt;::replace_row</definition>
        <argsstring>(int i, std::vector&lt; D &gt; a, std::string name=empty_name)</argsstring>
        <name>replace_row</name>
        <param>
          <type>int</type>
          <declname>i</declname>
        </param>
        <param>
          <type>std::vector&lt; D &gt;</type>
          <declname>a</declname>
        </param>
        <param>
          <type>std::string</type>
          <declname>name</declname>
          <defval><ref refid="classvar_1_1table_1a5220f83aec460bcdde68215bb08a7cd7" kindref="member">empty_name</ref></defval>
        </param>
        <briefdescription>
<para>Replaces given rowumn index Doesn&apos;t set empty names (no exception) </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>j</parametername>
</parameternamelist>
<parameterdescription>
<para>rowumn index </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>a</parametername>
</parameternamelist>
<parameterdescription>
<para>new rowumn </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>name</parametername>
</parameternamelist>
<parameterdescription>
<para><computeroutput>default(&quot;n/a&quot;)</computeroutput> name of row </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="exception"><parameteritem>
<parameternamelist>
<parametername>&lt;tt&gt;std::invalid_argument&lt;/tt&gt;</parametername>
</parameternamelist>
<parameterdescription>
<para>invalid <computeroutput>j</computeroutput> index </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>&lt;tt&gt;std::invalid_argument&lt;/tt&gt;</parametername>
</parameternamelist>
<parameterdescription>
<para><computeroutput>a.size()</computeroutput> $\neq$ row size </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="includes/variables/table.hpp" line="744" column="6" bodyfile="includes/variables/table.hpp" bodystart="744" bodyend="758"/>
      </memberdef>
      <memberdef kind="function" id="classvar_1_1table_1a94ccea0d8b28c2fc4d1aac4e10721c76" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void var::table&lt; D &gt;::join_row</definition>
        <argsstring>(table other)</argsstring>
        <name>join_row</name>
        <param>
          <type><ref refid="classvar_1_1table" kindref="compound">table</ref></type>
          <declname>other</declname>
        </param>
        <briefdescription>
<para>Combines the rows of another table. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>other</parametername>
</parameternamelist>
<parameterdescription>
<para><computeroutput>table</computeroutput> </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="exception"><parameteritem>
<parameternamelist>
<parametername>&lt;tt&gt;std::invalid_argument&lt;/tt&gt;</parametername>
</parameternamelist>
<parameterdescription>
<para>Size mismatch </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="includes/variables/table.hpp" line="767" column="6" bodyfile="includes/variables/table.hpp" bodystart="767" bodyend="775"/>
      </memberdef>
      <memberdef kind="function" id="classvar_1_1table_1af081b43e743d7b6b5e5d442b315e803a" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void var::table&lt; D &gt;::erase_row</definition>
        <argsstring>(int i)</argsstring>
        <name>erase_row</name>
        <param>
          <type>int</type>
          <declname>i</declname>
        </param>
        <briefdescription>
<para>Erases given index rowumn. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>i</parametername>
</parameternamelist>
<parameterdescription>
<para>rowumn index </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="includes/variables/table.hpp" line="782" column="6" bodyfile="includes/variables/table.hpp" bodystart="782" bodyend="794"/>
      </memberdef>
      <memberdef kind="function" id="classvar_1_1table_1ab2316e92be476f29c9ae23229825fcf4" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void var::table&lt; D &gt;::pop_row</definition>
        <argsstring>()</argsstring>
        <name>pop_row</name>
        <briefdescription>
<para>Removes last rowumn. </para>
        </briefdescription>
        <detaileddescription>
<sect2 id="classvar_1_1table_1autotoc_md10">
<title>Data manipualtors</title>
</sect2>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="includes/variables/table.hpp" line="802" column="6" bodyfile="includes/variables/table.hpp" bodystart="802" bodyend="805"/>
      </memberdef>
      <memberdef kind="function" id="classvar_1_1table_1ac0871cf7449ef0b81461454abb7adee2" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void var::table&lt; D &gt;::resize</definition>
        <argsstring>(int r, int c)</argsstring>
        <name>resize</name>
        <param>
          <type>int</type>
          <declname>r</declname>
        </param>
        <param>
          <type>int</type>
          <declname>c</declname>
        </param>
        <briefdescription>
<para>Resizes the table. </para>
        </briefdescription>
        <detaileddescription>
<para>!!! warning &quot;Warning&quot; <preformatted>
    This can impact performance as it calls std::vector::resize
</preformatted></para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>r</parametername>
</parameternamelist>
<parameterdescription>
<para>number of rows </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>c</parametername>
</parameternamelist>
<parameterdescription>
<para>number of colums </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="includes/variables/table.hpp" line="820" column="6" bodyfile="includes/variables/table.hpp" bodystart="820" bodyend="829"/>
      </memberdef>
      <memberdef kind="function" id="classvar_1_1table_1ac3dcb2a30d1bb80ce48c8c11cf140c47" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void var::table&lt; D &gt;::turn_to</definition>
        <argsstring>(D n)</argsstring>
        <name>turn_to</name>
        <param>
          <type>D</type>
          <declname>n</declname>
        </param>
        <briefdescription>
<para>Converts all elements to n. </para>
        </briefdescription>
        <detaileddescription>
<para><bold>Usage</bold>: <programlisting filename=".cpp"><codeline><highlight class="normal">t.turn_to(1);<sp/></highlight><highlight class="comment">//<sp/>turns<sp/>all<sp/>elements<sp/>to<sp/>1</highlight></codeline>
</programlisting></para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>n</parametername>
</parameternamelist>
<parameterdescription>
<para>the specifeid variable </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="includes/variables/table.hpp" line="842" column="6" bodyfile="includes/variables/table.hpp" bodystart="842" bodyend="849"/>
      </memberdef>
      <memberdef kind="function" id="classvar_1_1table_1a0af6bda64ae23e5b1182fff548491ff8" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>D</type>
        <definition>D var::table&lt; D &gt;::sum</definition>
        <argsstring>()</argsstring>
        <name>sum</name>
        <briefdescription>
<para>Sum of all elements. </para>
        </briefdescription>
        <detaileddescription>
<para><bold>Usage</bold>: <programlisting filename=".cpp"><codeline><highlight class="keyword">auto</highlight><highlight class="normal"><sp/><ref refid="classvar_1_1table_1a0af6bda64ae23e5b1182fff548491ff8" kindref="member">sum</ref><sp/>=<sp/>m.sum();</highlight></codeline>
</programlisting></para>
<para><simplesect kind="return"><para><computeroutput>D</computeroutput> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="includes/variables/table.hpp" line="861" column="3" bodyfile="includes/variables/table.hpp" bodystart="861" bodyend="870"/>
      </memberdef>
      <memberdef kind="function" id="classvar_1_1table_1a61c85d1041b41f303c0d9ecbd4f6e260" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool var::table&lt; D &gt;::read_csv</definition>
        <argsstring>(std::string fname, bool headers_exist=true)</argsstring>
        <name>read_csv</name>
        <param>
          <type>std::string</type>
          <declname>fname</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>headers_exist</declname>
          <defval>true</defval>
        </param>
        <briefdescription>
<para>Reads from csv file. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>fname</parametername>
</parameternamelist>
<parameterdescription>
<para>file name </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>headers_exist</parametername>
</parameternamelist>
<parameterdescription>
<para><computeroutput>default(true)</computeroutput> flag indicating if column names exist in file </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para><computeroutput>true</computeroutput> : if read is success </para>
</simplesect>
<simplesect kind="return"><para><computeroutput>false</computeroutput>: if read did not complete </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="includes/variables/table.hpp" line="887" column="6" bodyfile="includes/variables/table.hpp" bodystart="887" bodyend="935"/>
      </memberdef>
      <memberdef kind="function" id="classvar_1_1table_1aa287b9c7b64b4d5d8bd03e9a6a65a044" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool var::table&lt; D &gt;::save_csv</definition>
        <argsstring>(std::string filename)</argsstring>
        <name>save_csv</name>
        <param>
          <type>std::string</type>
          <declname>filename</declname>
        </param>
        <briefdescription>
<para>Reads from csv file. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>file</parametername>
</parameternamelist>
<parameterdescription>
<para></para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>true: if read is success </para>
</simplesect>
<simplesect kind="return"><para>false: if read did not complete </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="includes/variables/table.hpp" line="944" column="6" bodyfile="includes/variables/table.hpp" bodystart="944" bodyend="971"/>
      </memberdef>
      <memberdef kind="function" id="classvar_1_1table_1a462865ba0a86a2e26cce1ab85b60cbbf" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void var::table&lt; D &gt;::show</definition>
        <argsstring>(int r)</argsstring>
        <name>show</name>
        <param>
          <type>int</type>
          <declname>r</declname>
        </param>
        <briefdescription>
<para>Shows a certain number of rows in table. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>r</parametername>
</parameternamelist>
<parameterdescription>
<para></para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="includes/variables/table.hpp" line="978" column="6" bodyfile="includes/variables/table.hpp" bodystart="978" bodyend="1036"/>
      </memberdef>
      <memberdef kind="function" id="classvar_1_1table_1ad471ed11d98bd02b5935cc71ba911bae" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void var::table&lt; D &gt;::show</definition>
        <argsstring>()</argsstring>
        <name>show</name>
        <briefdescription>
<para>shows all of the table </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="includes/variables/table.hpp" line="1042" column="6" bodyfile="includes/variables/table.hpp" bodystart="1042" bodyend="1045"/>
      </memberdef>
      <memberdef kind="function" id="classvar_1_1table_1a5e7459882c4bd4bc29759f5fb3c1ee10" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void var::table&lt; D &gt;::show_header</definition>
        <argsstring>()</argsstring>
        <name>show_header</name>
        <briefdescription>
<para>Shows col_names only. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="includes/variables/table.hpp" line="1051" column="6" bodyfile="includes/variables/table.hpp" bodystart="1051" bodyend="1054"/>
      </memberdef>
      <memberdef kind="function" id="classvar_1_1table_1a4c6b4d98de8c0e527ac5f55ce455270b" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>std::vector&lt; D &gt;</type>
        <definition>std::vector&lt;D&gt; var::table&lt; D &gt;::get_avgs</definition>
        <argsstring>()</argsstring>
        <name>get_avgs</name>
        <briefdescription>
<para>Extract average of each column into a vector. </para>
        </briefdescription>
        <detaileddescription>
<para>Used in <computeroutput>describe_all()</computeroutput></para>
<para><simplesect kind="return"><para><computeroutput>std::vector&lt;D&gt;</computeroutput>: same size as number of columns </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="includes/variables/table.hpp" line="1065" column="13" bodyfile="includes/variables/table.hpp" bodystart="1065" bodyend="1072"/>
      </memberdef>
      <memberdef kind="function" id="classvar_1_1table_1a2c2a9860253cc9e72b822d35c777e749" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>std::vector&lt; D &gt;</type>
        <definition>std::vector&lt;D&gt; var::table&lt; D &gt;::get_stds</definition>
        <argsstring>()</argsstring>
        <name>get_stds</name>
        <briefdescription>
<para>Extract STD of each column into a vector. </para>
        </briefdescription>
        <detaileddescription>
<para>Used in <computeroutput>describe_all()</computeroutput></para>
<para><simplesect kind="return"><para><computeroutput>std::vector&lt;D&gt;</computeroutput> same size as number of columns </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="includes/variables/table.hpp" line="1081" column="13" bodyfile="includes/variables/table.hpp" bodystart="1081" bodyend="1088"/>
      </memberdef>
      <memberdef kind="function" id="classvar_1_1table_1a196ea90112f0e84e30ea8fa6e7b1cb98" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>std::vector&lt; D &gt;</type>
        <definition>std::vector&lt;D&gt; var::table&lt; D &gt;::get_vars</definition>
        <argsstring>()</argsstring>
        <name>get_vars</name>
        <briefdescription>
<para>Extract variance of each column into a vector. </para>
        </briefdescription>
        <detaileddescription>
<para>Used in <computeroutput>describe_all()</computeroutput></para>
<para><simplesect kind="return"><para><computeroutput>std::vector&lt;D&gt;</computeroutput>: same size as numebr of columns </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="includes/variables/table.hpp" line="1097" column="13" bodyfile="includes/variables/table.hpp" bodystart="1097" bodyend="1104"/>
      </memberdef>
      <memberdef kind="function" id="classvar_1_1table_1acde3b5b518d75c28078e60b2acfe9e1f" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>std::vector&lt; <ref refid="structvar_1_1QR" kindref="compound">QR</ref>&lt; D &gt; &gt;</type>
        <definition>std::vector&lt;QR&lt;D&gt; &gt; var::table&lt; D &gt;::get_qrs</definition>
        <argsstring>()</argsstring>
        <name>get_qrs</name>
        <briefdescription>
<para>Extract QR of each column into a vector. </para>
        </briefdescription>
        <detaileddescription>
<para>Used in <computeroutput>describe_all()</computeroutput></para>
<para><simplesect kind="return"><para><computeroutput>std::vector&lt;QR&gt;</computeroutput>: same size as number of colums </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="includes/variables/table.hpp" line="1113" column="13" bodyfile="includes/variables/table.hpp" bodystart="1113" bodyend="1120"/>
      </memberdef>
      <memberdef kind="function" id="classvar_1_1table_1a85c69677672bfc6a61b0499e868c7465" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>std::vector&lt; D &gt;</type>
        <definition>std::vector&lt;D&gt; var::table&lt; D &gt;::get_sums</definition>
        <argsstring>()</argsstring>
        <name>get_sums</name>
        <briefdescription>
<para>Extract sum of each column into a vector. </para>
        </briefdescription>
        <detaileddescription>
<para>Used in <computeroutput>describe_all()</computeroutput></para>
<para><simplesect kind="return"><para><computeroutput>std::vector&lt;D&gt;</computeroutput> size is same size as number of colums </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="includes/variables/table.hpp" line="1130" column="13" bodyfile="includes/variables/table.hpp" bodystart="1130" bodyend="1137"/>
      </memberdef>
      <memberdef kind="function" id="classvar_1_1table_1afa3958110fe2532e0e8f47c9281b9a90" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classvar_1_1table" kindref="compound">table</ref></type>
        <definition>table var::table&lt; D &gt;::describe_all</definition>
        <argsstring>()</argsstring>
        <name>describe_all</name>
        <briefdescription>
<para>Statistical summary of all colums in table. </para>
        </briefdescription>
        <detaileddescription>
<para><itemizedlist>
<listitem><para>Example:</para>
</listitem></itemizedlist>
</para>
<para><table rows="3" cols="11"><row>
<entry thead="yes"><para></para>
</entry><entry thead="yes"><para>Avg   </para>
</entry><entry thead="yes"><para>STD   </para>
</entry><entry thead="yes"><para>VAR   </para>
</entry><entry thead="yes"><para>Min   </para>
</entry><entry thead="yes"><para>Q1   </para>
</entry><entry thead="yes"><para>Q2   </para>
</entry><entry thead="yes"><para>Q3   </para>
</entry><entry thead="yes"><para>Max   </para>
</entry><entry thead="yes"><para>IQR   </para>
</entry><entry thead="yes"><para>Sum    </para>
</entry></row>
<row>
<entry thead="no"><para>col-0   </para>
</entry><entry thead="no"><para>..   </para>
</entry><entry thead="no"><para>..   </para>
</entry><entry thead="no"><para>..   </para>
</entry><entry thead="no"><para>..   </para>
</entry><entry thead="no"><para>..   </para>
</entry><entry thead="no"><para>..   </para>
</entry><entry thead="no"><para>..   </para>
</entry><entry thead="no"><para>..   </para>
</entry><entry thead="no"><para>..   </para>
</entry><entry thead="no"><para>..    </para>
</entry></row>
<row>
<entry thead="no"><para>col-1   </para>
</entry><entry thead="no"><para>..   </para>
</entry><entry thead="no"><para>..   </para>
</entry><entry thead="no"><para>..   </para>
</entry><entry thead="no"><para>..   </para>
</entry><entry thead="no"><para>..   </para>
</entry><entry thead="no"><para>..   </para>
</entry><entry thead="no"><para>..   </para>
</entry><entry thead="no"><para>..   </para>
</entry><entry thead="no"><para>..   </para>
</entry><entry thead="no"><para>..   </para>
</entry></row>
</table>
</para>
<para><simplesect kind="return"><para><computeroutput>table&lt;D&gt;</computeroutput> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="includes/variables/table.hpp" line="1151" column="7" bodyfile="includes/variables/table.hpp" bodystart="1151" bodyend="1189"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
<para>2D array class </para>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <collaborationgraph>
      <node id="3">
        <label>std::basic_string&lt; Char &gt;</label>
      </node>
      <node id="2">
        <label>std::string</label>
        <childnode refid="3" relation="public-inheritance">
        </childnode>
      </node>
      <node id="1">
        <label>var::table&lt; D &gt;</label>
        <link refid="classvar_1_1table"/>
        <childnode refid="2" relation="usage">
          <edgelabel>#empty_name</edgelabel>
        </childnode>
      </node>
    </collaborationgraph>
    <location file="includes/variables/table.hpp" line="32" column="1" bodyfile="includes/variables/table.hpp" bodystart="33" bodyend="1190"/>
    <listofallmembers>
      <member refid="classvar_1_1table_1ad9a35db73dbd794283bf9b986c133ca3" prot="protected" virt="non-virtual"><scope>var::table</scope><name>_col</name></member>
      <member refid="classvar_1_1table_1a3d195e6796cfbc441b8e240b651d695b" prot="protected" virt="non-virtual"><scope>var::table</scope><name>_row</name></member>
      <member refid="classvar_1_1table_1a03c80af84df447196e80c74952211c2f" prot="public" virt="non-virtual"><scope>var::table</scope><name>at</name></member>
      <member refid="classvar_1_1table_1a215cdf3b672a7231d895f4e6c4214b64" prot="protected" virt="non-virtual"><scope>var::table</scope><name>center</name></member>
      <member refid="classvar_1_1table_1a42caed33499ca87d392e45e53fb6bc89" prot="protected" virt="non-virtual"><scope>var::table</scope><name>check_col_name</name></member>
      <member refid="classvar_1_1table_1ac3e95893eeb5711dbdcd402a6b06dea3" prot="protected" virt="non-virtual"><scope>var::table</scope><name>check_row_name</name></member>
      <member refid="classvar_1_1table_1a70b568d560efd34b1a67aee49135b8a6" prot="public" virt="non-virtual"><scope>var::table</scope><name>col</name></member>
      <member refid="classvar_1_1table_1a4c5403a105d653588858bf31a6a6224d" prot="protected" virt="non-virtual"><scope>var::table</scope><name>col_names</name></member>
      <member refid="classvar_1_1table_1a35741492731785ddcf09bcb83a87d2d3" prot="protected" virt="non-virtual"><scope>var::table</scope><name>data</name></member>
      <member refid="classvar_1_1table_1afa3958110fe2532e0e8f47c9281b9a90" prot="public" virt="non-virtual"><scope>var::table</scope><name>describe_all</name></member>
      <member refid="classvar_1_1table_1a5220f83aec460bcdde68215bb08a7cd7" prot="protected" virt="non-virtual"><scope>var::table</scope><name>empty_name</name></member>
      <member refid="classvar_1_1table_1a8a3caec35a441a3c961e046df741848e" prot="public" virt="non-virtual"><scope>var::table</scope><name>erase_col</name></member>
      <member refid="classvar_1_1table_1af081b43e743d7b6b5e5d442b315e803a" prot="public" virt="non-virtual"><scope>var::table</scope><name>erase_row</name></member>
      <member refid="classvar_1_1table_1a75cd6fd5f807343b311152f5118bb085" prot="protected" virt="non-virtual"><scope>var::table</scope><name>generate_cols</name></member>
      <member refid="classvar_1_1table_1a4ad03a888518a0919abcef08d9b307ea" prot="protected" virt="non-virtual"><scope>var::table</scope><name>generate_line</name></member>
      <member refid="classvar_1_1table_1a2032fb3518fc73b1af05770202d61e8c" prot="protected" virt="non-virtual"><scope>var::table</scope><name>generate_rows</name></member>
      <member refid="classvar_1_1table_1a4c6b4d98de8c0e527ac5f55ce455270b" prot="public" virt="non-virtual"><scope>var::table</scope><name>get_avgs</name></member>
      <member refid="classvar_1_1table_1a1f769b9eae28d7c8fed43acd4fca1bd4" prot="public" virt="non-virtual"><scope>var::table</scope><name>get_col</name></member>
      <member refid="classvar_1_1table_1a894dfeda7b8fed0898b5395c6d9f1fa5" prot="public" virt="non-virtual"><scope>var::table</scope><name>get_col</name></member>
      <member refid="classvar_1_1table_1a0bb55e3d7e124c19b2ef1e9298c71cf8" prot="public" virt="non-virtual"><scope>var::table</scope><name>get_col_names</name></member>
      <member refid="classvar_1_1table_1ab394c03c2c51586641f2a41a2e3a1759" prot="public" virt="non-virtual"><scope>var::table</scope><name>get_col_table</name></member>
      <member refid="classvar_1_1table_1a28b6553353daf2c3e34a5786f90dd25c" prot="public" virt="non-virtual"><scope>var::table</scope><name>get_col_table</name></member>
      <member refid="classvar_1_1table_1ab07ae6c9f4caef7a61a1fbc98ca638fd" prot="protected" virt="non-virtual"><scope>var::table</scope><name>get_index</name></member>
      <member refid="classvar_1_1table_1acde3b5b518d75c28078e60b2acfe9e1f" prot="public" virt="non-virtual"><scope>var::table</scope><name>get_qrs</name></member>
      <member refid="classvar_1_1table_1aee7e0ae316423385adcf7f6d325db712" prot="public" virt="non-virtual"><scope>var::table</scope><name>get_row</name></member>
      <member refid="classvar_1_1table_1af06d391ee69ef70848c9620621dee65d" prot="public" virt="non-virtual"><scope>var::table</scope><name>get_row</name></member>
      <member refid="classvar_1_1table_1ae879752be3975566d379d416aef96775" prot="public" virt="non-virtual"><scope>var::table</scope><name>get_row_names</name></member>
      <member refid="classvar_1_1table_1a42805f86e64469221e5d789b8373a34c" prot="public" virt="non-virtual"><scope>var::table</scope><name>get_row_table</name></member>
      <member refid="classvar_1_1table_1a8d7d4f9bf7d3ef4dac586449436018fc" prot="public" virt="non-virtual"><scope>var::table</scope><name>get_row_table</name></member>
      <member refid="classvar_1_1table_1a2c2a9860253cc9e72b822d35c777e749" prot="public" virt="non-virtual"><scope>var::table</scope><name>get_stds</name></member>
      <member refid="classvar_1_1table_1a85c69677672bfc6a61b0499e868c7465" prot="public" virt="non-virtual"><scope>var::table</scope><name>get_sums</name></member>
      <member refid="classvar_1_1table_1a196ea90112f0e84e30ea8fa6e7b1cb98" prot="public" virt="non-virtual"><scope>var::table</scope><name>get_vars</name></member>
      <member refid="classvar_1_1table_1aba93eaa51558c8d2fea4c3d457b31935" prot="public" virt="non-virtual"><scope>var::table</scope><name>insert_col</name></member>
      <member refid="classvar_1_1table_1a302c3709f9fcd1f4c30007784746e7c7" prot="public" virt="non-virtual"><scope>var::table</scope><name>insert_row</name></member>
      <member refid="classvar_1_1table_1af68d6a2034707b3de5b4a5373d924346" prot="public" virt="non-virtual"><scope>var::table</scope><name>join_col</name></member>
      <member refid="classvar_1_1table_1a94ccea0d8b28c2fc4d1aac4e10721c76" prot="public" virt="non-virtual"><scope>var::table</scope><name>join_row</name></member>
      <member refid="classvar_1_1table_1afcb4f6a05981d8618b9d23c4819804f1" prot="public" virt="non-virtual"><scope>var::table</scope><name>pop_col</name></member>
      <member refid="classvar_1_1table_1ab2316e92be476f29c9ae23229825fcf4" prot="public" virt="non-virtual"><scope>var::table</scope><name>pop_row</name></member>
      <member refid="classvar_1_1table_1a0b08c797c3314998239636e4840ff74e" prot="protected" virt="non-virtual"><scope>var::table</scope><name>prd</name></member>
      <member refid="classvar_1_1table_1ae783c7e8063d4999c621f28a44dd215c" prot="protected" virt="non-virtual"><scope>var::table</scope><name>prd</name></member>
      <member refid="classvar_1_1table_1a90ba82fb775f945bd18c3897e0992c0d" prot="public" virt="non-virtual"><scope>var::table</scope><name>push_col</name></member>
      <member refid="classvar_1_1table_1a1bfa369256370bd65a92bdc7057ce6cd" prot="public" virt="non-virtual"><scope>var::table</scope><name>push_row</name></member>
      <member refid="classvar_1_1table_1a61c85d1041b41f303c0d9ecbd4f6e260" prot="public" virt="non-virtual"><scope>var::table</scope><name>read_csv</name></member>
      <member refid="classvar_1_1table_1ac1102a8aa522698a3db1b6ab75e754dd" prot="public" virt="non-virtual"><scope>var::table</scope><name>replace_col</name></member>
      <member refid="classvar_1_1table_1a83b285e1829b5508d6473d8f3bacb476" prot="public" virt="non-virtual"><scope>var::table</scope><name>replace_row</name></member>
      <member refid="classvar_1_1table_1ac0871cf7449ef0b81461454abb7adee2" prot="public" virt="non-virtual"><scope>var::table</scope><name>resize</name></member>
      <member refid="classvar_1_1table_1a7dbdb10f2db71872774179122ba9520b" prot="public" virt="non-virtual"><scope>var::table</scope><name>row</name></member>
      <member refid="classvar_1_1table_1abaccb2b99ccdc47306134797f28c4a95" prot="protected" virt="non-virtual"><scope>var::table</scope><name>row_names</name></member>
      <member refid="classvar_1_1table_1aa287b9c7b64b4d5d8bd03e9a6a65a044" prot="public" virt="non-virtual"><scope>var::table</scope><name>save_csv</name></member>
      <member refid="classvar_1_1table_1aea28b09580171d064d30c57f2039252a" prot="public" virt="non-virtual"><scope>var::table</scope><name>set_col_name</name></member>
      <member refid="classvar_1_1table_1a86899556462d8e8fc6499432157e4352" prot="public" virt="non-virtual"><scope>var::table</scope><name>set_col_names</name></member>
      <member refid="classvar_1_1table_1ac1d7113447069abdad85ca9986a5807c" prot="public" virt="non-virtual"><scope>var::table</scope><name>set_row_name</name></member>
      <member refid="classvar_1_1table_1a60611dd76aa2d387bb2909ef3a948427" prot="public" virt="non-virtual"><scope>var::table</scope><name>set_row_names</name></member>
      <member refid="classvar_1_1table_1a462865ba0a86a2e26cce1ab85b60cbbf" prot="public" virt="non-virtual"><scope>var::table</scope><name>show</name></member>
      <member refid="classvar_1_1table_1ad471ed11d98bd02b5935cc71ba911bae" prot="public" virt="non-virtual"><scope>var::table</scope><name>show</name></member>
      <member refid="classvar_1_1table_1a5e7459882c4bd4bc29759f5fb3c1ee10" prot="public" virt="non-virtual"><scope>var::table</scope><name>show_header</name></member>
      <member refid="classvar_1_1table_1ac80c2b7b248e832d49280e71a9b34081" prot="public" virt="non-virtual"><scope>var::table</scope><name>size</name></member>
      <member refid="classvar_1_1table_1a0af6bda64ae23e5b1182fff548491ff8" prot="public" virt="non-virtual"><scope>var::table</scope><name>sum</name></member>
      <member refid="classvar_1_1table_1a183820c43f0aaa542c1ac9db22be5eec" prot="public" virt="non-virtual"><scope>var::table</scope><name>swap_col</name></member>
      <member refid="classvar_1_1table_1a285b40395022a70cba2f4f7087122635" prot="public" virt="non-virtual"><scope>var::table</scope><name>swap_row</name></member>
      <member refid="classvar_1_1table_1ae067e021bec7ba45f14e0a6c45c6116d" prot="protected" virt="non-virtual"><scope>var::table</scope><name>sz</name></member>
      <member refid="classvar_1_1table_1ada6ebdf0a90915bedfa07fc57b31a504" prot="public" virt="non-virtual"><scope>var::table</scope><name>table</name></member>
      <member refid="classvar_1_1table_1af13ef05abffb251c15846e8f881867db" prot="public" virt="non-virtual"><scope>var::table</scope><name>table</name></member>
      <member refid="classvar_1_1table_1aa41d04fa2ccba5635d9b3308eea7fcc1" prot="public" virt="non-virtual"><scope>var::table</scope><name>table</name></member>
      <member refid="classvar_1_1table_1ac3dcb2a30d1bb80ce48c8c11cf140c47" prot="public" virt="non-virtual"><scope>var::table</scope><name>turn_to</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
