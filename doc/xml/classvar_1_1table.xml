<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.9.2" xml:lang="en-US">
  <compounddef id="classvar_1_1table" kind="class" language="C++" prot="public">
    <compoundname>var::table</compoundname>
    <includes local="yes">table.hpp</includes>
    <templateparamlist>
      <param>
        <type>typename D</type>
      </param>
    </templateparamlist>
      <sectiondef kind="protected-attrib">
      <memberdef kind="variable" id="classvar_1_1table_1a35741492731785ddcf09bcb83a87d2d3" prot="protected" static="no" mutable="no">
        <type>std::vector&lt; D &gt;</type>
        <definition>std::vector&lt;D&gt; var::table&lt; D &gt;::data</definition>
        <argsstring></argsstring>
        <name>data</name>
        <briefdescription>
<para>the data container </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="includes/variables/table.hpp" line="28" column="13" bodyfile="includes/variables/table.hpp" bodystart="28" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classvar_1_1table_1a55535e54d90e2ddf7fbc98532e3dbaa3" prot="protected" static="no" mutable="no">
        <type>std::vector&lt; std::string &gt;</type>
        <definition>std::vector&lt;std::string&gt; var::table&lt; D &gt;::col_names</definition>
        <argsstring></argsstring>
        <name>col_names</name>
        <briefdescription>
<para>Stores the column names. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="includes/variables/table.hpp" line="29" column="13" bodyfile="includes/variables/table.hpp" bodystart="29" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classvar_1_1table_1ad69844095e9fd79ebdca86f22fa42ff5" prot="protected" static="no" mutable="no">
        <type>std::vector&lt; std::string &gt;</type>
        <definition>std::vector&lt;std::string&gt; var::table&lt; D &gt;::row_names</definition>
        <argsstring></argsstring>
        <name>row_names</name>
        <briefdescription>
<para>Stores the row names. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="includes/variables/table.hpp" line="30" column="13" bodyfile="includes/variables/table.hpp" bodystart="30" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classvar_1_1table_1a3d195e6796cfbc441b8e240b651d695b" prot="protected" static="no" mutable="no">
        <type>int</type>
        <definition>int var::table&lt; D &gt;::_row</definition>
        <argsstring></argsstring>
        <name>_row</name>
        <briefdescription>
<para>Row size. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="includes/variables/table.hpp" line="31" column="5" bodyfile="includes/variables/table.hpp" bodystart="31" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classvar_1_1table_1ad9a35db73dbd794283bf9b986c133ca3" prot="protected" static="no" mutable="no">
        <type>int</type>
        <definition>int var::table&lt; D &gt;::_col</definition>
        <argsstring></argsstring>
        <name>_col</name>
        <briefdescription>
<para>Colum size. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="includes/variables/table.hpp" line="32" column="5" bodyfile="includes/variables/table.hpp" bodystart="32" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classvar_1_1table_1ae067e021bec7ba45f14e0a6c45c6116d" prot="protected" static="no" mutable="no">
        <type>int</type>
        <definition>int var::table&lt; D &gt;::sz</definition>
        <argsstring></argsstring>
        <name>sz</name>
        <initializer>= 10</initializer>
        <briefdescription>
<para>Spacing size for print. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="includes/variables/table.hpp" line="33" column="5" bodyfile="includes/variables/table.hpp" bodystart="33" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="protected-func">
      <memberdef kind="function" id="classvar_1_1table_1ab07ae6c9f4caef7a61a1fbc98ca638fd" prot="protected" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>int</type>
        <definition>int var::table&lt; D &gt;::get_index</definition>
        <argsstring>(int i, int j)</argsstring>
        <name>get_index</name>
        <param>
          <type>int</type>
          <declname>i</declname>
        </param>
        <param>
          <type>int</type>
          <declname>j</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="includes/variables/table.hpp" line="35" column="5" bodyfile="includes/variables/table.hpp" bodystart="35" bodyend="38"/>
      </memberdef>
      <memberdef kind="function" id="classvar_1_1table_1a42caed33499ca87d392e45e53fb6bc89" prot="protected" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>int</type>
        <definition>int var::table&lt; D &gt;::check_col_name</definition>
        <argsstring>(std::string name)</argsstring>
        <name>check_col_name</name>
        <param>
          <type>std::string</type>
          <declname>name</declname>
        </param>
        <briefdescription>
<para>Returns column index of given column name. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>name</parametername>
</parameternamelist>
<parameterdescription>
<para>string of column name </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para><computeroutput>int</computeroutput> $[-1]$: index not found <linebreak/>
 </para>
</simplesect>
<simplesect kind="return"><para><computeroutput>int</computeroutput> $[\geq 0]$: index found </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="includes/variables/table.hpp" line="47" column="5" bodyfile="includes/variables/table.hpp" bodystart="47" bodyend="55"/>
      </memberdef>
      <memberdef kind="function" id="classvar_1_1table_1ac3e95893eeb5711dbdcd402a6b06dea3" prot="protected" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>int</type>
        <definition>int var::table&lt; D &gt;::check_row_name</definition>
        <argsstring>(std::string name)</argsstring>
        <name>check_row_name</name>
        <param>
          <type>std::string</type>
          <declname>name</declname>
        </param>
        <briefdescription>
<para>Returns row index of given row name. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>name</parametername>
</parameternamelist>
<parameterdescription>
<para>string of row name </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para><computeroutput>int</computeroutput> $[-1]$: index not found <linebreak/>
 </para>
</simplesect>
<simplesect kind="return"><para><computeroutput>int</computeroutput> $[\geq 0]$: index found </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="includes/variables/table.hpp" line="64" column="5" bodyfile="includes/variables/table.hpp" bodystart="64" bodyend="72"/>
      </memberdef>
      <memberdef kind="function" id="classvar_1_1table_1a4ad03a888518a0919abcef08d9b307ea" prot="protected" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>std::string</type>
        <definition>std::string var::table&lt; D &gt;::generate_line</definition>
        <argsstring>(int l)</argsstring>
        <name>generate_line</name>
        <param>
          <type>int</type>
          <declname>l</declname>
        </param>
        <briefdescription>
<para>Generates line to seperate rows. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>l</parametername>
</parameternamelist>
<parameterdescription>
<para>number of &quot;â€•&quot; in the generated string </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para><computeroutput>std::string</computeroutput> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="includes/variables/table.hpp" line="139" column="13" bodyfile="includes/variables/table.hpp" bodystart="139" bodyend="146"/>
      </memberdef>
      <memberdef kind="function" id="classvar_1_1table_1a2032fb3518fc73b1af05770202d61e8c" prot="protected" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void var::table&lt; D &gt;::generate_rows</definition>
        <argsstring>()</argsstring>
        <name>generate_rows</name>
        <briefdescription>
<para>Clears current row names and generates new ones. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="includes/variables/table.hpp" line="152" column="6" bodyfile="includes/variables/table.hpp" bodystart="152" bodyend="160"/>
      </memberdef>
      <memberdef kind="function" id="classvar_1_1table_1a75cd6fd5f807343b311152f5118bb085" prot="protected" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void var::table&lt; D &gt;::generate_cols</definition>
        <argsstring>()</argsstring>
        <name>generate_cols</name>
        <briefdescription>
<para>Clears current column names and generates new ones. </para>
        </briefdescription>
        <detaileddescription>
<sect2 id="classvar_1_1table_1autotoc_md4">
<title>Constructors</title>
</sect2>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="includes/variables/table.hpp" line="167" column="6" bodyfile="includes/variables/table.hpp" bodystart="167" bodyend="175"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="protected-static-func">
      <memberdef kind="function" id="classvar_1_1table_1a215cdf3b672a7231d895f4e6c4214b64" prot="protected" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>std::string</type>
        <definition>static std::string var::table&lt; D &gt;::center</definition>
        <argsstring>(const std::string s, const int w)</argsstring>
        <name>center</name>
        <param>
          <type>const std::string</type>
          <declname>s</declname>
        </param>
        <param>
          <type>const int</type>
          <declname>w</declname>
        </param>
        <briefdescription>
<para>Re-centers a string based on given width. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>s</parametername>
</parameternamelist>
<parameterdescription>
<para>string given </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>w</parametername>
</parameternamelist>
<parameterdescription>
<para>width to center the string to </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para><computeroutput>std::string</computeroutput> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="includes/variables/table.hpp" line="81" column="20" bodyfile="includes/variables/table.hpp" bodystart="81" bodyend="94"/>
      </memberdef>
      <memberdef kind="function" id="classvar_1_1table_1a0b08c797c3314998239636e4840ff74e" prot="protected" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>std::string</type>
        <definition>static std::string var::table&lt; D &gt;::prd</definition>
        <argsstring>(D x, int width)</argsstring>
        <name>prd</name>
        <param>
          <type>D</type>
          <declname>x</declname>
        </param>
        <param>
          <type>int</type>
          <declname>width</declname>
        </param>
        <briefdescription>
<para>Fills the string with given width with empty space. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>x</parametername>
</parameternamelist>
<parameterdescription>
<para>string given </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>width</parametername>
</parameternamelist>
<parameterdescription>
<para>width to center the string to </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para><computeroutput>std::string</computeroutput> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="includes/variables/table.hpp" line="103" column="20" bodyfile="includes/variables/table.hpp" bodystart="103" bodyend="112"/>
      </memberdef>
      <memberdef kind="function" id="classvar_1_1table_1ae783c7e8063d4999c621f28a44dd215c" prot="protected" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>std::string</type>
        <definition>static std::string var::table&lt; D &gt;::prd</definition>
        <argsstring>(std::string x, int width)</argsstring>
        <name>prd</name>
        <param>
          <type>std::string</type>
          <declname>x</declname>
        </param>
        <param>
          <type>int</type>
          <declname>width</declname>
        </param>
        <briefdescription>
<para>Gives spacing to a string. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="see"><para>Similar to <ref refid="classvar_1_1table_1a0b08c797c3314998239636e4840ff74e" kindref="member">var::table::prd(D, int)</ref></para>
</simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>x</parametername>
</parameternamelist>
<parameterdescription>
<para>string given </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>width</parametername>
</parameternamelist>
<parameterdescription>
<para>width to center the string to </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para><computeroutput>std::string</computeroutput> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="includes/variables/table.hpp" line="123" column="20" bodyfile="includes/variables/table.hpp" bodystart="123" bodyend="131"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-func">
      <memberdef kind="function" id="classvar_1_1table_1ada6ebdf0a90915bedfa07fc57b31a504" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type></type>
        <definition>var::table&lt; D &gt;::table</definition>
        <argsstring>()</argsstring>
        <name>table</name>
        <briefdescription>
<para>Construct a new table object. </para>
        </briefdescription>
        <detaileddescription>
<para><itemizedlist>
<listitem><para>Usage: <programlisting filename=".cpp"><codeline><highlight class="normal"><ref refid="classvar_1_1table" kindref="compound">var::table&lt;int&gt;</ref><sp/>t;</highlight></codeline>
</programlisting> </para>
</listitem></itemizedlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="includes/variables/table.hpp" line="186" column="1" bodyfile="includes/variables/table.hpp" bodystart="186" bodyend="188"/>
      </memberdef>
      <memberdef kind="function" id="classvar_1_1table_1af13ef05abffb251c15846e8f881867db" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type></type>
        <definition>var::table&lt; D &gt;::table</definition>
        <argsstring>(int r, int c)</argsstring>
        <name>table</name>
        <param>
          <type>int</type>
          <declname>r</declname>
        </param>
        <param>
          <type>int</type>
          <declname>c</declname>
        </param>
        <briefdescription>
<para>Construct a new table object. </para>
        </briefdescription>
        <detaileddescription>
<para><bold>Usage</bold>: <programlisting filename=".cpp"><codeline><highlight class="normal"><ref refid="classvar_1_1table" kindref="compound">var::table&lt;int&gt;</ref><sp/>t(2,<sp/>3);<sp/></highlight><highlight class="comment">//<sp/>2<sp/>rows,<sp/>3<sp/>colums<sp/>of<sp/>all<sp/>0</highlight></codeline>
</programlisting> <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>r</parametername>
</parameternamelist>
<parameterdescription>
<para>number of rows </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>c</parametername>
</parameternamelist>
<parameterdescription>
<para>number of colums </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="includes/variables/table.hpp" line="200" column="1" bodyfile="includes/variables/table.hpp" bodystart="200" bodyend="207"/>
      </memberdef>
      <memberdef kind="function" id="classvar_1_1table_1aa41d04fa2ccba5635d9b3308eea7fcc1" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type></type>
        <definition>var::table&lt; D &gt;::table</definition>
        <argsstring>(std::initializer_list&lt; std::initializer_list&lt; D &gt;&gt; a)</argsstring>
        <name>table</name>
        <param>
          <type>std::initializer_list&lt; std::initializer_list&lt; D &gt;&gt;</type>
          <declname>a</declname>
        </param>
        <briefdescription>
<para>Construct a new table object. </para>
        </briefdescription>
        <detaileddescription>
<para><bold>Usage</bold>: <programlisting filename=".cpp"><codeline><highlight class="normal"><ref refid="classvar_1_1table" kindref="compound">var::table&lt;int&gt;</ref><sp/>m<sp/>=<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/>{1,<sp/>2,<sp/>3},</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/>{4,<sp/>5,<sp/>6},</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/>{7,<sp/>8,<sp/>9}</highlight></codeline>
<codeline><highlight class="normal">};</highlight></codeline>
</programlisting></para>
<sect2 id="classvar_1_1table_1autotoc_md5">
<title>Getters</title>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>a</parametername>
</parameternamelist>
<parameterdescription>
<para>initializer list </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
</sect2>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="includes/variables/table.hpp" line="225" column="1" bodyfile="includes/variables/table.hpp" bodystart="225" bodyend="237"/>
      </memberdef>
      <memberdef kind="function" id="classvar_1_1table_1a7dbdb10f2db71872774179122ba9520b" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>int</type>
        <definition>int var::table&lt; D &gt;::row</definition>
        <argsstring>()</argsstring>
        <name>row</name>
        <briefdescription>
<para>Get the row size. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para><computeroutput>int</computeroutput> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="includes/variables/table.hpp" line="247" column="5" bodyfile="includes/variables/table.hpp" bodystart="247" bodyend="250"/>
      </memberdef>
      <memberdef kind="function" id="classvar_1_1table_1a70b568d560efd34b1a67aee49135b8a6" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>int</type>
        <definition>int var::table&lt; D &gt;::col</definition>
        <argsstring>()</argsstring>
        <name>col</name>
        <briefdescription>
<para>Get the col size. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para><computeroutput>int</computeroutput> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="includes/variables/table.hpp" line="257" column="5" bodyfile="includes/variables/table.hpp" bodystart="257" bodyend="260"/>
      </memberdef>
      <memberdef kind="function" id="classvar_1_1table_1a03c80af84df447196e80c74952211c2f" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>D &amp;</type>
        <definition>D&amp; var::table&lt; D &gt;::at</definition>
        <argsstring>(int i, int j)</argsstring>
        <name>at</name>
        <param>
          <type>int</type>
          <declname>i</declname>
        </param>
        <param>
          <type>int</type>
          <declname>j</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="includes/variables/table.hpp" line="262" column="3" bodyfile="includes/variables/table.hpp" bodystart="262" bodyend="268"/>
      </memberdef>
      <memberdef kind="function" id="classvar_1_1table_1abc5c989c570b6c90e15623cc7b2db1d0" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>std::vector&lt; std::string &gt;</type>
        <definition>std::vector&lt;std::string&gt; var::table&lt; D &gt;::get_col_names</definition>
        <argsstring>()</argsstring>
        <name>get_col_names</name>
        <briefdescription>
<para>Get the col names. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para><computeroutput>std::vector&lt;std::string&gt;</computeroutput> <linebreak/>
 </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="includes/variables/table.hpp" line="275" column="13" bodyfile="includes/variables/table.hpp" bodystart="275" bodyend="278"/>
      </memberdef>
      <memberdef kind="function" id="classvar_1_1table_1aaec876550ab824cf2e02af43d1e519de" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>std::vector&lt; std::string &gt;</type>
        <definition>std::vector&lt;std::string&gt; var::table&lt; D &gt;::get_row_names</definition>
        <argsstring>()</argsstring>
        <name>get_row_names</name>
        <briefdescription>
<para>Get the row names. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para><computeroutput>std::vector&lt;std::string&gt;</computeroutput> <linebreak/>
 </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="includes/variables/table.hpp" line="285" column="13" bodyfile="includes/variables/table.hpp" bodystart="285" bodyend="288"/>
      </memberdef>
      <memberdef kind="function" id="classvar_1_1table_1ad6f1653c6bce88ea1185589f6916e4a1" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>std::vector&lt; D &gt;</type>
        <definition>std::vector&lt;D&gt; var::table&lt; D &gt;::get_col</definition>
        <argsstring>(int index)</argsstring>
        <name>get_col</name>
        <param>
          <type>int</type>
          <declname>index</declname>
        </param>
        <briefdescription>
<para>Get the colum based on index. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>index</parametername>
</parameternamelist>
<parameterdescription>
<para>index of that colum </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para><computeroutput>std::vector&lt;D&gt;</computeroutput> <linebreak/>
 </para>
</simplesect>
<parameterlist kind="exception"><parameteritem>
<parameternamelist>
<parametername>&lt;tt&gt;std::invalid_argument&lt;/tt&gt;</parametername>
</parameternamelist>
<parameterdescription>
<para>in case index is invalid </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="includes/variables/table.hpp" line="297" column="13" bodyfile="includes/variables/table.hpp" bodystart="297" bodyend="307"/>
      </memberdef>
      <memberdef kind="function" id="classvar_1_1table_1a894dfeda7b8fed0898b5395c6d9f1fa5" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>std::vector&lt; D &gt;</type>
        <definition>std::vector&lt;D&gt; var::table&lt; D &gt;::get_col</definition>
        <argsstring>(std::string name)</argsstring>
        <name>get_col</name>
        <param>
          <type>std::string</type>
          <declname>name</declname>
        </param>
        <briefdescription>
<para>Get the column vector based on header name. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>name</parametername>
</parameternamelist>
<parameterdescription>
<para>name of the column </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para><computeroutput>std::vector&lt;D&gt;</computeroutput>: Empty if nothing exits <linebreak/>
 </para>
</simplesect>
<parameterlist kind="exception"><parameteritem>
<parameternamelist>
<parametername>&lt;tt&gt;std::invalid_argument&lt;/tt&gt;</parametername>
</parameternamelist>
<parameterdescription>
<para>in case name is invalid </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="includes/variables/table.hpp" line="316" column="13" bodyfile="includes/variables/table.hpp" bodystart="316" bodyend="319"/>
      </memberdef>
      <memberdef kind="function" id="classvar_1_1table_1acad06d75fc18f30495b34e1ba92e785b" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>std::vector&lt; D &gt;</type>
        <definition>std::vector&lt;D&gt; var::table&lt; D &gt;::get_row</definition>
        <argsstring>(int index)</argsstring>
        <name>get_row</name>
        <param>
          <type>int</type>
          <declname>index</declname>
        </param>
        <briefdescription>
<para>Get the row based on index. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>index</parametername>
</parameternamelist>
<parameterdescription>
<para>index of that row </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para><computeroutput>std::vector&lt;&amp;D&gt;</computeroutput> <linebreak/>
 </para>
</simplesect>
<parameterlist kind="exception"><parameteritem>
<parameternamelist>
<parametername>&lt;tt&gt;std::invalid_argument&lt;/tt&gt;</parametername>
</parameternamelist>
<parameterdescription>
<para>in case index is invalid </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="includes/variables/table.hpp" line="328" column="13" bodyfile="includes/variables/table.hpp" bodystart="328" bodyend="338"/>
      </memberdef>
      <memberdef kind="function" id="classvar_1_1table_1af06d391ee69ef70848c9620621dee65d" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>std::vector&lt; D &gt;</type>
        <definition>std::vector&lt;D&gt; var::table&lt; D &gt;::get_row</definition>
        <argsstring>(std::string name)</argsstring>
        <name>get_row</name>
        <param>
          <type>std::string</type>
          <declname>name</declname>
        </param>
        <briefdescription>
<para>Get the row vector based on header name. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>name</parametername>
</parameternamelist>
<parameterdescription>
<para>name of the row </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para><computeroutput>std::vector&lt;D&gt;</computeroutput>: Empty if nothing exits <linebreak/>
 </para>
</simplesect>
<parameterlist kind="exception"><parameteritem>
<parameternamelist>
<parametername>&lt;tt&gt;std::invalid_argument&lt;/tt&gt;</parametername>
</parameternamelist>
<parameterdescription>
<para>in case name is invalid </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
<sect2 id="classvar_1_1table_1autotoc_md6">
<title>Setters</title>
</sect2>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="includes/variables/table.hpp" line="348" column="13" bodyfile="includes/variables/table.hpp" bodystart="348" bodyend="351"/>
      </memberdef>
      <memberdef kind="function" id="classvar_1_1table_1a86899556462d8e8fc6499432157e4352" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void var::table&lt; D &gt;::set_col_names</definition>
        <argsstring>(std::vector&lt; std::string &gt; names)</argsstring>
        <name>set_col_names</name>
        <param>
          <type>std::vector&lt; std::string &gt;</type>
          <declname>names</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="includes/variables/table.hpp" line="355" column="6" bodyfile="includes/variables/table.hpp" bodystart="355" bodyend="361"/>
      </memberdef>
      <memberdef kind="function" id="classvar_1_1table_1aa5bd43c87bfa0a7e8e01fd9903827a77" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void var::table&lt; D &gt;::set_col_name</definition>
        <argsstring>(int index, std::string names)</argsstring>
        <name>set_col_name</name>
        <param>
          <type>int</type>
          <declname>index</declname>
        </param>
        <param>
          <type>std::string</type>
          <declname>names</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="includes/variables/table.hpp" line="363" column="6" bodyfile="includes/variables/table.hpp" bodystart="363" bodyend="372"/>
      </memberdef>
      <memberdef kind="function" id="classvar_1_1table_1a60611dd76aa2d387bb2909ef3a948427" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void var::table&lt; D &gt;::set_row_names</definition>
        <argsstring>(std::vector&lt; std::string &gt; names)</argsstring>
        <name>set_row_names</name>
        <param>
          <type>std::vector&lt; std::string &gt;</type>
          <declname>names</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="includes/variables/table.hpp" line="374" column="6" bodyfile="includes/variables/table.hpp" bodystart="374" bodyend="380"/>
      </memberdef>
      <memberdef kind="function" id="classvar_1_1table_1ab32aa5a1f830527e30478c1013019b79" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void var::table&lt; D &gt;::set_row_name</definition>
        <argsstring>(int index, std::string names)</argsstring>
        <name>set_row_name</name>
        <param>
          <type>int</type>
          <declname>index</declname>
        </param>
        <param>
          <type>std::string</type>
          <declname>names</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="includes/variables/table.hpp" line="382" column="6" bodyfile="includes/variables/table.hpp" bodystart="382" bodyend="391"/>
      </memberdef>
      <memberdef kind="function" id="classvar_1_1table_1a79698ece856134cc28099b0df4892429" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void var::table&lt; D &gt;::insert_col</definition>
        <argsstring>(std::vector&lt; D &gt; a, int j)</argsstring>
        <name>insert_col</name>
        <param>
          <type>std::vector&lt; D &gt;</type>
          <declname>a</declname>
        </param>
        <param>
          <type>int</type>
          <declname>j</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="includes/variables/table.hpp" line="393" column="6" bodyfile="includes/variables/table.hpp" bodystart="393" bodyend="405"/>
      </memberdef>
      <memberdef kind="function" id="classvar_1_1table_1aded5ddaf807dd8f37da8af8b9a12e1a0" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void var::table&lt; D &gt;::push_col</definition>
        <argsstring>(std::vector&lt; D &gt; a)</argsstring>
        <name>push_col</name>
        <param>
          <type>std::vector&lt; D &gt;</type>
          <declname>a</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="includes/variables/table.hpp" line="407" column="6" bodyfile="includes/variables/table.hpp" bodystart="407" bodyend="413"/>
      </memberdef>
      <memberdef kind="function" id="classvar_1_1table_1ac3f099c46a47c6428689efefad42dcf2" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool var::table&lt; D &gt;::read_csv</definition>
        <argsstring>(std::string filename)</argsstring>
        <name>read_csv</name>
        <param>
          <type>std::string</type>
          <declname>filename</declname>
        </param>
        <briefdescription>
<para>Reads from csv file. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>file</parametername>
</parameternamelist>
<parameterdescription>
<para>file name </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para><computeroutput>true</computeroutput> : if read is success </para>
</simplesect>
<simplesect kind="return"><para><computeroutput>false</computeroutput>: if read did not complete </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="includes/variables/table.hpp" line="427" column="6" bodyfile="includes/variables/table.hpp" bodystart="427" bodyend="464"/>
      </memberdef>
      <memberdef kind="function" id="classvar_1_1table_1aa287b9c7b64b4d5d8bd03e9a6a65a044" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool var::table&lt; D &gt;::save_csv</definition>
        <argsstring>(std::string filename)</argsstring>
        <name>save_csv</name>
        <param>
          <type>std::string</type>
          <declname>filename</declname>
        </param>
        <briefdescription>
<para>Reads from csv file. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>file</parametername>
</parameternamelist>
<parameterdescription>
<para></para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>true: if read is success </para>
</simplesect>
<simplesect kind="return"><para>false: if read did not complete </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="includes/variables/table.hpp" line="473" column="6" bodyfile="includes/variables/table.hpp" bodystart="473" bodyend="501"/>
      </memberdef>
      <memberdef kind="function" id="classvar_1_1table_1a462865ba0a86a2e26cce1ab85b60cbbf" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void var::table&lt; D &gt;::show</definition>
        <argsstring>(int r)</argsstring>
        <name>show</name>
        <param>
          <type>int</type>
          <declname>r</declname>
        </param>
        <briefdescription>
<para>Shows a certain number of rows in table. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>r</parametername>
</parameternamelist>
<parameterdescription>
<para></para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="includes/variables/table.hpp" line="508" column="6" bodyfile="includes/variables/table.hpp" bodystart="508" bodyend="569"/>
      </memberdef>
      <memberdef kind="function" id="classvar_1_1table_1ad471ed11d98bd02b5935cc71ba911bae" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void var::table&lt; D &gt;::show</definition>
        <argsstring>()</argsstring>
        <name>show</name>
        <briefdescription>
<para>shows all of the table </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="includes/variables/table.hpp" line="575" column="6" bodyfile="includes/variables/table.hpp" bodystart="575" bodyend="579"/>
      </memberdef>
      <memberdef kind="function" id="classvar_1_1table_1a5e7459882c4bd4bc29759f5fb3c1ee10" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void var::table&lt; D &gt;::show_header</definition>
        <argsstring>()</argsstring>
        <name>show_header</name>
        <briefdescription>
<para>Shows col_names only. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="includes/variables/table.hpp" line="585" column="6" bodyfile="includes/variables/table.hpp" bodystart="585" bodyend="588"/>
      </memberdef>
      <memberdef kind="function" id="classvar_1_1table_1a30907a37fd8b053fcdddf9b0fab3bb3a" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classvar_1_1table" kindref="compound">table</ref></type>
        <definition>table var::table&lt; D &gt;::get_row_table</definition>
        <argsstring>(int r)</argsstring>
        <name>get_row_table</name>
        <param>
          <type>int</type>
          <declname>r</declname>
        </param>
        <briefdescription>
<para>Get the row as table. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>r</parametername>
</parameternamelist>
<parameterdescription>
<para></para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>table </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="includes/variables/table.hpp" line="596" column="7" bodyfile="includes/variables/table.hpp" bodystart="596" bodyend="606"/>
      </memberdef>
      <memberdef kind="function" id="classvar_1_1table_1a28b6553353daf2c3e34a5786f90dd25c" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classvar_1_1table" kindref="compound">table</ref></type>
        <definition>table var::table&lt; D &gt;::get_col_table</definition>
        <argsstring>(std::string name)</argsstring>
        <name>get_col_table</name>
        <param>
          <type>std::string</type>
          <declname>name</declname>
        </param>
        <briefdescription>
<para>Get the col as table. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>name</parametername>
</parameternamelist>
<parameterdescription>
<para></para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>table </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="includes/variables/table.hpp" line="614" column="7" bodyfile="includes/variables/table.hpp" bodystart="614" bodyend="626"/>
      </memberdef>
      <memberdef kind="function" id="classvar_1_1table_1aa749af1d60dccf89e6c72819a58b0227" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool var::table&lt; D &gt;::add_col</definition>
        <argsstring>(std::vector&lt; D &gt; col_data, std::string col_name=std::string())</argsstring>
        <name>add_col</name>
        <param>
          <type>std::vector&lt; D &gt;</type>
          <declname>col_data</declname>
        </param>
        <param>
          <type>std::string</type>
          <declname>col_name</declname>
          <defval>std::string()</defval>
        </param>
        <briefdescription>
<para>Adds new colum. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>col_name</parametername>
</parameternamelist>
<parameterdescription>
<para></para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>col_data</parametername>
</parameternamelist>
<parameterdescription>
<para></para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>true </para>
</simplesect>
<simplesect kind="return"><para>false </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="includes/variables/table.hpp" line="636" column="6" bodyfile="includes/variables/table.hpp" bodystart="636" bodyend="652"/>
      </memberdef>
      <memberdef kind="function" id="classvar_1_1table_1abe04d33a4b04fff930fa8158e41309bb" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool var::table&lt; D &gt;::add_row</definition>
        <argsstring>(std::vector&lt; D &gt; row_data)</argsstring>
        <name>add_row</name>
        <param>
          <type>std::vector&lt; D &gt;</type>
          <declname>row_data</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="includes/variables/table.hpp" line="654" column="6" bodyfile="includes/variables/table.hpp" bodystart="654" bodyend="657"/>
      </memberdef>
      <memberdef kind="function" id="classvar_1_1table_1a4c6b4d98de8c0e527ac5f55ce455270b" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>std::vector&lt; D &gt;</type>
        <definition>std::vector&lt;D&gt; var::table&lt; D &gt;::get_avgs</definition>
        <argsstring>()</argsstring>
        <name>get_avgs</name>
        <briefdescription>
<para>Extract average of each column into a vector. </para>
        </briefdescription>
        <detaileddescription>
<para>Used in <computeroutput>describe_all()</computeroutput></para>
<para><simplesect kind="return"><para><computeroutput>std::vector&lt;D&gt;</computeroutput>: same size as number of columns </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="includes/variables/table.hpp" line="668" column="13" bodyfile="includes/variables/table.hpp" bodystart="668" bodyend="676"/>
      </memberdef>
      <memberdef kind="function" id="classvar_1_1table_1a2c2a9860253cc9e72b822d35c777e749" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>std::vector&lt; D &gt;</type>
        <definition>std::vector&lt;D&gt; var::table&lt; D &gt;::get_stds</definition>
        <argsstring>()</argsstring>
        <name>get_stds</name>
        <briefdescription>
<para>Extract STD of each column into a vector. </para>
        </briefdescription>
        <detaileddescription>
<para>Used in <computeroutput>describe_all()</computeroutput></para>
<para><simplesect kind="return"><para><computeroutput>std::vector&lt;D&gt;</computeroutput> same size as number of columns </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="includes/variables/table.hpp" line="685" column="13" bodyfile="includes/variables/table.hpp" bodystart="685" bodyend="693"/>
      </memberdef>
      <memberdef kind="function" id="classvar_1_1table_1a196ea90112f0e84e30ea8fa6e7b1cb98" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>std::vector&lt; D &gt;</type>
        <definition>std::vector&lt;D&gt; var::table&lt; D &gt;::get_vars</definition>
        <argsstring>()</argsstring>
        <name>get_vars</name>
        <briefdescription>
<para>Extract variance of each column into a vector. </para>
        </briefdescription>
        <detaileddescription>
<para>Used in <computeroutput>describe_all()</computeroutput></para>
<para><simplesect kind="return"><para><computeroutput>std::vector&lt;D&gt;</computeroutput>: same size as numebr of columns </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="includes/variables/table.hpp" line="702" column="13" bodyfile="includes/variables/table.hpp" bodystart="702" bodyend="710"/>
      </memberdef>
      <memberdef kind="function" id="classvar_1_1table_1acde3b5b518d75c28078e60b2acfe9e1f" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>std::vector&lt; <ref refid="structvar_1_1QR" kindref="compound">QR</ref>&lt; D &gt; &gt;</type>
        <definition>std::vector&lt;QR&lt;D&gt; &gt; var::table&lt; D &gt;::get_qrs</definition>
        <argsstring>()</argsstring>
        <name>get_qrs</name>
        <briefdescription>
<para>Extract QR of each column into a vector. </para>
        </briefdescription>
        <detaileddescription>
<para>Used in <computeroutput>describe_all()</computeroutput></para>
<para><simplesect kind="return"><para><computeroutput>std::vector&lt;QR&gt;</computeroutput>: same size as number of colums </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="includes/variables/table.hpp" line="719" column="13" bodyfile="includes/variables/table.hpp" bodystart="719" bodyend="727"/>
      </memberdef>
      <memberdef kind="function" id="classvar_1_1table_1a85c69677672bfc6a61b0499e868c7465" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>std::vector&lt; D &gt;</type>
        <definition>std::vector&lt;D&gt; var::table&lt; D &gt;::get_sums</definition>
        <argsstring>()</argsstring>
        <name>get_sums</name>
        <briefdescription>
<para>Extract sum of each column into a vector. </para>
        </briefdescription>
        <detaileddescription>
<para>Used in <computeroutput>describe_all()</computeroutput></para>
<para><simplesect kind="return"><para><computeroutput>std::vector&lt;D&gt;</computeroutput> size is same size as number of colums </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="includes/variables/table.hpp" line="737" column="13" bodyfile="includes/variables/table.hpp" bodystart="737" bodyend="745"/>
      </memberdef>
      <memberdef kind="function" id="classvar_1_1table_1afa3958110fe2532e0e8f47c9281b9a90" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classvar_1_1table" kindref="compound">table</ref></type>
        <definition>table var::table&lt; D &gt;::describe_all</definition>
        <argsstring>()</argsstring>
        <name>describe_all</name>
        <briefdescription>
<para>Statistical summary of all colums in table. </para>
        </briefdescription>
        <detaileddescription>
<para><itemizedlist>
<listitem><para>Example:</para>
</listitem></itemizedlist>
</para>
<para><table rows="3" cols="11"><row>
<entry thead="yes"><para></para>
</entry><entry thead="yes"><para>Avg   </para>
</entry><entry thead="yes"><para>STD   </para>
</entry><entry thead="yes"><para>VAR   </para>
</entry><entry thead="yes"><para>Min   </para>
</entry><entry thead="yes"><para>Q1   </para>
</entry><entry thead="yes"><para>Q2   </para>
</entry><entry thead="yes"><para>Q3   </para>
</entry><entry thead="yes"><para>Max   </para>
</entry><entry thead="yes"><para>IQR   </para>
</entry><entry thead="yes"><para>Sum    </para>
</entry></row>
<row>
<entry thead="no"><para>col-0   </para>
</entry><entry thead="no"><para>..   </para>
</entry><entry thead="no"><para>..   </para>
</entry><entry thead="no"><para>..   </para>
</entry><entry thead="no"><para>..   </para>
</entry><entry thead="no"><para>..   </para>
</entry><entry thead="no"><para>..   </para>
</entry><entry thead="no"><para>..   </para>
</entry><entry thead="no"><para>..   </para>
</entry><entry thead="no"><para>..   </para>
</entry><entry thead="no"><para>..    </para>
</entry></row>
<row>
<entry thead="no"><para>col-1   </para>
</entry><entry thead="no"><para>..   </para>
</entry><entry thead="no"><para>..   </para>
</entry><entry thead="no"><para>..   </para>
</entry><entry thead="no"><para>..   </para>
</entry><entry thead="no"><para>..   </para>
</entry><entry thead="no"><para>..   </para>
</entry><entry thead="no"><para>..   </para>
</entry><entry thead="no"><para>..   </para>
</entry><entry thead="no"><para>..   </para>
</entry><entry thead="no"><para>..   </para>
</entry></row>
</table>
</para>
<para><simplesect kind="return"><para><computeroutput>table&lt;D&gt;</computeroutput> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="includes/variables/table.hpp" line="759" column="7" bodyfile="includes/variables/table.hpp" bodystart="759" bodyend="808"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
<para>2D array class </para>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <collaborationgraph>
      <node id="1">
        <label>var::table&lt; D &gt;</label>
        <link refid="classvar_1_1table"/>
      </node>
    </collaborationgraph>
    <location file="includes/variables/table.hpp" line="25" column="1" bodyfile="includes/variables/table.hpp" bodystart="26" bodyend="809"/>
    <listofallmembers>
      <member refid="classvar_1_1table_1ad9a35db73dbd794283bf9b986c133ca3" prot="protected" virt="non-virtual"><scope>var::table</scope><name>_col</name></member>
      <member refid="classvar_1_1table_1a3d195e6796cfbc441b8e240b651d695b" prot="protected" virt="non-virtual"><scope>var::table</scope><name>_row</name></member>
      <member refid="classvar_1_1table_1aa749af1d60dccf89e6c72819a58b0227" prot="public" virt="non-virtual"><scope>var::table</scope><name>add_col</name></member>
      <member refid="classvar_1_1table_1abe04d33a4b04fff930fa8158e41309bb" prot="public" virt="non-virtual"><scope>var::table</scope><name>add_row</name></member>
      <member refid="classvar_1_1table_1a03c80af84df447196e80c74952211c2f" prot="public" virt="non-virtual"><scope>var::table</scope><name>at</name></member>
      <member refid="classvar_1_1table_1a215cdf3b672a7231d895f4e6c4214b64" prot="protected" virt="non-virtual"><scope>var::table</scope><name>center</name></member>
      <member refid="classvar_1_1table_1a42caed33499ca87d392e45e53fb6bc89" prot="protected" virt="non-virtual"><scope>var::table</scope><name>check_col_name</name></member>
      <member refid="classvar_1_1table_1ac3e95893eeb5711dbdcd402a6b06dea3" prot="protected" virt="non-virtual"><scope>var::table</scope><name>check_row_name</name></member>
      <member refid="classvar_1_1table_1a70b568d560efd34b1a67aee49135b8a6" prot="public" virt="non-virtual"><scope>var::table</scope><name>col</name></member>
      <member refid="classvar_1_1table_1a55535e54d90e2ddf7fbc98532e3dbaa3" prot="protected" virt="non-virtual"><scope>var::table</scope><name>col_names</name></member>
      <member refid="classvar_1_1table_1a35741492731785ddcf09bcb83a87d2d3" prot="protected" virt="non-virtual"><scope>var::table</scope><name>data</name></member>
      <member refid="classvar_1_1table_1afa3958110fe2532e0e8f47c9281b9a90" prot="public" virt="non-virtual"><scope>var::table</scope><name>describe_all</name></member>
      <member refid="classvar_1_1table_1a75cd6fd5f807343b311152f5118bb085" prot="protected" virt="non-virtual"><scope>var::table</scope><name>generate_cols</name></member>
      <member refid="classvar_1_1table_1a4ad03a888518a0919abcef08d9b307ea" prot="protected" virt="non-virtual"><scope>var::table</scope><name>generate_line</name></member>
      <member refid="classvar_1_1table_1a2032fb3518fc73b1af05770202d61e8c" prot="protected" virt="non-virtual"><scope>var::table</scope><name>generate_rows</name></member>
      <member refid="classvar_1_1table_1a4c6b4d98de8c0e527ac5f55ce455270b" prot="public" virt="non-virtual"><scope>var::table</scope><name>get_avgs</name></member>
      <member refid="classvar_1_1table_1ad6f1653c6bce88ea1185589f6916e4a1" prot="public" virt="non-virtual"><scope>var::table</scope><name>get_col</name></member>
      <member refid="classvar_1_1table_1a894dfeda7b8fed0898b5395c6d9f1fa5" prot="public" virt="non-virtual"><scope>var::table</scope><name>get_col</name></member>
      <member refid="classvar_1_1table_1abc5c989c570b6c90e15623cc7b2db1d0" prot="public" virt="non-virtual"><scope>var::table</scope><name>get_col_names</name></member>
      <member refid="classvar_1_1table_1a28b6553353daf2c3e34a5786f90dd25c" prot="public" virt="non-virtual"><scope>var::table</scope><name>get_col_table</name></member>
      <member refid="classvar_1_1table_1ab07ae6c9f4caef7a61a1fbc98ca638fd" prot="protected" virt="non-virtual"><scope>var::table</scope><name>get_index</name></member>
      <member refid="classvar_1_1table_1acde3b5b518d75c28078e60b2acfe9e1f" prot="public" virt="non-virtual"><scope>var::table</scope><name>get_qrs</name></member>
      <member refid="classvar_1_1table_1acad06d75fc18f30495b34e1ba92e785b" prot="public" virt="non-virtual"><scope>var::table</scope><name>get_row</name></member>
      <member refid="classvar_1_1table_1af06d391ee69ef70848c9620621dee65d" prot="public" virt="non-virtual"><scope>var::table</scope><name>get_row</name></member>
      <member refid="classvar_1_1table_1aaec876550ab824cf2e02af43d1e519de" prot="public" virt="non-virtual"><scope>var::table</scope><name>get_row_names</name></member>
      <member refid="classvar_1_1table_1a30907a37fd8b053fcdddf9b0fab3bb3a" prot="public" virt="non-virtual"><scope>var::table</scope><name>get_row_table</name></member>
      <member refid="classvar_1_1table_1a2c2a9860253cc9e72b822d35c777e749" prot="public" virt="non-virtual"><scope>var::table</scope><name>get_stds</name></member>
      <member refid="classvar_1_1table_1a85c69677672bfc6a61b0499e868c7465" prot="public" virt="non-virtual"><scope>var::table</scope><name>get_sums</name></member>
      <member refid="classvar_1_1table_1a196ea90112f0e84e30ea8fa6e7b1cb98" prot="public" virt="non-virtual"><scope>var::table</scope><name>get_vars</name></member>
      <member refid="classvar_1_1table_1a79698ece856134cc28099b0df4892429" prot="public" virt="non-virtual"><scope>var::table</scope><name>insert_col</name></member>
      <member refid="classvar_1_1table_1a0b08c797c3314998239636e4840ff74e" prot="protected" virt="non-virtual"><scope>var::table</scope><name>prd</name></member>
      <member refid="classvar_1_1table_1ae783c7e8063d4999c621f28a44dd215c" prot="protected" virt="non-virtual"><scope>var::table</scope><name>prd</name></member>
      <member refid="classvar_1_1table_1aded5ddaf807dd8f37da8af8b9a12e1a0" prot="public" virt="non-virtual"><scope>var::table</scope><name>push_col</name></member>
      <member refid="classvar_1_1table_1ac3f099c46a47c6428689efefad42dcf2" prot="public" virt="non-virtual"><scope>var::table</scope><name>read_csv</name></member>
      <member refid="classvar_1_1table_1a7dbdb10f2db71872774179122ba9520b" prot="public" virt="non-virtual"><scope>var::table</scope><name>row</name></member>
      <member refid="classvar_1_1table_1ad69844095e9fd79ebdca86f22fa42ff5" prot="protected" virt="non-virtual"><scope>var::table</scope><name>row_names</name></member>
      <member refid="classvar_1_1table_1aa287b9c7b64b4d5d8bd03e9a6a65a044" prot="public" virt="non-virtual"><scope>var::table</scope><name>save_csv</name></member>
      <member refid="classvar_1_1table_1aa5bd43c87bfa0a7e8e01fd9903827a77" prot="public" virt="non-virtual"><scope>var::table</scope><name>set_col_name</name></member>
      <member refid="classvar_1_1table_1a86899556462d8e8fc6499432157e4352" prot="public" virt="non-virtual"><scope>var::table</scope><name>set_col_names</name></member>
      <member refid="classvar_1_1table_1ab32aa5a1f830527e30478c1013019b79" prot="public" virt="non-virtual"><scope>var::table</scope><name>set_row_name</name></member>
      <member refid="classvar_1_1table_1a60611dd76aa2d387bb2909ef3a948427" prot="public" virt="non-virtual"><scope>var::table</scope><name>set_row_names</name></member>
      <member refid="classvar_1_1table_1a462865ba0a86a2e26cce1ab85b60cbbf" prot="public" virt="non-virtual"><scope>var::table</scope><name>show</name></member>
      <member refid="classvar_1_1table_1ad471ed11d98bd02b5935cc71ba911bae" prot="public" virt="non-virtual"><scope>var::table</scope><name>show</name></member>
      <member refid="classvar_1_1table_1a5e7459882c4bd4bc29759f5fb3c1ee10" prot="public" virt="non-virtual"><scope>var::table</scope><name>show_header</name></member>
      <member refid="classvar_1_1table_1ae067e021bec7ba45f14e0a6c45c6116d" prot="protected" virt="non-virtual"><scope>var::table</scope><name>sz</name></member>
      <member refid="classvar_1_1table_1ada6ebdf0a90915bedfa07fc57b31a504" prot="public" virt="non-virtual"><scope>var::table</scope><name>table</name></member>
      <member refid="classvar_1_1table_1af13ef05abffb251c15846e8f881867db" prot="public" virt="non-virtual"><scope>var::table</scope><name>table</name></member>
      <member refid="classvar_1_1table_1aa41d04fa2ccba5635d9b3308eea7fcc1" prot="public" virt="non-virtual"><scope>var::table</scope><name>table</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
