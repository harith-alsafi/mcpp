<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.9.2" xml:lang="en-US">
  <compounddef id="classvar_1_1table" kind="class" language="C++" prot="public">
    <compoundname>var::table</compoundname>
    <basecompoundref prot="public" virt="non-virtual">std::vector&lt; std::vector&lt; D &gt; &gt;</basecompoundref>
    <includes local="yes">table.hpp</includes>
    <innerclass refid="structvar_1_1table_1_1QR" prot="public">var::table::QR</innerclass>
    <templateparamlist>
      <param>
        <type>typename D</type>
      </param>
    </templateparamlist>
      <sectiondef kind="private-attrib">
      <memberdef kind="variable" id="classvar_1_1table_1af238cb3f30f4e545efdc4e0e0c371cde" prot="private" static="no" mutable="no">
        <type>std::vector&lt; std::string &gt;</type>
        <definition>std::vector&lt;std::string&gt; var::table&lt; D &gt;::headers</definition>
        <argsstring></argsstring>
        <name>headers</name>
        <briefdescription>
<para>Stores the headers. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="includes/variables/table.hpp" line="41" column="13" bodyfile="includes/variables/table.hpp" bodystart="41" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classvar_1_1table_1a4333369e4f9d6443768ffe9e21dd04ed" prot="private" static="no" mutable="no">
        <type>std::vector&lt; std::string &gt;</type>
        <definition>std::vector&lt;std::string&gt; var::table&lt; D &gt;::rows</definition>
        <argsstring></argsstring>
        <name>rows</name>
        <briefdescription>
<para>Stores the row names. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="includes/variables/table.hpp" line="42" column="13" bodyfile="includes/variables/table.hpp" bodystart="42" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classvar_1_1table_1a6dd43c21c40a2c82b80fce47e8f45751" prot="private" static="no" mutable="no">
        <type>int</type>
        <definition>int var::table&lt; D &gt;::row</definition>
        <argsstring></argsstring>
        <name>row</name>
        <briefdescription>
<para>Row size. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="includes/variables/table.hpp" line="43" column="5" bodyfile="includes/variables/table.hpp" bodystart="43" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classvar_1_1table_1a0170e1261a00394cf7017c86e6833b49" prot="private" static="no" mutable="no">
        <type>int</type>
        <definition>int var::table&lt; D &gt;::col</definition>
        <argsstring></argsstring>
        <name>col</name>
        <briefdescription>
<para>Colum size. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="includes/variables/table.hpp" line="44" column="5" bodyfile="includes/variables/table.hpp" bodystart="44" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classvar_1_1table_1ae067e021bec7ba45f14e0a6c45c6116d" prot="private" static="no" mutable="no">
        <type>int</type>
        <definition>int var::table&lt; D &gt;::sz</definition>
        <argsstring></argsstring>
        <name>sz</name>
        <initializer>= 10</initializer>
        <briefdescription>
<para>Spacing size for print. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="includes/variables/table.hpp" line="45" column="5" bodyfile="includes/variables/table.hpp" bodystart="45" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="private-func">
      <memberdef kind="function" id="classvar_1_1table_1aba9cc3ab7bf7f78926589af319c763a7" prot="private" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>int</type>
        <definition>int var::table&lt; D &gt;::check_header</definition>
        <argsstring>(std::string head)</argsstring>
        <name>check_header</name>
        <param>
          <type>std::string</type>
          <declname>head</declname>
        </param>
        <briefdescription>
<para>Checks the header and returns index. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>head</parametername>
</parameternamelist>
<parameterdescription>
<para></para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>int </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="includes/variables/table.hpp" line="53" column="5" bodyfile="includes/variables/table.hpp" bodystart="53" bodyend="61"/>
      </memberdef>
      <memberdef kind="function" id="classvar_1_1table_1aea1482942b89d2a6410a7a69a9cb710e" prot="private" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>std::vector&lt; D &gt;</type>
        <definition>std::vector&lt;D&gt; var::table&lt; D &gt;::get_col_</definition>
        <argsstring>(std::string headname)</argsstring>
        <name>get_col_</name>
        <param>
          <type>std::string</type>
          <declname>headname</declname>
        </param>
        <briefdescription>
<para>Get the col vector based on header name. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>headname</parametername>
</parameternamelist>
<parameterdescription>
<para></para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>std::vector&lt;D&gt; </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="includes/variables/table.hpp" line="69" column="13" bodyfile="includes/variables/table.hpp" bodystart="69" bodyend="79"/>
      </memberdef>
      <memberdef kind="function" id="classvar_1_1table_1a4c6b4d98de8c0e527ac5f55ce455270b" prot="private" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>std::vector&lt; D &gt;</type>
        <definition>std::vector&lt;D&gt; var::table&lt; D &gt;::get_avgs</definition>
        <argsstring>()</argsstring>
        <name>get_avgs</name>
        <briefdescription>
<para>Get the return average of all colums in vector. </para>
        </briefdescription>
        <detaileddescription>
<para>Used in describe_all()</para>
<para><simplesect kind="return"><para>std::vector&lt;D&gt; </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="includes/variables/table.hpp" line="88" column="13" bodyfile="includes/variables/table.hpp" bodystart="88" bodyend="95"/>
      </memberdef>
      <memberdef kind="function" id="classvar_1_1table_1a2c2a9860253cc9e72b822d35c777e749" prot="private" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>std::vector&lt; D &gt;</type>
        <definition>std::vector&lt;D&gt; var::table&lt; D &gt;::get_stds</definition>
        <argsstring>()</argsstring>
        <name>get_stds</name>
        <briefdescription>
<para>Get the return std of all colums in vector. </para>
        </briefdescription>
        <detaileddescription>
<para>Used in describe_all()</para>
<para><simplesect kind="return"><para>std::vector&lt;D&gt; </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="includes/variables/table.hpp" line="104" column="13" bodyfile="includes/variables/table.hpp" bodystart="104" bodyend="111"/>
      </memberdef>
      <memberdef kind="function" id="classvar_1_1table_1a196ea90112f0e84e30ea8fa6e7b1cb98" prot="private" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>std::vector&lt; D &gt;</type>
        <definition>std::vector&lt;D&gt; var::table&lt; D &gt;::get_vars</definition>
        <argsstring>()</argsstring>
        <name>get_vars</name>
        <briefdescription>
<para>Get the return variance of all colums in vector. </para>
        </briefdescription>
        <detaileddescription>
<para>Used in describe_all()</para>
<para><simplesect kind="return"><para>std::vector&lt;D&gt; </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="includes/variables/table.hpp" line="120" column="13" bodyfile="includes/variables/table.hpp" bodystart="120" bodyend="127"/>
      </memberdef>
      <memberdef kind="function" id="classvar_1_1table_1a088733e85442485729c9304329dc9195" prot="private" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>std::vector&lt; <ref refid="structvar_1_1table_1_1QR" kindref="compound">QR</ref> &gt;</type>
        <definition>std::vector&lt;QR&gt; var::table&lt; D &gt;::get_qrs</definition>
        <argsstring>()</argsstring>
        <name>get_qrs</name>
        <briefdescription>
<para>Get the return quartile range of all colums in vector. </para>
        </briefdescription>
        <detaileddescription>
<para>Used in describe_all()</para>
<para><simplesect kind="return"><para>std::vector&lt;D&gt; </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="includes/variables/table.hpp" line="136" column="13" bodyfile="includes/variables/table.hpp" bodystart="136" bodyend="143"/>
      </memberdef>
      <memberdef kind="function" id="classvar_1_1table_1a85c69677672bfc6a61b0499e868c7465" prot="private" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>std::vector&lt; D &gt;</type>
        <definition>std::vector&lt;D&gt; var::table&lt; D &gt;::get_sums</definition>
        <argsstring>()</argsstring>
        <name>get_sums</name>
        <briefdescription>
<para>Get the return sums of all colums in vector. </para>
        </briefdescription>
        <detaileddescription>
<para>Used in describe_all()</para>
<para><simplesect kind="return"><para>std::vector&lt;D&gt; </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="includes/variables/table.hpp" line="152" column="13" bodyfile="includes/variables/table.hpp" bodystart="152" bodyend="159"/>
      </memberdef>
      <memberdef kind="function" id="classvar_1_1table_1a2032fb3518fc73b1af05770202d61e8c" prot="private" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void var::table&lt; D &gt;::generate_rows</definition>
        <argsstring>()</argsstring>
        <name>generate_rows</name>
        <briefdescription>
<para>Generates row names. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="includes/variables/table.hpp" line="219" column="6" bodyfile="includes/variables/table.hpp" bodystart="219" bodyend="225"/>
      </memberdef>
      <memberdef kind="function" id="classvar_1_1table_1a55df2f9f50827b058c9b8c3bd4d38d17" prot="private" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void var::table&lt; D &gt;::check_size</definition>
        <argsstring>()</argsstring>
        <name>check_size</name>
        <briefdescription>
<para>Checks size of current class. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="includes/variables/table.hpp" line="231" column="6" bodyfile="includes/variables/table.hpp" bodystart="231" bodyend="240"/>
      </memberdef>
      <memberdef kind="function" id="classvar_1_1table_1a4ad03a888518a0919abcef08d9b307ea" prot="private" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>std::string</type>
        <definition>std::string var::table&lt; D &gt;::generate_line</definition>
        <argsstring>(int l)</argsstring>
        <name>generate_line</name>
        <param>
          <type>int</type>
          <declname>l</declname>
        </param>
        <briefdescription>
<para>Generates line to seperate rows. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>l</parametername>
</parameternamelist>
<parameterdescription>
<para></para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>std::string </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="includes/variables/table.hpp" line="248" column="13" bodyfile="includes/variables/table.hpp" bodystart="248" bodyend="255"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="private-static-func">
      <memberdef kind="function" id="classvar_1_1table_1a215cdf3b672a7231d895f4e6c4214b64" prot="private" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>std::string</type>
        <definition>static std::string var::table&lt; D &gt;::center</definition>
        <argsstring>(const std::string s, const int w)</argsstring>
        <name>center</name>
        <param>
          <type>const std::string</type>
          <declname>s</declname>
        </param>
        <param>
          <type>const int</type>
          <declname>w</declname>
        </param>
        <briefdescription>
<para>Re-centers a string based on given width. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>s</parametername>
</parameternamelist>
<parameterdescription>
<para></para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>w</parametername>
</parameternamelist>
<parameterdescription>
<para></para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>std::string </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="includes/variables/table.hpp" line="168" column="20" bodyfile="includes/variables/table.hpp" bodystart="168" bodyend="178"/>
      </memberdef>
      <memberdef kind="function" id="classvar_1_1table_1a0b08c797c3314998239636e4840ff74e" prot="private" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>std::string</type>
        <definition>static std::string var::table&lt; D &gt;::prd</definition>
        <argsstring>(D x, int width)</argsstring>
        <name>prd</name>
        <param>
          <type>D</type>
          <declname>x</declname>
        </param>
        <param>
          <type>int</type>
          <declname>width</declname>
        </param>
        <briefdescription>
<para>converts double to a string with white space </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>x</parametername>
</parameternamelist>
<parameterdescription>
<para></para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>width</parametername>
</parameternamelist>
<parameterdescription>
<para></para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>std::string </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="includes/variables/table.hpp" line="187" column="20" bodyfile="includes/variables/table.hpp" bodystart="187" bodyend="196"/>
      </memberdef>
      <memberdef kind="function" id="classvar_1_1table_1ae783c7e8063d4999c621f28a44dd215c" prot="private" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>std::string</type>
        <definition>static std::string var::table&lt; D &gt;::prd</definition>
        <argsstring>(std::string x, int width)</argsstring>
        <name>prd</name>
        <param>
          <type>std::string</type>
          <declname>x</declname>
        </param>
        <param>
          <type>int</type>
          <declname>width</declname>
        </param>
        <briefdescription>
<para>Gives spacing to a string. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>x</parametername>
</parameternamelist>
<parameterdescription>
<para></para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>width</parametername>
</parameternamelist>
<parameterdescription>
<para></para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>std::string </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="includes/variables/table.hpp" line="205" column="20" bodyfile="includes/variables/table.hpp" bodystart="205" bodyend="213"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-func">
      <memberdef kind="function" id="classvar_1_1table_1ada6ebdf0a90915bedfa07fc57b31a504" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type></type>
        <definition>var::table&lt; D &gt;::table</definition>
        <argsstring>()</argsstring>
        <name>table</name>
        <briefdescription>
<para>Construct a new table object. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="includes/variables/table.hpp" line="263" column="1" bodyfile="includes/variables/table.hpp" bodystart="263" bodyend="263"/>
      </memberdef>
      <memberdef kind="function" id="classvar_1_1table_1a135d46678f8916df8bcd9d4d9472fd3a" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type></type>
        <definition>var::table&lt; D &gt;::~table</definition>
        <argsstring>()</argsstring>
        <name>~table</name>
        <briefdescription>
<para>Destroy the table object. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="includes/variables/table.hpp" line="269" column="1" bodyfile="includes/variables/table.hpp" bodystart="269" bodyend="269"/>
      </memberdef>
      <memberdef kind="function" id="classvar_1_1table_1ac3f099c46a47c6428689efefad42dcf2" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool var::table&lt; D &gt;::read_csv</definition>
        <argsstring>(std::string filename)</argsstring>
        <name>read_csv</name>
        <param>
          <type>std::string</type>
          <declname>filename</declname>
        </param>
        <briefdescription>
<para>Reads from csv file. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>file</parametername>
</parameternamelist>
<parameterdescription>
<para></para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>true: if read is success </para>
</simplesect>
<simplesect kind="return"><para>false: if read did not complete </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="includes/variables/table.hpp" line="278" column="6" bodyfile="includes/variables/table.hpp" bodystart="278" bodyend="315"/>
      </memberdef>
      <memberdef kind="function" id="classvar_1_1table_1aa287b9c7b64b4d5d8bd03e9a6a65a044" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool var::table&lt; D &gt;::save_csv</definition>
        <argsstring>(std::string filename)</argsstring>
        <name>save_csv</name>
        <param>
          <type>std::string</type>
          <declname>filename</declname>
        </param>
        <briefdescription>
<para>Reads from csv file. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>file</parametername>
</parameternamelist>
<parameterdescription>
<para></para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>true: if read is success </para>
</simplesect>
<simplesect kind="return"><para>false: if read did not complete </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="includes/variables/table.hpp" line="324" column="6" bodyfile="includes/variables/table.hpp" bodystart="324" bodyend="352"/>
      </memberdef>
      <memberdef kind="function" id="classvar_1_1table_1ac129bb6a1940378e7511762ba5152857" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>int</type>
        <definition>int var::table&lt; D &gt;::get_row_size</definition>
        <argsstring>()</argsstring>
        <name>get_row_size</name>
        <briefdescription>
<para>Get the row size object. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>int </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="includes/variables/table.hpp" line="359" column="5" bodyfile="includes/variables/table.hpp" bodystart="359" bodyend="362"/>
      </memberdef>
      <memberdef kind="function" id="classvar_1_1table_1a0e5e2a6af3e5a10886c26c130ca51a0d" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>int</type>
        <definition>int var::table&lt; D &gt;::get_col_size</definition>
        <argsstring>()</argsstring>
        <name>get_col_size</name>
        <briefdescription>
<para>Get the col size object. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>int </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="includes/variables/table.hpp" line="369" column="5" bodyfile="includes/variables/table.hpp" bodystart="369" bodyend="377"/>
      </memberdef>
      <memberdef kind="function" id="classvar_1_1table_1ad326577c23b9400e0296f71aebe8d2a0" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>std::vector&lt; D &gt;</type>
        <definition>std::vector&lt;D&gt; var::table&lt; D &gt;::operator[]</definition>
        <argsstring>(std::string headname)</argsstring>
        <name>operator[]</name>
        <param>
          <type>std::string</type>
          <declname>headname</declname>
        </param>
        <briefdescription>
<para>Returns colum of certain header. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>headname</parametername>
</parameternamelist>
<parameterdescription>
<para></para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>std::vector&lt;TYPE&gt;&amp; </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="includes/variables/table.hpp" line="385" column="13" bodyfile="includes/variables/table.hpp" bodystart="385" bodyend="388"/>
      </memberdef>
      <memberdef kind="function" id="classvar_1_1table_1a462865ba0a86a2e26cce1ab85b60cbbf" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void var::table&lt; D &gt;::show</definition>
        <argsstring>(int r)</argsstring>
        <name>show</name>
        <param>
          <type>int</type>
          <declname>r</declname>
        </param>
        <briefdescription>
<para>Shows a certain number of rows in table. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>r</parametername>
</parameternamelist>
<parameterdescription>
<para></para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="includes/variables/table.hpp" line="521" column="6" bodyfile="includes/variables/table.hpp" bodystart="521" bodyend="579"/>
      </memberdef>
      <memberdef kind="function" id="classvar_1_1table_1ad471ed11d98bd02b5935cc71ba911bae" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void var::table&lt; D &gt;::show</definition>
        <argsstring>()</argsstring>
        <name>show</name>
        <briefdescription>
<para>shows all of the table </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="includes/variables/table.hpp" line="585" column="6" bodyfile="includes/variables/table.hpp" bodystart="585" bodyend="589"/>
      </memberdef>
      <memberdef kind="function" id="classvar_1_1table_1afa3958110fe2532e0e8f47c9281b9a90" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classvar_1_1table" kindref="compound">table</ref></type>
        <definition>table var::table&lt; D &gt;::describe_all</definition>
        <argsstring>()</argsstring>
        <name>describe_all</name>
        <briefdescription>
<para>Statistical summary of all colums in table. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>table </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="includes/variables/table.hpp" line="596" column="7" bodyfile="includes/variables/table.hpp" bodystart="596" bodyend="641"/>
      </memberdef>
      <memberdef kind="function" id="classvar_1_1table_1a13829ed8fe8ad15fe807a0d8cb2dae2b" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classvar_1_1table" kindref="compound">table</ref></type>
        <definition>table var::table&lt; D &gt;::get_row</definition>
        <argsstring>(int r)</argsstring>
        <name>get_row</name>
        <param>
          <type>int</type>
          <declname>r</declname>
        </param>
        <briefdescription>
<para>Get the row as table. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>r</parametername>
</parameternamelist>
<parameterdescription>
<para></para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>table </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="includes/variables/table.hpp" line="649" column="7" bodyfile="includes/variables/table.hpp" bodystart="649" bodyend="659"/>
      </memberdef>
      <memberdef kind="function" id="classvar_1_1table_1af24d2bf9285d7bfaf5d2263576419645" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classvar_1_1table" kindref="compound">table</ref></type>
        <definition>table var::table&lt; D &gt;::get_col</definition>
        <argsstring>(std::string name)</argsstring>
        <name>get_col</name>
        <param>
          <type>std::string</type>
          <declname>name</declname>
        </param>
        <briefdescription>
<para>Get the col as table. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>name</parametername>
</parameternamelist>
<parameterdescription>
<para></para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>table </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="includes/variables/table.hpp" line="667" column="7" bodyfile="includes/variables/table.hpp" bodystart="667" bodyend="679"/>
      </memberdef>
      <memberdef kind="function" id="classvar_1_1table_1ab2ebc42048d7552e1661916c0756482d" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool var::table&lt; D &gt;::add_col</definition>
        <argsstring>(std::string col_name, std::vector&lt; D &gt; col_data)</argsstring>
        <name>add_col</name>
        <param>
          <type>std::string</type>
          <declname>col_name</declname>
        </param>
        <param>
          <type>std::vector&lt; D &gt;</type>
          <declname>col_data</declname>
        </param>
        <briefdescription>
<para>Adds new colum. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>col_name</parametername>
</parameternamelist>
<parameterdescription>
<para></para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>col_data</parametername>
</parameternamelist>
<parameterdescription>
<para></para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>true </para>
</simplesect>
<simplesect kind="return"><para>false </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="includes/variables/table.hpp" line="689" column="6" bodyfile="includes/variables/table.hpp" bodystart="689" bodyend="705"/>
      </memberdef>
      <memberdef kind="function" id="classvar_1_1table_1a5e7459882c4bd4bc29759f5fb3c1ee10" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void var::table&lt; D &gt;::show_header</definition>
        <argsstring>()</argsstring>
        <name>show_header</name>
        <briefdescription>
<para>Shows headers only. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="includes/variables/table.hpp" line="711" column="6" bodyfile="includes/variables/table.hpp" bodystart="711" bodyend="714"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-static-func">
      <memberdef kind="function" id="classvar_1_1table_1abe9eef285b846e555b9e2b4d89d82103" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>std::vector&lt; D &gt;</type>
        <definition>static std::vector&lt;D&gt; var::table&lt; D &gt;::sort_asc</definition>
        <argsstring>(std::vector&lt; D &gt; &amp;a)</argsstring>
        <name>sort_asc</name>
        <param>
          <type>std::vector&lt; D &gt; &amp;</type>
          <declname>a</declname>
        </param>
        <briefdescription>
<para>Sorts data ascending. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>a</parametername>
</parameternamelist>
<parameterdescription>
<para></para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>std::vector&lt;D&gt; </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="includes/variables/table.hpp" line="396" column="20" bodyfile="includes/variables/table.hpp" bodystart="396" bodyend="401"/>
      </memberdef>
      <memberdef kind="function" id="classvar_1_1table_1a3e3a7c5f503790050d32b6696a2c811a" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>D</type>
        <definition>static D var::table&lt; D &gt;::get_min</definition>
        <argsstring>(std::vector&lt; D &gt; a)</argsstring>
        <name>get_min</name>
        <param>
          <type>std::vector&lt; D &gt;</type>
          <declname>a</declname>
        </param>
        <briefdescription>
<para>Get the min value of vector. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>a</parametername>
</parameternamelist>
<parameterdescription>
<para></para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>D </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="includes/variables/table.hpp" line="409" column="10" bodyfile="includes/variables/table.hpp" bodystart="409" bodyend="412"/>
      </memberdef>
      <memberdef kind="function" id="classvar_1_1table_1a1abd7092b76e6122e17f891be3e46896" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>D</type>
        <definition>static D var::table&lt; D &gt;::get_max</definition>
        <argsstring>(std::vector&lt; D &gt; a)</argsstring>
        <name>get_max</name>
        <param>
          <type>std::vector&lt; D &gt;</type>
          <declname>a</declname>
        </param>
        <briefdescription>
<para>Get the max value of vector. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>a</parametername>
</parameternamelist>
<parameterdescription>
<para></para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>D </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="includes/variables/table.hpp" line="420" column="10" bodyfile="includes/variables/table.hpp" bodystart="420" bodyend="423"/>
      </memberdef>
      <memberdef kind="function" id="classvar_1_1table_1abb470d4a1f88cbfb2225084a888e28f3" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>D</type>
        <definition>static D var::table&lt; D &gt;::get_sum</definition>
        <argsstring>(std::vector&lt; D &gt; a)</argsstring>
        <name>get_sum</name>
        <param>
          <type>std::vector&lt; D &gt;</type>
          <declname>a</declname>
        </param>
        <briefdescription>
<para>Get the sum of vector. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>a</parametername>
</parameternamelist>
<parameterdescription>
<para></para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>D </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="includes/variables/table.hpp" line="431" column="10" bodyfile="includes/variables/table.hpp" bodystart="431" bodyend="434"/>
      </memberdef>
      <memberdef kind="function" id="classvar_1_1table_1a42c4b9b7209cc3b518fdc69142b23c76" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>D</type>
        <definition>static D var::table&lt; D &gt;::get_avg</definition>
        <argsstring>(std::vector&lt; D &gt; a)</argsstring>
        <name>get_avg</name>
        <param>
          <type>std::vector&lt; D &gt;</type>
          <declname>a</declname>
        </param>
        <briefdescription>
<para>Get the avg of vector. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>a</parametername>
</parameternamelist>
<parameterdescription>
<para></para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>D </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="includes/variables/table.hpp" line="442" column="10" bodyfile="includes/variables/table.hpp" bodystart="442" bodyend="445"/>
      </memberdef>
      <memberdef kind="function" id="classvar_1_1table_1af001504d15d500670e5d776148b04d6f" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>D</type>
        <definition>static D var::table&lt; D &gt;::get_var</definition>
        <argsstring>(std::vector&lt; D &gt; a)</argsstring>
        <name>get_var</name>
        <param>
          <type>std::vector&lt; D &gt;</type>
          <declname>a</declname>
        </param>
        <briefdescription>
<para>Get the variance of vector. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>a</parametername>
</parameternamelist>
<parameterdescription>
<para></para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>D </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="includes/variables/table.hpp" line="453" column="10" bodyfile="includes/variables/table.hpp" bodystart="453" bodyend="462"/>
      </memberdef>
      <memberdef kind="function" id="classvar_1_1table_1a3ece8de9eb74c17b73b322790ca0bf62" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>D</type>
        <definition>static D var::table&lt; D &gt;::get_std</definition>
        <argsstring>(std::vector&lt; D &gt; a)</argsstring>
        <name>get_std</name>
        <param>
          <type>std::vector&lt; D &gt;</type>
          <declname>a</declname>
        </param>
        <briefdescription>
<para>Get the standard diviation of vector. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>a</parametername>
</parameternamelist>
<parameterdescription>
<para></para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>D </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="includes/variables/table.hpp" line="470" column="10" bodyfile="includes/variables/table.hpp" bodystart="470" bodyend="473"/>
      </memberdef>
      <memberdef kind="function" id="classvar_1_1table_1af21b86535b597309c629804add469081" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="structvar_1_1table_1_1QR" kindref="compound">QR</ref></type>
        <definition>static QR var::table&lt; D &gt;::get_qr</definition>
        <argsstring>(std::vector&lt; D &gt; a)</argsstring>
        <name>get_qr</name>
        <param>
          <type>std::vector&lt; D &gt;</type>
          <declname>a</declname>
        </param>
        <briefdescription>
<para>Get the quartile range of a vector. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>a</parametername>
</parameternamelist>
<parameterdescription>
<para></para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>QR </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="includes/variables/table.hpp" line="481" column="11" bodyfile="includes/variables/table.hpp" bodystart="481" bodyend="491"/>
      </memberdef>
      <memberdef kind="function" id="classvar_1_1table_1a8184e4d4c340aad83524b78e6676dc8c" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>D</type>
        <definition>static D var::table&lt; D &gt;::get_r</definition>
        <argsstring>(std::vector&lt; D &gt; _x, std::vector&lt; D &gt; _y)</argsstring>
        <name>get_r</name>
        <param>
          <type>std::vector&lt; D &gt;</type>
          <declname>_x</declname>
        </param>
        <param>
          <type>std::vector&lt; D &gt;</type>
          <declname>_y</declname>
        </param>
        <briefdescription>
<para>Get the relation coefficient of two vectors. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>_x</parametername>
</parameternamelist>
<parameterdescription>
<para></para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>_y</parametername>
</parameternamelist>
<parameterdescription>
<para></para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>D </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="includes/variables/table.hpp" line="500" column="10" bodyfile="includes/variables/table.hpp" bodystart="500" bodyend="514"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
<para>table class to contain the dataframe </para>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <inheritancegraph>
      <node id="2">
        <label>std::vector&lt; T &gt;</label>
      </node>
      <node id="1">
        <label>var::table&lt; D &gt;</label>
        <link refid="classvar_1_1table"/>
        <childnode refid="2" relation="public-inheritance">
        </childnode>
      </node>
    </inheritancegraph>
    <collaborationgraph>
      <node id="3">
        <label>T</label>
      </node>
      <node id="2">
        <label>std::vector&lt; T &gt;</label>
        <childnode refid="3" relation="usage">
          <edgelabel>+elements</edgelabel>
        </childnode>
      </node>
      <node id="1">
        <label>var::table&lt; D &gt;</label>
        <link refid="classvar_1_1table"/>
        <childnode refid="2" relation="public-inheritance">
        </childnode>
      </node>
    </collaborationgraph>
    <location file="includes/variables/table.hpp" line="24" column="1" bodyfile="includes/variables/table.hpp" bodystart="25" bodyend="715"/>
    <listofallmembers>
      <member refid="classvar_1_1table_1ab2ebc42048d7552e1661916c0756482d" prot="public" virt="non-virtual"><scope>var::table</scope><name>add_col</name></member>
      <member refid="classvar_1_1table_1a215cdf3b672a7231d895f4e6c4214b64" prot="private" virt="non-virtual"><scope>var::table</scope><name>center</name></member>
      <member refid="classvar_1_1table_1aba9cc3ab7bf7f78926589af319c763a7" prot="private" virt="non-virtual"><scope>var::table</scope><name>check_header</name></member>
      <member refid="classvar_1_1table_1a55df2f9f50827b058c9b8c3bd4d38d17" prot="private" virt="non-virtual"><scope>var::table</scope><name>check_size</name></member>
      <member refid="classvar_1_1table_1a0170e1261a00394cf7017c86e6833b49" prot="private" virt="non-virtual"><scope>var::table</scope><name>col</name></member>
      <member refid="classvar_1_1table_1afa3958110fe2532e0e8f47c9281b9a90" prot="public" virt="non-virtual"><scope>var::table</scope><name>describe_all</name></member>
      <member refid="classstd_1_1vector_1a2396209900e8f592db1f0b2467f7d899" prot="public" virt="non-virtual"><scope>var::table</scope><name>elements</name></member>
      <member refid="classvar_1_1table_1a4ad03a888518a0919abcef08d9b307ea" prot="private" virt="non-virtual"><scope>var::table</scope><name>generate_line</name></member>
      <member refid="classvar_1_1table_1a2032fb3518fc73b1af05770202d61e8c" prot="private" virt="non-virtual"><scope>var::table</scope><name>generate_rows</name></member>
      <member refid="classvar_1_1table_1a42c4b9b7209cc3b518fdc69142b23c76" prot="public" virt="non-virtual"><scope>var::table</scope><name>get_avg</name></member>
      <member refid="classvar_1_1table_1a4c6b4d98de8c0e527ac5f55ce455270b" prot="private" virt="non-virtual"><scope>var::table</scope><name>get_avgs</name></member>
      <member refid="classvar_1_1table_1af24d2bf9285d7bfaf5d2263576419645" prot="public" virt="non-virtual"><scope>var::table</scope><name>get_col</name></member>
      <member refid="classvar_1_1table_1aea1482942b89d2a6410a7a69a9cb710e" prot="private" virt="non-virtual"><scope>var::table</scope><name>get_col_</name></member>
      <member refid="classvar_1_1table_1a0e5e2a6af3e5a10886c26c130ca51a0d" prot="public" virt="non-virtual"><scope>var::table</scope><name>get_col_size</name></member>
      <member refid="classvar_1_1table_1a1abd7092b76e6122e17f891be3e46896" prot="public" virt="non-virtual"><scope>var::table</scope><name>get_max</name></member>
      <member refid="classvar_1_1table_1a3e3a7c5f503790050d32b6696a2c811a" prot="public" virt="non-virtual"><scope>var::table</scope><name>get_min</name></member>
      <member refid="classvar_1_1table_1af21b86535b597309c629804add469081" prot="public" virt="non-virtual"><scope>var::table</scope><name>get_qr</name></member>
      <member refid="classvar_1_1table_1a088733e85442485729c9304329dc9195" prot="private" virt="non-virtual"><scope>var::table</scope><name>get_qrs</name></member>
      <member refid="classvar_1_1table_1a8184e4d4c340aad83524b78e6676dc8c" prot="public" virt="non-virtual"><scope>var::table</scope><name>get_r</name></member>
      <member refid="classvar_1_1table_1a13829ed8fe8ad15fe807a0d8cb2dae2b" prot="public" virt="non-virtual"><scope>var::table</scope><name>get_row</name></member>
      <member refid="classvar_1_1table_1ac129bb6a1940378e7511762ba5152857" prot="public" virt="non-virtual"><scope>var::table</scope><name>get_row_size</name></member>
      <member refid="classvar_1_1table_1a3ece8de9eb74c17b73b322790ca0bf62" prot="public" virt="non-virtual"><scope>var::table</scope><name>get_std</name></member>
      <member refid="classvar_1_1table_1a2c2a9860253cc9e72b822d35c777e749" prot="private" virt="non-virtual"><scope>var::table</scope><name>get_stds</name></member>
      <member refid="classvar_1_1table_1abb470d4a1f88cbfb2225084a888e28f3" prot="public" virt="non-virtual"><scope>var::table</scope><name>get_sum</name></member>
      <member refid="classvar_1_1table_1a85c69677672bfc6a61b0499e868c7465" prot="private" virt="non-virtual"><scope>var::table</scope><name>get_sums</name></member>
      <member refid="classvar_1_1table_1af001504d15d500670e5d776148b04d6f" prot="public" virt="non-virtual"><scope>var::table</scope><name>get_var</name></member>
      <member refid="classvar_1_1table_1a196ea90112f0e84e30ea8fa6e7b1cb98" prot="private" virt="non-virtual"><scope>var::table</scope><name>get_vars</name></member>
      <member refid="classvar_1_1table_1af238cb3f30f4e545efdc4e0e0c371cde" prot="private" virt="non-virtual"><scope>var::table</scope><name>headers</name></member>
      <member refid="classvar_1_1table_1ad326577c23b9400e0296f71aebe8d2a0" prot="public" virt="non-virtual"><scope>var::table</scope><name>operator[]</name></member>
      <member refid="classvar_1_1table_1a0b08c797c3314998239636e4840ff74e" prot="private" virt="non-virtual"><scope>var::table</scope><name>prd</name></member>
      <member refid="classvar_1_1table_1ae783c7e8063d4999c621f28a44dd215c" prot="private" virt="non-virtual"><scope>var::table</scope><name>prd</name></member>
      <member refid="classvar_1_1table_1ac3f099c46a47c6428689efefad42dcf2" prot="public" virt="non-virtual"><scope>var::table</scope><name>read_csv</name></member>
      <member refid="classvar_1_1table_1a6dd43c21c40a2c82b80fce47e8f45751" prot="private" virt="non-virtual"><scope>var::table</scope><name>row</name></member>
      <member refid="classvar_1_1table_1a4333369e4f9d6443768ffe9e21dd04ed" prot="private" virt="non-virtual"><scope>var::table</scope><name>rows</name></member>
      <member refid="classvar_1_1table_1aa287b9c7b64b4d5d8bd03e9a6a65a044" prot="public" virt="non-virtual"><scope>var::table</scope><name>save_csv</name></member>
      <member refid="classvar_1_1table_1a462865ba0a86a2e26cce1ab85b60cbbf" prot="public" virt="non-virtual"><scope>var::table</scope><name>show</name></member>
      <member refid="classvar_1_1table_1ad471ed11d98bd02b5935cc71ba911bae" prot="public" virt="non-virtual"><scope>var::table</scope><name>show</name></member>
      <member refid="classvar_1_1table_1a5e7459882c4bd4bc29759f5fb3c1ee10" prot="public" virt="non-virtual"><scope>var::table</scope><name>show_header</name></member>
      <member refid="classvar_1_1table_1abe9eef285b846e555b9e2b4d89d82103" prot="public" virt="non-virtual"><scope>var::table</scope><name>sort_asc</name></member>
      <member refid="classvar_1_1table_1ae067e021bec7ba45f14e0a6c45c6116d" prot="private" virt="non-virtual"><scope>var::table</scope><name>sz</name></member>
      <member refid="classvar_1_1table_1ada6ebdf0a90915bedfa07fc57b31a504" prot="public" virt="non-virtual"><scope>var::table</scope><name>table</name></member>
      <member refid="classvar_1_1table_1a135d46678f8916df8bcd9d4d9472fd3a" prot="public" virt="non-virtual"><scope>var::table</scope><name>~table</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
