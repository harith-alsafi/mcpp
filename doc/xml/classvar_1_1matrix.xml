<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.9.2" xml:lang="en-US">
  <compounddef id="classvar_1_1matrix" kind="class" language="C++" prot="public">
    <compoundname>var::matrix</compoundname>
    <includes local="yes">matrix.hpp</includes>
    <innerclass refid="classvar_1_1matrix_1_1Col" prot="protected">var::matrix::Col</innerclass>
    <templateparamlist>
      <param>
        <type>typename D</type>
      </param>
    </templateparamlist>
      <sectiondef kind="protected-type">
      <memberdef kind="typedef" id="classvar_1_1matrix_1a6b72a30baf5ce8386e0ea2284a1776cf" prot="protected" static="no">
        <templateparamlist>
          <param>
            <type>typename <ref refid="classvar_1_1matrix_1a3b2c5d8983bb1dcdc250768a0f0ce578" kindref="member">T</ref></type>
          </param>
        </templateparamlist>
        <type>std::vector&lt; std::vector&lt; <ref refid="classvar_1_1matrix_1a3b2c5d8983bb1dcdc250768a0f0ce578" kindref="member">T</ref> &gt; &gt;</type>
        <definition>using var::matrix&lt; D &gt;::table =  std::vector&lt;std::vector&lt;T&gt; &gt;</definition>
        <argsstring></argsstring>
        <name>table</name>
        <briefdescription>
<para>2D vector definition </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="templateparam"><parameteritem>
<parameternamelist>
<parametername>T</parametername>
</parameternamelist>
<parameterdescription>
<para></para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="includes/variables/matrix.hpp" line="53" column="13" bodyfile="includes/variables/matrix.hpp" bodystart="53" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="private-attrib">
      <memberdef kind="variable" id="classvar_1_1matrix_1aeaf9bfe82e5fadff5e7c245dc2ed7691" prot="private" static="no" mutable="no">
        <type><ref refid="classvar_1_1matrix_1a6b72a30baf5ce8386e0ea2284a1776cf" kindref="member">table</ref>&lt; D &gt;</type>
        <definition>table&lt;D&gt; var::matrix&lt; D &gt;::data</definition>
        <argsstring></argsstring>
        <name>data</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="includes/variables/matrix.hpp" line="141" column="19" bodyfile="includes/variables/matrix.hpp" bodystart="141" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classvar_1_1matrix_1aaeb36b64e9670ebf5874fc26da0cfe2a" prot="private" static="no" mutable="no">
        <type>int</type>
        <definition>int var::matrix&lt; D &gt;::_row</definition>
        <argsstring></argsstring>
        <name>_row</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="includes/variables/matrix.hpp" line="142" column="17" bodyfile="includes/variables/matrix.hpp" bodystart="142" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classvar_1_1matrix_1ab19eccf26d9fefbca395626e7790318b" prot="private" static="no" mutable="no">
        <type>int</type>
        <definition>int var::matrix&lt; D &gt;::_col</definition>
        <argsstring></argsstring>
        <name>_col</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="includes/variables/matrix.hpp" line="143" column="17" bodyfile="includes/variables/matrix.hpp" bodystart="143" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="protected-func">
      <memberdef kind="function" id="classvar_1_1matrix_1a81c4b4795406aa26c149f678603815a9" prot="protected" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void var::matrix&lt; D &gt;::check_col</definition>
        <argsstring>(int j)</argsstring>
        <name>check_col</name>
        <param>
          <type>int</type>
          <declname>j</declname>
        </param>
        <briefdescription>
<para>checks index for columns </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>j</parametername>
</parameternamelist>
<parameterdescription>
<para>colum index </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="includes/variables/matrix.hpp" line="60" column="18" bodyfile="includes/variables/matrix.hpp" bodystart="60" bodyend="64"/>
      </memberdef>
      <memberdef kind="function" id="classvar_1_1matrix_1abe65d7997f230b2ac6564850717be182" prot="protected" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void var::matrix&lt; D &gt;::check_row</definition>
        <argsstring>(int i)</argsstring>
        <name>check_row</name>
        <param>
          <type>int</type>
          <declname>i</declname>
        </param>
        <briefdescription>
<para>checks index for rows </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>i</parametername>
</parameternamelist>
<parameterdescription>
<para>row index </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="includes/variables/matrix.hpp" line="71" column="18" bodyfile="includes/variables/matrix.hpp" bodystart="71" bodyend="75"/>
      </memberdef>
      <memberdef kind="function" id="classvar_1_1matrix_1a00796c4afbd0a44f4a482c8c4f9155a3" prot="protected" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classvar_1_1matrix_1a6b72a30baf5ce8386e0ea2284a1776cf" kindref="member">table</ref>&lt; D &gt;</type>
        <definition>table&lt;D&gt; var::matrix&lt; D &gt;::TT</definition>
        <argsstring>()</argsstring>
        <name>TT</name>
        <briefdescription>
<para>Returns transpose for data. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para><computeroutput>table&lt;D&gt;</computeroutput> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="includes/variables/matrix.hpp" line="82" column="19" bodyfile="includes/variables/matrix.hpp" bodystart="82" bodyend="96"/>
      </memberdef>
      <memberdef kind="function" id="classvar_1_1matrix_1a98defd0b837085eae86da59649934392" prot="protected" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void var::matrix&lt; D &gt;::check_size</definition>
        <argsstring>(int r, int c)</argsstring>
        <name>check_size</name>
        <param>
          <type>int</type>
          <declname>r</declname>
        </param>
        <param>
          <type>int</type>
          <declname>c</declname>
        </param>
        <briefdescription>
<para>Checks other matrix size for operators. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>r</parametername>
</parameternamelist>
<parameterdescription>
<para>row <linebreak/>
 </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>c</parametername>
</parameternamelist>
<parameterdescription>
<para>colum </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="includes/variables/matrix.hpp" line="104" column="18" bodyfile="includes/variables/matrix.hpp" bodystart="104" bodyend="108"/>
      </memberdef>
      <memberdef kind="function" id="classvar_1_1matrix_1aac8393e86296c741a8e1023b329620b1" prot="protected" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>D</type>
        <definition>D var::matrix&lt; D &gt;::DET</definition>
        <argsstring>(matrix a)</argsstring>
        <name>DET</name>
        <param>
          <type><ref refid="classvar_1_1matrix" kindref="compound">matrix</ref></type>
          <declname>a</declname>
        </param>
        <briefdescription>
<para>Recursive determinant. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>a</parametername>
</parameternamelist>
<parameterdescription>
<para><computeroutput>matrix</computeroutput> type </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para><computeroutput>D</computeroutput> <linebreak/>
 </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="includes/variables/matrix.hpp" line="117" column="15" bodyfile="includes/variables/matrix.hpp" bodystart="117" bodyend="128"/>
      </memberdef>
      <memberdef kind="function" id="classvar_1_1matrix_1a54224ff2eefe0c6cd3fbeaff7a309f84" prot="protected" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void var::matrix&lt; D &gt;::square</definition>
        <argsstring>()</argsstring>
        <name>square</name>
        <briefdescription>
<para>throws exception if matrix is not a square </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="includes/variables/matrix.hpp" line="134" column="18" bodyfile="includes/variables/matrix.hpp" bodystart="134" bodyend="138"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-func">
      <memberdef kind="function" id="classvar_1_1matrix_1aaf88fb07ffd608510c2c834a925f3926" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type></type>
        <definition>var::matrix&lt; D &gt;::matrix</definition>
        <argsstring>(int r, int c)</argsstring>
        <name>matrix</name>
        <param>
          <type>int</type>
          <declname>r</declname>
        </param>
        <param>
          <type>int</type>
          <declname>c</declname>
        </param>
        <briefdescription>
<para>Construct a new matrix object. </para>
        </briefdescription>
        <detaileddescription>
<para><bold>Usage</bold>: <programlisting filename=".cpp"><codeline><highlight class="normal"><ref refid="classvar_1_1matrix" kindref="compound">var::matrix&lt;int&gt;</ref><sp/>m(2,<sp/>3);<sp/></highlight><highlight class="comment">//<sp/>2<sp/>rows,<sp/>3<sp/>colums</highlight></codeline>
</programlisting> <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>r</parametername>
</parameternamelist>
<parameterdescription>
<para>number of rows </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>c</parametername>
</parameternamelist>
<parameterdescription>
<para>number of colums </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="includes/variables/matrix.hpp" line="155" column="13" bodyfile="includes/variables/matrix.hpp" bodystart="155" bodyend="157"/>
      </memberdef>
      <memberdef kind="function" id="classvar_1_1matrix_1a1060b67ddd058f180bd4b1f304562f64" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type></type>
        <definition>var::matrix&lt; D &gt;::matrix</definition>
        <argsstring>()</argsstring>
        <name>matrix</name>
        <briefdescription>
<para>Default construct a new matrix object. </para>
        </briefdescription>
        <detaileddescription>
<para><bold>Usage</bold>: <programlisting filename=".cpp"><codeline><highlight class="normal"><ref refid="classvar_1_1matrix" kindref="compound">var::matrix&lt;int&gt;</ref><sp/>m;</highlight></codeline>
</programlisting> </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="includes/variables/matrix.hpp" line="167" column="13" bodyfile="includes/variables/matrix.hpp" bodystart="167" bodyend="167"/>
      </memberdef>
      <memberdef kind="function" id="classvar_1_1matrix_1a4b93fcfa4d64d096fd185ff1004256eb" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type></type>
        <definition>var::matrix&lt; D &gt;::matrix</definition>
        <argsstring>(std::initializer_list&lt; std::initializer_list&lt; D &gt;&gt; a)</argsstring>
        <name>matrix</name>
        <param>
          <type>std::initializer_list&lt; std::initializer_list&lt; D &gt;&gt;</type>
          <declname>a</declname>
        </param>
        <briefdescription>
<para>Construct a new matrix object. </para>
        </briefdescription>
        <detaileddescription>
<para><bold>Usage</bold>: <programlisting filename=".cpp"><codeline><highlight class="normal"><ref refid="classvar_1_1matrix" kindref="compound">var::matrix&lt;int&gt;</ref><sp/>m<sp/>=<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>{1,<sp/>2,<sp/>3},</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>{4,<sp/>5,<sp/>6},</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>{7,<sp/>8,<sp/>9}</highlight></codeline>
<codeline><highlight class="normal">};</highlight></codeline>
</programlisting></para>
<sect2 id="classvar_1_1matrix_1autotoc_md0">
<title>Getters</title>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>a</parametername>
</parameternamelist>
<parameterdescription>
<para>initializer list </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
</sect2>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="includes/variables/matrix.hpp" line="185" column="13" bodyfile="includes/variables/matrix.hpp" bodystart="185" bodyend="196"/>
      </memberdef>
      <memberdef kind="function" id="classvar_1_1matrix_1a591c6983a2637275bb1d10d2d2e1e4a5" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>int</type>
        <definition>int var::matrix&lt; D &gt;::row</definition>
        <argsstring>()</argsstring>
        <name>row</name>
        <briefdescription>
<para>Returns the number of rows. </para>
        </briefdescription>
        <detaileddescription>
<para><bold>Usage</bold>: <programlisting filename=".cpp"><codeline><highlight class="normal"><ref refid="classvar_1_1matrix" kindref="compound">var::matrix&lt;int&gt;</ref><sp/>m(2,<sp/>3);<sp/></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>r<sp/>=<sp/>m.row();</highlight></codeline>
</programlisting></para>
<para><simplesect kind="return"><para><computeroutput>int</computeroutput> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="includes/variables/matrix.hpp" line="210" column="17" bodyfile="includes/variables/matrix.hpp" bodystart="210" bodyend="212"/>
      </memberdef>
      <memberdef kind="function" id="classvar_1_1matrix_1a18f1458c2532b0aabbb3370d9556e745" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>int</type>
        <definition>int var::matrix&lt; D &gt;::col</definition>
        <argsstring>()</argsstring>
        <name>col</name>
        <briefdescription>
<para>Returns the number of columns. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para><computeroutput>int</computeroutput> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="includes/variables/matrix.hpp" line="219" column="17" bodyfile="includes/variables/matrix.hpp" bodystart="219" bodyend="221"/>
      </memberdef>
      <memberdef kind="function" id="classvar_1_1matrix_1a1c630d2e37b665b3fabcb3d76a4f8b89" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>int</type>
        <definition>int var::matrix&lt; D &gt;::size</definition>
        <argsstring>()</argsstring>
        <name>size</name>
        <briefdescription>
<para>Returns total number of elements. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para><computeroutput>int</computeroutput> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="includes/variables/matrix.hpp" line="228" column="17" bodyfile="includes/variables/matrix.hpp" bodystart="228" bodyend="230"/>
      </memberdef>
      <memberdef kind="function" id="classvar_1_1matrix_1a989e36acf06c040379a78946442eed25" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>auto</type>
        <definition>auto var::matrix&lt; D &gt;::begin</definition>
        <argsstring>()</argsstring>
        <name>begin</name>
        <briefdescription>
<para>Mainly invoked for the ranged for loop. </para>
        </briefdescription>
        <detaileddescription>
<para><bold>Usage</bold>: <programlisting filename=".cpp"><codeline><highlight class="keywordflow">for</highlight><highlight class="normal">(</highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>i:<sp/>m){</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(j:<sp/>i){</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>do<sp/>smth<sp/></highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
</programlisting></para>
<para><simplesect kind="return"><para><computeroutput>std::vector&lt;D&gt;</computeroutput> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="includes/variables/matrix.hpp" line="246" column="18" bodyfile="includes/variables/matrix.hpp" bodystart="246" bodyend="248"/>
      </memberdef>
      <memberdef kind="function" id="classvar_1_1matrix_1a905ab851aebd8b3781e6605bec99e0a8" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>auto</type>
        <definition>auto var::matrix&lt; D &gt;::end</definition>
        <argsstring>()</argsstring>
        <name>end</name>
        <briefdescription>
<para>Returns end of data. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para><computeroutput>std::vector&lt;D&gt;</computeroutput> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="includes/variables/matrix.hpp" line="255" column="18" bodyfile="includes/variables/matrix.hpp" bodystart="255" bodyend="257"/>
      </memberdef>
      <memberdef kind="function" id="classvar_1_1matrix_1a44444530f6334c9cd3f9c61c7aa91af8" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>auto</type>
        <definition>auto var::matrix&lt; D &gt;::begin</definition>
        <argsstring>() const</argsstring>
        <name>begin</name>
        <briefdescription>
<para>Returns const begin. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para><computeroutput>std::vector&lt;D&gt;</computeroutput> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="includes/variables/matrix.hpp" line="264" column="18" bodyfile="includes/variables/matrix.hpp" bodystart="264" bodyend="266"/>
      </memberdef>
      <memberdef kind="function" id="classvar_1_1matrix_1a493b344c09c695efcd3fec6065059948" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>auto</type>
        <definition>auto var::matrix&lt; D &gt;::end</definition>
        <argsstring>() const</argsstring>
        <name>end</name>
        <briefdescription>
<para>Returns const end. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para><computeroutput>std::vector&lt;D&gt;</computeroutput> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="includes/variables/matrix.hpp" line="273" column="18" bodyfile="includes/variables/matrix.hpp" bodystart="273" bodyend="275"/>
      </memberdef>
      <memberdef kind="function" id="classvar_1_1matrix_1aa27021aa738d82a6b9dde82de321f5a1" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>std::vector&lt; D &gt;</type>
        <definition>std::vector&lt;D&gt; var::matrix&lt; D &gt;::get_row</definition>
        <argsstring>(int i)</argsstring>
        <name>get_row</name>
        <param>
          <type>int</type>
          <declname>i</declname>
        </param>
        <briefdescription>
<para>Returns the row at an index. </para>
        </briefdescription>
        <detaileddescription>
<para><bold>Usage</bold>: <linebreak/>
 <programlisting filename=".cpp"><codeline><highlight class="normal"><ref refid="classvar_1_1matrix" kindref="compound">var::matrix&lt;int&gt;</ref><sp/>m(3,<sp/>3);</highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/><ref refid="classvar_1_1matrix_1a18f1458c2532b0aabbb3370d9556e745" kindref="member">col</ref><sp/>=<sp/>m.get_col(1);</highlight></codeline>
</programlisting></para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>i</parametername>
</parameternamelist>
<parameterdescription>
<para>row index <linebreak/>
 </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para><computeroutput>std::vector&lt;D&gt;</computeroutput> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="includes/variables/matrix.hpp" line="289" column="25" bodyfile="includes/variables/matrix.hpp" bodystart="289" bodyend="292"/>
      </memberdef>
      <memberdef kind="function" id="classvar_1_1matrix_1a6de49f43eb3bc3f3ed6c0b658a97605c" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>std::vector&lt; D &gt;</type>
        <definition>std::vector&lt;D&gt; var::matrix&lt; D &gt;::get_col</definition>
        <argsstring>(int j)</argsstring>
        <name>get_col</name>
        <param>
          <type>int</type>
          <declname>j</declname>
        </param>
        <briefdescription>
<para>Returns the colum at an index. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>j</parametername>
</parameternamelist>
<parameterdescription>
<para>colum index </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para><computeroutput>std::vector&lt;D&gt;</computeroutput></para>
</simplesect>
</para>
<sect2 id="classvar_1_1matrix_1autotoc_md1">
<title>Mutable methods</title>
</sect2>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="includes/variables/matrix.hpp" line="303" column="25" bodyfile="includes/variables/matrix.hpp" bodystart="303" bodyend="310"/>
      </memberdef>
      <memberdef kind="function" id="classvar_1_1matrix_1a9bc064083b67aaab190bd66e7248a5ba" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void var::matrix&lt; D &gt;::resize</definition>
        <argsstring>(int r, int c)</argsstring>
        <name>resize</name>
        <param>
          <type>int</type>
          <declname>r</declname>
        </param>
        <param>
          <type>int</type>
          <declname>c</declname>
        </param>
        <briefdescription>
<para>Resizes the matrix. </para>
        </briefdescription>
        <detaileddescription>
<para><bold>Usage</bold>: <programlisting filename=".cpp"><codeline><highlight class="normal">m.resize(3,<sp/>3);</highlight></codeline>
</programlisting></para>
<para>!!! warning &quot;Warning&quot; <linebreak/>
 <preformatted>
    This resets all elements in the matrix
</preformatted></para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>r</parametername>
</parameternamelist>
<parameterdescription>
<para>number of rows </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>c</parametername>
</parameternamelist>
<parameterdescription>
<para>number of colums </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="includes/variables/matrix.hpp" line="330" column="18" bodyfile="includes/variables/matrix.hpp" bodystart="330" bodyend="341"/>
      </memberdef>
      <memberdef kind="function" id="classvar_1_1matrix_1aa141055a5f25f5d62dd26ae0e915f6af" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void var::matrix&lt; D &gt;::push_row</definition>
        <argsstring>(const std::vector&lt; D &gt; &amp;a)</argsstring>
        <name>push_row</name>
        <param>
          <type>const std::vector&lt; D &gt; &amp;</type>
          <declname>a</declname>
        </param>
        <briefdescription>
<para>Inserts row at the end or the matrix. </para>
        </briefdescription>
        <detaileddescription>
<para><bold>Usage</bold>: <linebreak/>
 <programlisting filename=".cpp"><codeline><highlight class="normal">m.push_row({1,<sp/>2,<sp/>3});</highlight></codeline>
</programlisting></para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>a</parametername>
</parameternamelist>
<parameterdescription>
<para>row vector </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="includes/variables/matrix.hpp" line="353" column="18" bodyfile="includes/variables/matrix.hpp" bodystart="353" bodyend="365"/>
      </memberdef>
      <memberdef kind="function" id="classvar_1_1matrix_1a9dd2a2ef22d04744482819c77b80f031" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void var::matrix&lt; D &gt;::push_col</definition>
        <argsstring>(const std::vector&lt; D &gt; &amp;a)</argsstring>
        <name>push_col</name>
        <param>
          <type>const std::vector&lt; D &gt; &amp;</type>
          <declname>a</declname>
        </param>
        <briefdescription>
<para>Inserts column at the end of the matrix. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>a</parametername>
</parameternamelist>
<parameterdescription>
<para>colum vector </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="includes/variables/matrix.hpp" line="372" column="18" bodyfile="includes/variables/matrix.hpp" bodystart="372" bodyend="388"/>
      </memberdef>
      <memberdef kind="function" id="classvar_1_1matrix_1a3a4469d94dd4fd0235aaf555d3c4cc13" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void var::matrix&lt; D &gt;::insert_row</definition>
        <argsstring>(int i, std::vector&lt; D &gt; a)</argsstring>
        <name>insert_row</name>
        <param>
          <type>int</type>
          <declname>i</declname>
        </param>
        <param>
          <type>std::vector&lt; D &gt;</type>
          <declname>a</declname>
        </param>
        <briefdescription>
<para>Inserts row at specefic index. </para>
        </briefdescription>
        <detaileddescription>
<para><bold>Usage</bold>: <linebreak/>
 <programlisting filename=".cpp"><codeline><highlight class="normal">m.insert_row(1,<sp/>{1,<sp/>2,<sp/>3});</highlight></codeline>
</programlisting></para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>i</parametername>
</parameternamelist>
<parameterdescription>
<para>row index </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>a</parametername>
</parameternamelist>
<parameterdescription>
<para>row vector </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="includes/variables/matrix.hpp" line="401" column="18" bodyfile="includes/variables/matrix.hpp" bodystart="401" bodyend="410"/>
      </memberdef>
      <memberdef kind="function" id="classvar_1_1matrix_1abe7454d75f120bebef0ee5c2c1b262a7" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void var::matrix&lt; D &gt;::insert_col</definition>
        <argsstring>(int j, const std::vector&lt; D &gt; &amp;a)</argsstring>
        <name>insert_col</name>
        <param>
          <type>int</type>
          <declname>j</declname>
        </param>
        <param>
          <type>const std::vector&lt; D &gt; &amp;</type>
          <declname>a</declname>
        </param>
        <briefdescription>
<para>Inserts column at specefic index. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>j</parametername>
</parameternamelist>
<parameterdescription>
<para>column index </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>a</parametername>
</parameternamelist>
<parameterdescription>
<para>colum vector </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="includes/variables/matrix.hpp" line="418" column="18" bodyfile="includes/variables/matrix.hpp" bodystart="418" bodyend="430"/>
      </memberdef>
      <memberdef kind="function" id="classvar_1_1matrix_1adc31cf9d718ccf376c2309c4f6a5f6dd" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void var::matrix&lt; D &gt;::pop_row</definition>
        <argsstring>()</argsstring>
        <name>pop_row</name>
        <briefdescription>
<para>Removes last row. </para>
        </briefdescription>
        <detaileddescription>
<para><bold>Usage</bold>: <programlisting filename=".cpp"><codeline><highlight class="normal">m.pop_row(1);</highlight></codeline>
</programlisting> </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="includes/variables/matrix.hpp" line="441" column="18" bodyfile="includes/variables/matrix.hpp" bodystart="441" bodyend="447"/>
      </memberdef>
      <memberdef kind="function" id="classvar_1_1matrix_1a9043393e205545106f58c316da68df80" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void var::matrix&lt; D &gt;::pop_col</definition>
        <argsstring>()</argsstring>
        <name>pop_col</name>
        <briefdescription>
<para>removes last colum </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="includes/variables/matrix.hpp" line="453" column="18" bodyfile="includes/variables/matrix.hpp" bodystart="453" bodyend="461"/>
      </memberdef>
      <memberdef kind="function" id="classvar_1_1matrix_1a1ee2cc11235c4798bb70ed96a0fbf29a" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void var::matrix&lt; D &gt;::erase_row</definition>
        <argsstring>(int i)</argsstring>
        <name>erase_row</name>
        <param>
          <type>int</type>
          <declname>i</declname>
        </param>
        <briefdescription>
<para>Erase row at index. </para>
        </briefdescription>
        <detaileddescription>
<para><bold>Usage</bold>: <programlisting filename=".cpp"><codeline><highlight class="normal">m.erase_row(1);</highlight></codeline>
</programlisting></para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>i</parametername>
</parameternamelist>
<parameterdescription>
<para>row index </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="includes/variables/matrix.hpp" line="473" column="18" bodyfile="includes/variables/matrix.hpp" bodystart="473" bodyend="477"/>
      </memberdef>
      <memberdef kind="function" id="classvar_1_1matrix_1a148b9d63ce138a9478aa8adb9e217986" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void var::matrix&lt; D &gt;::erase_col</definition>
        <argsstring>(int j)</argsstring>
        <name>erase_col</name>
        <param>
          <type>int</type>
          <declname>j</declname>
        </param>
        <briefdescription>
<para>Erases column at index. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>j</parametername>
</parameternamelist>
<parameterdescription>
<para>colum index </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="includes/variables/matrix.hpp" line="485" column="18" bodyfile="includes/variables/matrix.hpp" bodystart="485" bodyend="491"/>
      </memberdef>
      <memberdef kind="function" id="classvar_1_1matrix_1a84d1beb5e7704a6e7799351bf0623657" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void var::matrix&lt; D &gt;::sort_rows</definition>
        <argsstring>(int d=1)</argsstring>
        <name>sort_rows</name>
        <param>
          <type>int</type>
          <declname>d</declname>
          <defval>1</defval>
        </param>
        <briefdescription>
<para>Sorts all rows. </para>
        </briefdescription>
        <detaileddescription>
<para><bold>Usage</bold>: <programlisting filename=".cpp"><codeline><highlight class="normal">m.sort_rows();</highlight></codeline>
</programlisting></para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>d</parametername>
</parameternamelist>
<parameterdescription>
<para>details are shown below </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>&lt;tt&gt;d</parametername>
</parameternamelist>
<parameterdescription>
<para>= 1 is accending order $\rightarrow$ <computeroutput>sort_rows();</computeroutput> <linebreak/>
 <linebreak/>
 </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>&lt;tt&gt;d</parametername>
</parameternamelist>
<parameterdescription>
<para>= 0 is decending order $\rightarrow$ <computeroutput>sort_rows(0);</computeroutput> </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="includes/variables/matrix.hpp" line="505" column="18" bodyfile="includes/variables/matrix.hpp" bodystart="505" bodyend="509"/>
      </memberdef>
      <memberdef kind="function" id="classvar_1_1matrix_1a06fa30fdba1e861449593cfd6e1398dc" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void var::matrix&lt; D &gt;::sort_cols</definition>
        <argsstring>(int d=1)</argsstring>
        <name>sort_cols</name>
        <param>
          <type>int</type>
          <declname>d</declname>
          <defval>1</defval>
        </param>
        <briefdescription>
<para>Sorts all columns. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>d</parametername>
</parameternamelist>
<parameterdescription>
<para>details are shown below </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>&lt;tt&gt;d</parametername>
</parameternamelist>
<parameterdescription>
<para>= 1 is accending order $\rightarrow$ <computeroutput>sort_rows();</computeroutput> <linebreak/>
 <linebreak/>
 </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>&lt;tt&gt;d</parametername>
</parameternamelist>
<parameterdescription>
<para>= 0 is decending order $\rightarrow$ <computeroutput>sort_rows(0);</computeroutput> </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="includes/variables/matrix.hpp" line="518" column="18" bodyfile="includes/variables/matrix.hpp" bodystart="518" bodyend="522"/>
      </memberdef>
      <memberdef kind="function" id="classvar_1_1matrix_1acc872e3d984edf32f474e221c749e632" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void var::matrix&lt; D &gt;::sort_row</definition>
        <argsstring>(int i, int d=1)</argsstring>
        <name>sort_row</name>
        <param>
          <type>int</type>
          <declname>i</declname>
        </param>
        <param>
          <type>int</type>
          <declname>d</declname>
          <defval>1</defval>
        </param>
        <briefdescription>
<para>Sorts rows at specefic index. </para>
        </briefdescription>
        <detaileddescription>
<para><bold>Usage</bold>: <programlisting filename=".cpp"><codeline><highlight class="normal">m.sort_row(0,<sp/>0);</highlight></codeline>
</programlisting></para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>i</parametername>
</parameternamelist>
<parameterdescription>
<para>row index </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>d</parametername>
</parameternamelist>
<parameterdescription>
<para>details are shown below </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>&lt;tt&gt;d</parametername>
</parameternamelist>
<parameterdescription>
<para>= 1 is accending order $\rightarrow$ <computeroutput>sort_rows();</computeroutput> <linebreak/>
 <linebreak/>
 </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>&lt;tt&gt;d</parametername>
</parameternamelist>
<parameterdescription>
<para>= 0 is decending order $\rightarrow$ <computeroutput>sort_rows(0);</computeroutput> </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="includes/variables/matrix.hpp" line="537" column="18" bodyfile="includes/variables/matrix.hpp" bodystart="537" bodyend="546"/>
      </memberdef>
      <memberdef kind="function" id="classvar_1_1matrix_1aaaa052e8ec27a392848bd750b34f35bf" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void var::matrix&lt; D &gt;::sort_col</definition>
        <argsstring>(int j, int d=1)</argsstring>
        <name>sort_col</name>
        <param>
          <type>int</type>
          <declname>j</declname>
        </param>
        <param>
          <type>int</type>
          <declname>d</declname>
          <defval>1</defval>
        </param>
        <briefdescription>
<para>Sorts colum at specefic index. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>j</parametername>
</parameternamelist>
<parameterdescription>
<para>colum index <linebreak/>
 </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>d</parametername>
</parameternamelist>
<parameterdescription>
<para>details are shown below </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>&lt;tt&gt;d</parametername>
</parameternamelist>
<parameterdescription>
<para>= 1 is accending order $\rightarrow$ <computeroutput>sort_rows();</computeroutput> <linebreak/>
 <linebreak/>
 </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>&lt;tt&gt;d</parametername>
</parameternamelist>
<parameterdescription>
<para>= 0 is decending order $\rightarrow$ <computeroutput>sort_rows(0);</computeroutput> </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="includes/variables/matrix.hpp" line="556" column="18" bodyfile="includes/variables/matrix.hpp" bodystart="556" bodyend="561"/>
      </memberdef>
      <memberdef kind="function" id="classvar_1_1matrix_1ac87b738aed9ec1933d057b7b3d8eb07c" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename LAMBDA</type>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void var::matrix&lt; D &gt;::row_op</definition>
        <argsstring>(int i, LAMBDA f)</argsstring>
        <name>row_op</name>
        <param>
          <type>int</type>
          <declname>i</declname>
        </param>
        <param>
          <type>LAMBDA</type>
          <declname>f</declname>
        </param>
        <briefdescription>
<para>Does operations on specefic rows. </para>
        </briefdescription>
        <detaileddescription>
<para><bold>Usage</bold>: <programlisting filename=".cpp"><codeline><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>f<sp/>=<sp/>[](</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>A){</highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>A*2+3;};</highlight></codeline>
<codeline><highlight class="normal">m.row_op(1,<sp/>f);</highlight></codeline>
</programlisting></para>
<para><parameterlist kind="templateparam"><parameteritem>
<parameternamelist>
<parametername>LAMBDA</parametername>
</parameternamelist>
<parameterdescription>
<para><computeroutput>std::function</computeroutput> </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>i</parametername>
</parameternamelist>
<parameterdescription>
<para>colum index </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>f</parametername>
</parameternamelist>
<parameterdescription>
<para>function to change colum elements </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="includes/variables/matrix.hpp" line="577" column="18" bodyfile="includes/variables/matrix.hpp" bodystart="577" bodyend="582"/>
      </memberdef>
      <memberdef kind="function" id="classvar_1_1matrix_1ab841b2356b699bcea97baccf5971d834" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename LAMBDA</type>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void var::matrix&lt; D &gt;::col_op</definition>
        <argsstring>(int j, LAMBDA f)</argsstring>
        <name>col_op</name>
        <param>
          <type>int</type>
          <declname>j</declname>
        </param>
        <param>
          <type>LAMBDA</type>
          <declname>f</declname>
        </param>
        <briefdescription>
<para>Does operations on a specefic colum. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="templateparam"><parameteritem>
<parameternamelist>
<parametername>LAMBDA</parametername>
</parameternamelist>
<parameterdescription>
<para><computeroutput>std::function</computeroutput> </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>j</parametername>
</parameternamelist>
<parameterdescription>
<para>colum index </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>f</parametername>
</parameternamelist>
<parameterdescription>
<para>function to change colum elements</para>
</parameterdescription>
</parameteritem>
</parameterlist>
!!! warning &quot;Exception&quot; <linebreak/>
 <preformatted>
    All row and colum operations (inserting, removing .. etc) throw an <computeroutput>std::invalid_argument</computeroutput> if&amp;#58;  
        1. There is a size mismatch  
        2. Invalid index 
</preformatted> </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="includes/variables/matrix.hpp" line="600" column="18" bodyfile="includes/variables/matrix.hpp" bodystart="600" bodyend="605"/>
      </memberdef>
      <memberdef kind="function" id="classvar_1_1matrix_1a9eac7bafdfd06437d0b86931335fb194" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void var::matrix&lt; D &gt;::turn_to</definition>
        <argsstring>(D n)</argsstring>
        <name>turn_to</name>
        <param>
          <type>D</type>
          <declname>n</declname>
        </param>
        <briefdescription>
<para>Converts all elements to n. </para>
        </briefdescription>
        <detaileddescription>
<para><bold>Usage</bold>: <programlisting filename=".cpp"><codeline><highlight class="normal">m.turn_to(1);<sp/></highlight></codeline>
</programlisting></para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>n</parametername>
</parameternamelist>
<parameterdescription>
<para>the specifeid variable</para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
<sect2 id="classvar_1_1matrix_1autotoc_md2">
<title>Immutable methods</title>
</sect2>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="includes/variables/matrix.hpp" line="620" column="18" bodyfile="includes/variables/matrix.hpp" bodystart="620" bodyend="626"/>
      </memberdef>
      <memberdef kind="function" id="classvar_1_1matrix_1af58bf7e07cebde78a2e0ad99acd5deeb" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>D</type>
        <definition>D var::matrix&lt; D &gt;::sum</definition>
        <argsstring>()</argsstring>
        <name>sum</name>
        <briefdescription>
<para>Sum of all elements. </para>
        </briefdescription>
        <detaileddescription>
<para><bold>Usage</bold>: <programlisting filename=".cpp"><codeline><highlight class="keyword">auto</highlight><highlight class="normal"><sp/><ref refid="classvar_1_1matrix_1af58bf7e07cebde78a2e0ad99acd5deeb" kindref="member">sum</ref><sp/>=<sp/>m.sum();</highlight></codeline>
</programlisting></para>
<para><simplesect kind="return"><para><computeroutput>D</computeroutput> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="includes/variables/matrix.hpp" line="638" column="15" bodyfile="includes/variables/matrix.hpp" bodystart="638" bodyend="646"/>
      </memberdef>
      <memberdef kind="function" id="classvar_1_1matrix_1a3a7b528f131d95929df267501b461183" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>D</type>
        <definition>D var::matrix&lt; D &gt;::tr</definition>
        <argsstring>()</argsstring>
        <name>tr</name>
        <briefdescription>
<para>Trace of a matrix. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para><computeroutput>D</computeroutput> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="includes/variables/matrix.hpp" line="653" column="15" bodyfile="includes/variables/matrix.hpp" bodystart="653" bodyend="660"/>
      </memberdef>
      <memberdef kind="function" id="classvar_1_1matrix_1af4104a0aa496424fc75256263e412d9f" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>D</type>
        <definition>D var::matrix&lt; D &gt;::det</definition>
        <argsstring>()</argsstring>
        <name>det</name>
        <briefdescription>
<para>Returns the determinant. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para><computeroutput>D</computeroutput> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="includes/variables/matrix.hpp" line="667" column="15" bodyfile="includes/variables/matrix.hpp" bodystart="667" bodyend="670"/>
      </memberdef>
      <memberdef kind="function" id="classvar_1_1matrix_1a3b2c5d8983bb1dcdc250768a0f0ce578" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classvar_1_1matrix" kindref="compound">matrix</ref></type>
        <definition>matrix var::matrix&lt; D &gt;::T</definition>
        <argsstring>()</argsstring>
        <name>T</name>
        <briefdescription>
<para>Transpose of a matrix. </para>
        </briefdescription>
        <detaileddescription>
<para><bold>Usage</bold>: <programlisting filename=".cpp"><codeline><highlight class="normal"><ref refid="classvar_1_1matrix" kindref="compound">var::matrix&lt;int&gt;</ref><sp/>m(3,<sp/>3);</highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/><ref refid="classvar_1_1matrix_1a3b2c5d8983bb1dcdc250768a0f0ce578" kindref="member">T</ref><sp/>=<sp/>m.<ref refid="classvar_1_1matrix_1a3b2c5d8983bb1dcdc250768a0f0ce578" kindref="member">T</ref>();</highlight></codeline>
</programlisting></para>
<para><simplesect kind="return"><para><computeroutput>matrix</computeroutput> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="includes/variables/matrix.hpp" line="683" column="20" bodyfile="includes/variables/matrix.hpp" bodystart="683" bodyend="688"/>
      </memberdef>
      <memberdef kind="function" id="classvar_1_1matrix_1ac97536b4f94f1dd614fb6267c07dd2b7" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classvar_1_1matrix" kindref="compound">matrix</ref></type>
        <definition>matrix var::matrix&lt; D &gt;::cofactor</definition>
        <argsstring>()</argsstring>
        <name>cofactor</name>
        <briefdescription>
<para>Returns cofactor matrix. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>matrix </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="includes/variables/matrix.hpp" line="696" column="20" bodyfile="includes/variables/matrix.hpp" bodystart="696" bodyend="706"/>
      </memberdef>
      <memberdef kind="function" id="classvar_1_1matrix_1aeb8bdaf174065f964bdd63e3c55ec5e2" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classvar_1_1matrix" kindref="compound">matrix</ref></type>
        <definition>matrix var::matrix&lt; D &gt;::M</definition>
        <argsstring>(int i, int j, matrix &amp;other)</argsstring>
        <name>M</name>
        <param>
          <type>int</type>
          <declname>i</declname>
        </param>
        <param>
          <type>int</type>
          <declname>j</declname>
        </param>
        <param>
          <type><ref refid="classvar_1_1matrix" kindref="compound">matrix</ref> &amp;</type>
          <declname>other</declname>
        </param>
        <briefdescription>
<para>Minor of a matrix. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>i</parametername>
</parameternamelist>
<parameterdescription>
<para>row index </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>j</parametername>
</parameternamelist>
<parameterdescription>
<para>colum index </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>other</parametername>
</parameternamelist>
<parameterdescription>
<para><computeroutput>matrix</computeroutput> type </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para><computeroutput>matrix</computeroutput> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="includes/variables/matrix.hpp" line="717" column="20" bodyfile="includes/variables/matrix.hpp" bodystart="717" bodyend="734"/>
      </memberdef>
      <memberdef kind="function" id="classvar_1_1matrix_1ad78a167d7400fac474fd03cf3363defb" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classvar_1_1matrix" kindref="compound">matrix</ref></type>
        <definition>matrix var::matrix&lt; D &gt;::adj</definition>
        <argsstring>()</argsstring>
        <name>adj</name>
        <briefdescription>
<para>Adjugate of a matrix. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para><computeroutput>matrix</computeroutput> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="includes/variables/matrix.hpp" line="741" column="20" bodyfile="includes/variables/matrix.hpp" bodystart="741" bodyend="745"/>
      </memberdef>
      <memberdef kind="function" id="classvar_1_1matrix_1a8a66138dce5fdb1b27a89349a8fd8539" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classvar_1_1matrix" kindref="compound">matrix</ref></type>
        <definition>matrix var::matrix&lt; D &gt;::inv</definition>
        <argsstring>()</argsstring>
        <name>inv</name>
        <briefdescription>
<para>Returns inverse of a matrix. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para><computeroutput>matrix</computeroutput> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="includes/variables/matrix.hpp" line="752" column="20" bodyfile="includes/variables/matrix.hpp" bodystart="752" bodyend="755"/>
      </memberdef>
      <memberdef kind="function" id="classvar_1_1matrix_1a5e7cc7e40124be3bd4a1accfacd68b05" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classvar_1_1matrix" kindref="compound">matrix</ref></type>
        <definition>matrix var::matrix&lt; D &gt;::rref</definition>
        <argsstring>()</argsstring>
        <name>rref</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="includes/variables/matrix.hpp" line="758" column="20" bodyfile="includes/variables/matrix.hpp" bodystart="758" bodyend="760"/>
      </memberdef>
      <memberdef kind="function" id="classvar_1_1matrix_1a69ffd8772f87c70f5a8e525b0e4dd71f" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool var::matrix&lt; D &gt;::is_square</definition>
        <argsstring>()</argsstring>
        <name>is_square</name>
        <briefdescription>
<para>Checks if matrix is square. </para>
        </briefdescription>
        <detaileddescription>
<para><bold>Usage</bold>: <programlisting filename=".cpp"><codeline><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="classvar_1_1matrix_1a54224ff2eefe0c6cd3fbeaff7a309f84" kindref="member">square</ref><sp/>=<sp/>m.is_square();</highlight></codeline>
</programlisting></para>
<para><simplesect kind="return"><para>true </para>
</simplesect>
<simplesect kind="return"><para>false </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="includes/variables/matrix.hpp" line="773" column="18" bodyfile="includes/variables/matrix.hpp" bodystart="773" bodyend="775"/>
      </memberdef>
      <memberdef kind="function" id="classvar_1_1matrix_1a9db378f2cc8cc600c2137dcea6fadfc9" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool var::matrix&lt; D &gt;::is_empty</definition>
        <argsstring>()</argsstring>
        <name>is_empty</name>
        <briefdescription>
<para>Returns if the matrix is empty or not. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>true </para>
</simplesect>
<simplesect kind="return"><para>false </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="includes/variables/matrix.hpp" line="783" column="18" bodyfile="includes/variables/matrix.hpp" bodystart="783" bodyend="785"/>
      </memberdef>
      <memberdef kind="function" id="classvar_1_1matrix_1a34a63853e0456af7ba9bbd7e10b4cfc6" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool var::matrix&lt; D &gt;::is_identity</definition>
        <argsstring>()</argsstring>
        <name>is_identity</name>
        <briefdescription>
<para>Checks if matrix is an identity matrix. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>true </para>
</simplesect>
<simplesect kind="return"><para>false</para>
</simplesect>
</para>
<sect2 id="classvar_1_1matrix_1autotoc_md3">
<title>Operator methods</title>
</sect2>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="includes/variables/matrix.hpp" line="796" column="18" bodyfile="includes/variables/matrix.hpp" bodystart="796" bodyend="815"/>
      </memberdef>
      <memberdef kind="function" id="classvar_1_1matrix_1a2d10297e28d8c6c6264d6f174003d193" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classvar_1_1matrix_1_1Col" kindref="compound">Col</ref></type>
        <definition>Col var::matrix&lt; D &gt;::operator[]</definition>
        <argsstring>(int i)</argsstring>
        <name>operator[]</name>
        <param>
          <type>int</type>
          <declname>i</declname>
        </param>
        <briefdescription>
<para>[][] operator for <computeroutput>matrix</computeroutput> </para>
        </briefdescription>
        <detaileddescription>
<para><bold>Usage</bold>: <programlisting filename=".cpp"><codeline><highlight class="comment">//<sp/>m[row][col]</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">m[0][0]<sp/>=<sp/>5;</highlight></codeline>
</programlisting></para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>i</parametername>
</parameternamelist>
<parameterdescription>
<para>row index </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para><computeroutput>Col</computeroutput> which then returns &amp;D </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="includes/variables/matrix.hpp" line="831" column="17" bodyfile="includes/variables/matrix.hpp" bodystart="831" bodyend="833"/>
      </memberdef>
      <memberdef kind="function" id="classvar_1_1matrix_1aaee49a5cde5696ed5d41b2ed5b15d69a" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classvar_1_1matrix" kindref="compound">matrix</ref></type>
        <definition>matrix var::matrix&lt; D &gt;::operator+</definition>
        <argsstring>(matrix const &amp;other)</argsstring>
        <name>operator+</name>
        <param>
          <type><ref refid="classvar_1_1matrix" kindref="compound">matrix</ref> const &amp;</type>
          <declname>other</declname>
        </param>
        <briefdescription>
<para>Matrix addition. </para>
        </briefdescription>
        <detaileddescription>
<para><bold>Usage</bold>: <programlisting filename=".cpp"><codeline><highlight class="comment">//<sp/>m1<sp/>and<sp/>m2<sp/>are<sp/>matrix<sp/>class</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>summed<sp/>=<sp/>m1+m2;<sp/></highlight></codeline>
</programlisting></para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>other</parametername>
</parameternamelist>
<parameterdescription>
<para></para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para><computeroutput>matrix</computeroutput> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="includes/variables/matrix.hpp" line="849" column="20" bodyfile="includes/variables/matrix.hpp" bodystart="849" bodyend="859"/>
      </memberdef>
      <memberdef kind="function" id="classvar_1_1matrix_1af312c6541557412aa40999381c832613" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classvar_1_1matrix" kindref="compound">matrix</ref></type>
        <definition>matrix var::matrix&lt; D &gt;::operator+</definition>
        <argsstring>(D n)</argsstring>
        <name>operator+</name>
        <param>
          <type>D</type>
          <declname>n</declname>
        </param>
        <briefdescription>
<para><computeroutput>matrix+var</computeroutput> as <computeroutput>var</computeroutput> as added to all elements </para>
        </briefdescription>
        <detaileddescription>
<para><bold>Usage</bold>: <programlisting filename=".cpp"><codeline><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>m_add_2<sp/>=<sp/>m+2;<sp/></highlight><highlight class="comment">//<sp/>or<sp/>2+m<sp/></highlight></codeline>
</programlisting></para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>n</parametername>
</parameternamelist>
<parameterdescription>
<para>variable to add </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para><computeroutput>matrix</computeroutput> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="includes/variables/matrix.hpp" line="872" column="20" bodyfile="includes/variables/matrix.hpp" bodystart="872" bodyend="880"/>
      </memberdef>
      <memberdef kind="function" id="classvar_1_1matrix_1a277209428c74da8a84cc6e59b540cead" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classvar_1_1matrix" kindref="compound">matrix</ref></type>
        <definition>matrix var::matrix&lt; D &gt;::operator-</definition>
        <argsstring>()</argsstring>
        <name>operator-</name>
        <briefdescription>
<para>Negative of a matrix. </para>
        </briefdescription>
        <detaileddescription>
<para><bold>Usage</bold>: <programlisting filename=".cpp"><codeline><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>negated<sp/>=<sp/>-m;<sp/></highlight></codeline>
</programlisting></para>
<para><simplesect kind="return"><para><computeroutput>matrix</computeroutput> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="includes/variables/matrix.hpp" line="905" column="20" bodyfile="includes/variables/matrix.hpp" bodystart="905" bodyend="913"/>
      </memberdef>
      <memberdef kind="function" id="classvar_1_1matrix_1a20cab5ed13b35173c242b6fe0909eda6" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classvar_1_1matrix" kindref="compound">matrix</ref></type>
        <definition>matrix var::matrix&lt; D &gt;::operator-</definition>
        <argsstring>(matrix const &amp;other)</argsstring>
        <name>operator-</name>
        <param>
          <type><ref refid="classvar_1_1matrix" kindref="compound">matrix</ref> const &amp;</type>
          <declname>other</declname>
        </param>
        <briefdescription>
<para>Matrix subtraction. </para>
        </briefdescription>
        <detaileddescription>
<para><bold>Usage</bold>: <programlisting filename=".cpp"><codeline><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>subtracted<sp/>=<sp/>m1-m2;<sp/></highlight></codeline>
</programlisting></para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>other</parametername>
</parameternamelist>
<parameterdescription>
<para><computeroutput>matrix</computeroutput> </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>matrix </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="includes/variables/matrix.hpp" line="926" column="20" bodyfile="includes/variables/matrix.hpp" bodystart="926" bodyend="935"/>
      </memberdef>
      <memberdef kind="function" id="classvar_1_1matrix_1a0052ad415d92a84561c48b2f94c5159b" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classvar_1_1matrix" kindref="compound">matrix</ref></type>
        <definition>matrix var::matrix&lt; D &gt;::operator-</definition>
        <argsstring>(D n)</argsstring>
        <name>operator-</name>
        <param>
          <type>D</type>
          <declname>n</declname>
        </param>
        <briefdescription>
<para><computeroutput>matrix-var</computeroutput> </para>
        </briefdescription>
        <detaileddescription>
<para><bold>Usage</bold>: <programlisting filename=".cpp"><codeline><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>m_take_2<sp/>=<sp/>m-2;<sp/></highlight><highlight class="comment">//<sp/>or<sp/>2-m<sp/></highlight></codeline>
</programlisting></para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>n</parametername>
</parameternamelist>
<parameterdescription>
<para>variable to add </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para><computeroutput>matrix</computeroutput> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="includes/variables/matrix.hpp" line="948" column="20" bodyfile="includes/variables/matrix.hpp" bodystart="948" bodyend="956"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="friend">
      <memberdef kind="friend" id="classvar_1_1matrix_1acd798c4a5acd27adbadc15b750d13aa9" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classvar_1_1matrix" kindref="compound">matrix</ref></type>
        <definition>matrix operator+</definition>
        <argsstring>(D n, matrix &amp;other)</argsstring>
        <name>operator+</name>
        <param>
          <type>D</type>
          <declname>n</declname>
        </param>
        <param>
          <type><ref refid="classvar_1_1matrix" kindref="compound">matrix</ref> &amp;</type>
          <declname>other</declname>
        </param>
        <briefdescription>
<para><computeroutput>var+matrix</computeroutput> </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>n</parametername>
</parameternamelist>
<parameterdescription>
<para>variable to add </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>other</parametername>
</parameternamelist>
<parameterdescription>
<para><computeroutput>matrix</computeroutput> </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para><computeroutput>matrix</computeroutput> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="includes/variables/matrix.hpp" line="889" column="27" bodyfile="includes/variables/matrix.hpp" bodystart="889" bodyend="891"/>
      </memberdef>
      <memberdef kind="friend" id="classvar_1_1matrix_1aec0f669b84ef6cbf1197fda5328d2d3e" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classvar_1_1matrix" kindref="compound">matrix</ref></type>
        <definition>matrix operator-</definition>
        <argsstring>(D n, matrix &amp;other)</argsstring>
        <name>operator-</name>
        <param>
          <type>D</type>
          <declname>n</declname>
        </param>
        <param>
          <type><ref refid="classvar_1_1matrix" kindref="compound">matrix</ref> &amp;</type>
          <declname>other</declname>
        </param>
        <briefdescription>
<para><computeroutput>var-matrix</computeroutput> </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>n</parametername>
</parameternamelist>
<parameterdescription>
<para>variable to add </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>other</parametername>
</parameternamelist>
<parameterdescription>
<para><computeroutput>matrix</computeroutput> </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para><computeroutput>matrix</computeroutput> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="includes/variables/matrix.hpp" line="965" column="27" bodyfile="includes/variables/matrix.hpp" bodystart="965" bodyend="968"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
<para>Class for 2d matrix of objects. </para>
    </briefdescription>
    <detaileddescription>
<para><parameterlist kind="templateparam"><parameteritem>
<parameternamelist>
<parametername>D</parametername>
</parameternamelist>
<parameterdescription>
<para>can be of any type </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
    </detaileddescription>
    <collaborationgraph>
      <node id="1">
        <label>var::matrix&lt; D &gt;</label>
        <link refid="classvar_1_1matrix"/>
      </node>
    </collaborationgraph>
    <location file="includes/variables/matrix.hpp" line="13" column="16" bodyfile="includes/variables/matrix.hpp" bodystart="14" bodyend="1278"/>
    <listofallmembers>
      <member refid="classvar_1_1matrix_1ab19eccf26d9fefbca395626e7790318b" prot="private" virt="non-virtual"><scope>var::matrix</scope><name>_col</name></member>
      <member refid="classvar_1_1matrix_1aaeb36b64e9670ebf5874fc26da0cfe2a" prot="private" virt="non-virtual"><scope>var::matrix</scope><name>_row</name></member>
      <member refid="classvar_1_1matrix_1ad78a167d7400fac474fd03cf3363defb" prot="public" virt="non-virtual"><scope>var::matrix</scope><name>adj</name></member>
      <member refid="classvar_1_1matrix_1a989e36acf06c040379a78946442eed25" prot="public" virt="non-virtual"><scope>var::matrix</scope><name>begin</name></member>
      <member refid="classvar_1_1matrix_1a44444530f6334c9cd3f9c61c7aa91af8" prot="public" virt="non-virtual"><scope>var::matrix</scope><name>begin</name></member>
      <member refid="classvar_1_1matrix_1a81c4b4795406aa26c149f678603815a9" prot="protected" virt="non-virtual"><scope>var::matrix</scope><name>check_col</name></member>
      <member refid="classvar_1_1matrix_1abe65d7997f230b2ac6564850717be182" prot="protected" virt="non-virtual"><scope>var::matrix</scope><name>check_row</name></member>
      <member refid="classvar_1_1matrix_1a98defd0b837085eae86da59649934392" prot="protected" virt="non-virtual"><scope>var::matrix</scope><name>check_size</name></member>
      <member refid="classvar_1_1matrix_1ac97536b4f94f1dd614fb6267c07dd2b7" prot="public" virt="non-virtual"><scope>var::matrix</scope><name>cofactor</name></member>
      <member refid="classvar_1_1matrix_1a18f1458c2532b0aabbb3370d9556e745" prot="public" virt="non-virtual"><scope>var::matrix</scope><name>col</name></member>
      <member refid="classvar_1_1matrix_1ab841b2356b699bcea97baccf5971d834" prot="public" virt="non-virtual"><scope>var::matrix</scope><name>col_op</name></member>
      <member refid="classvar_1_1matrix_1aeaf9bfe82e5fadff5e7c245dc2ed7691" prot="private" virt="non-virtual"><scope>var::matrix</scope><name>data</name></member>
      <member refid="classvar_1_1matrix_1af4104a0aa496424fc75256263e412d9f" prot="public" virt="non-virtual"><scope>var::matrix</scope><name>det</name></member>
      <member refid="classvar_1_1matrix_1aac8393e86296c741a8e1023b329620b1" prot="protected" virt="non-virtual"><scope>var::matrix</scope><name>DET</name></member>
      <member refid="classvar_1_1matrix_1a905ab851aebd8b3781e6605bec99e0a8" prot="public" virt="non-virtual"><scope>var::matrix</scope><name>end</name></member>
      <member refid="classvar_1_1matrix_1a493b344c09c695efcd3fec6065059948" prot="public" virt="non-virtual"><scope>var::matrix</scope><name>end</name></member>
      <member refid="classvar_1_1matrix_1a148b9d63ce138a9478aa8adb9e217986" prot="public" virt="non-virtual"><scope>var::matrix</scope><name>erase_col</name></member>
      <member refid="classvar_1_1matrix_1a1ee2cc11235c4798bb70ed96a0fbf29a" prot="public" virt="non-virtual"><scope>var::matrix</scope><name>erase_row</name></member>
      <member refid="classvar_1_1matrix_1a6de49f43eb3bc3f3ed6c0b658a97605c" prot="public" virt="non-virtual"><scope>var::matrix</scope><name>get_col</name></member>
      <member refid="classvar_1_1matrix_1aa27021aa738d82a6b9dde82de321f5a1" prot="public" virt="non-virtual"><scope>var::matrix</scope><name>get_row</name></member>
      <member refid="classvar_1_1matrix_1abe7454d75f120bebef0ee5c2c1b262a7" prot="public" virt="non-virtual"><scope>var::matrix</scope><name>insert_col</name></member>
      <member refid="classvar_1_1matrix_1a3a4469d94dd4fd0235aaf555d3c4cc13" prot="public" virt="non-virtual"><scope>var::matrix</scope><name>insert_row</name></member>
      <member refid="classvar_1_1matrix_1a8a66138dce5fdb1b27a89349a8fd8539" prot="public" virt="non-virtual"><scope>var::matrix</scope><name>inv</name></member>
      <member refid="classvar_1_1matrix_1a9db378f2cc8cc600c2137dcea6fadfc9" prot="public" virt="non-virtual"><scope>var::matrix</scope><name>is_empty</name></member>
      <member refid="classvar_1_1matrix_1a34a63853e0456af7ba9bbd7e10b4cfc6" prot="public" virt="non-virtual"><scope>var::matrix</scope><name>is_identity</name></member>
      <member refid="classvar_1_1matrix_1a69ffd8772f87c70f5a8e525b0e4dd71f" prot="public" virt="non-virtual"><scope>var::matrix</scope><name>is_square</name></member>
      <member refid="classvar_1_1matrix_1aeb8bdaf174065f964bdd63e3c55ec5e2" prot="public" virt="non-virtual"><scope>var::matrix</scope><name>M</name></member>
      <member refid="classvar_1_1matrix_1aaf88fb07ffd608510c2c834a925f3926" prot="public" virt="non-virtual"><scope>var::matrix</scope><name>matrix</name></member>
      <member refid="classvar_1_1matrix_1a1060b67ddd058f180bd4b1f304562f64" prot="public" virt="non-virtual"><scope>var::matrix</scope><name>matrix</name></member>
      <member refid="classvar_1_1matrix_1a4b93fcfa4d64d096fd185ff1004256eb" prot="public" virt="non-virtual"><scope>var::matrix</scope><name>matrix</name></member>
      <member refid="classvar_1_1matrix_1aaee49a5cde5696ed5d41b2ed5b15d69a" prot="public" virt="non-virtual"><scope>var::matrix</scope><name>operator+</name></member>
      <member refid="classvar_1_1matrix_1af312c6541557412aa40999381c832613" prot="public" virt="non-virtual"><scope>var::matrix</scope><name>operator+</name></member>
      <member refid="classvar_1_1matrix_1acd798c4a5acd27adbadc15b750d13aa9" prot="public" virt="non-virtual"><scope>var::matrix</scope><name>operator+</name></member>
      <member refid="classvar_1_1matrix_1a277209428c74da8a84cc6e59b540cead" prot="public" virt="non-virtual"><scope>var::matrix</scope><name>operator-</name></member>
      <member refid="classvar_1_1matrix_1a20cab5ed13b35173c242b6fe0909eda6" prot="public" virt="non-virtual"><scope>var::matrix</scope><name>operator-</name></member>
      <member refid="classvar_1_1matrix_1a0052ad415d92a84561c48b2f94c5159b" prot="public" virt="non-virtual"><scope>var::matrix</scope><name>operator-</name></member>
      <member refid="classvar_1_1matrix_1aec0f669b84ef6cbf1197fda5328d2d3e" prot="public" virt="non-virtual"><scope>var::matrix</scope><name>operator-</name></member>
      <member refid="classvar_1_1matrix_1a2d10297e28d8c6c6264d6f174003d193" prot="public" virt="non-virtual"><scope>var::matrix</scope><name>operator[]</name></member>
      <member refid="classvar_1_1matrix_1a9043393e205545106f58c316da68df80" prot="public" virt="non-virtual"><scope>var::matrix</scope><name>pop_col</name></member>
      <member refid="classvar_1_1matrix_1adc31cf9d718ccf376c2309c4f6a5f6dd" prot="public" virt="non-virtual"><scope>var::matrix</scope><name>pop_row</name></member>
      <member refid="classvar_1_1matrix_1a9dd2a2ef22d04744482819c77b80f031" prot="public" virt="non-virtual"><scope>var::matrix</scope><name>push_col</name></member>
      <member refid="classvar_1_1matrix_1aa141055a5f25f5d62dd26ae0e915f6af" prot="public" virt="non-virtual"><scope>var::matrix</scope><name>push_row</name></member>
      <member refid="classvar_1_1matrix_1a9bc064083b67aaab190bd66e7248a5ba" prot="public" virt="non-virtual"><scope>var::matrix</scope><name>resize</name></member>
      <member refid="classvar_1_1matrix_1a591c6983a2637275bb1d10d2d2e1e4a5" prot="public" virt="non-virtual"><scope>var::matrix</scope><name>row</name></member>
      <member refid="classvar_1_1matrix_1ac87b738aed9ec1933d057b7b3d8eb07c" prot="public" virt="non-virtual"><scope>var::matrix</scope><name>row_op</name></member>
      <member refid="classvar_1_1matrix_1a5e7cc7e40124be3bd4a1accfacd68b05" prot="public" virt="non-virtual"><scope>var::matrix</scope><name>rref</name></member>
      <member refid="classvar_1_1matrix_1a1c630d2e37b665b3fabcb3d76a4f8b89" prot="public" virt="non-virtual"><scope>var::matrix</scope><name>size</name></member>
      <member refid="classvar_1_1matrix_1aaaa052e8ec27a392848bd750b34f35bf" prot="public" virt="non-virtual"><scope>var::matrix</scope><name>sort_col</name></member>
      <member refid="classvar_1_1matrix_1a06fa30fdba1e861449593cfd6e1398dc" prot="public" virt="non-virtual"><scope>var::matrix</scope><name>sort_cols</name></member>
      <member refid="classvar_1_1matrix_1acc872e3d984edf32f474e221c749e632" prot="public" virt="non-virtual"><scope>var::matrix</scope><name>sort_row</name></member>
      <member refid="classvar_1_1matrix_1a84d1beb5e7704a6e7799351bf0623657" prot="public" virt="non-virtual"><scope>var::matrix</scope><name>sort_rows</name></member>
      <member refid="classvar_1_1matrix_1a54224ff2eefe0c6cd3fbeaff7a309f84" prot="protected" virt="non-virtual"><scope>var::matrix</scope><name>square</name></member>
      <member refid="classvar_1_1matrix_1af58bf7e07cebde78a2e0ad99acd5deeb" prot="public" virt="non-virtual"><scope>var::matrix</scope><name>sum</name></member>
      <member refid="classvar_1_1matrix_1a3b2c5d8983bb1dcdc250768a0f0ce578" prot="public" virt="non-virtual"><scope>var::matrix</scope><name>T</name></member>
      <member refid="classvar_1_1matrix_1a6b72a30baf5ce8386e0ea2284a1776cf" prot="protected" virt="non-virtual"><scope>var::matrix</scope><name>table</name></member>
      <member refid="classvar_1_1matrix_1a3a7b528f131d95929df267501b461183" prot="public" virt="non-virtual"><scope>var::matrix</scope><name>tr</name></member>
      <member refid="classvar_1_1matrix_1a00796c4afbd0a44f4a482c8c4f9155a3" prot="protected" virt="non-virtual"><scope>var::matrix</scope><name>TT</name></member>
      <member refid="classvar_1_1matrix_1a9eac7bafdfd06437d0b86931335fb194" prot="public" virt="non-virtual"><scope>var::matrix</scope><name>turn_to</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
