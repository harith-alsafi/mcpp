<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.9.2" xml:lang="en-US">
  <compounddef id="classvar_1_1matrix" kind="class" language="C++" prot="public">
    <compoundname>var::matrix</compoundname>
    <includes local="yes">matrix.hpp</includes>
    <innerclass refid="classvar_1_1matrix_1_1Col" prot="protected">var::matrix::Col</innerclass>
    <innerclass refid="structvar_1_1matrix_1_1LU" prot="public">var::matrix::LU</innerclass>
    <templateparamlist>
      <param>
        <type>typename D</type>
      </param>
    </templateparamlist>
      <sectiondef kind="protected-type">
      <memberdef kind="typedef" id="classvar_1_1matrix_1a6b72a30baf5ce8386e0ea2284a1776cf" prot="protected" static="no">
        <templateparamlist>
          <param>
            <type>typename <ref refid="classvar_1_1matrix_1a3b2c5d8983bb1dcdc250768a0f0ce578" kindref="member">T</ref></type>
          </param>
        </templateparamlist>
        <type>std::vector&lt; std::vector&lt; <ref refid="classvar_1_1matrix_1a3b2c5d8983bb1dcdc250768a0f0ce578" kindref="member">T</ref> &gt; &gt;</type>
        <definition>using var::matrix&lt; D &gt;::table =  std::vector&lt;std::vector&lt;T&gt; &gt;</definition>
        <argsstring></argsstring>
        <name>table</name>
        <briefdescription>
<para>2D vector definition </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="templateparam"><parameteritem>
<parameternamelist>
<parametername>T</parametername>
</parameternamelist>
<parameterdescription>
<para></para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="includes/variables/matrix.hpp" line="52" column="13" bodyfile="includes/variables/matrix.hpp" bodystart="52" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="private-attrib">
      <memberdef kind="variable" id="classvar_1_1matrix_1aeaf9bfe82e5fadff5e7c245dc2ed7691" prot="private" static="no" mutable="no">
        <type><ref refid="classvar_1_1matrix_1a6b72a30baf5ce8386e0ea2284a1776cf" kindref="member">table</ref>&lt; D &gt;</type>
        <definition>table&lt;D&gt; var::matrix&lt; D &gt;::data</definition>
        <argsstring></argsstring>
        <name>data</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="includes/variables/matrix.hpp" line="166" column="19" bodyfile="includes/variables/matrix.hpp" bodystart="166" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classvar_1_1matrix_1aaeb36b64e9670ebf5874fc26da0cfe2a" prot="private" static="no" mutable="no">
        <type>int</type>
        <definition>int var::matrix&lt; D &gt;::_row</definition>
        <argsstring></argsstring>
        <name>_row</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="includes/variables/matrix.hpp" line="167" column="17" bodyfile="includes/variables/matrix.hpp" bodystart="167" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classvar_1_1matrix_1ab19eccf26d9fefbca395626e7790318b" prot="private" static="no" mutable="no">
        <type>int</type>
        <definition>int var::matrix&lt; D &gt;::_col</definition>
        <argsstring></argsstring>
        <name>_col</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="includes/variables/matrix.hpp" line="168" column="17" bodyfile="includes/variables/matrix.hpp" bodystart="168" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="protected-func">
      <memberdef kind="function" id="classvar_1_1matrix_1a81c4b4795406aa26c149f678603815a9" prot="protected" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void var::matrix&lt; D &gt;::check_col</definition>
        <argsstring>(int j)</argsstring>
        <name>check_col</name>
        <param>
          <type>int</type>
          <declname>j</declname>
        </param>
        <briefdescription>
<para>checks index for columns </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>j</parametername>
</parameternamelist>
<parameterdescription>
<para>column index </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="includes/variables/matrix.hpp" line="59" column="18" bodyfile="includes/variables/matrix.hpp" bodystart="59" bodyend="63"/>
      </memberdef>
      <memberdef kind="function" id="classvar_1_1matrix_1abe65d7997f230b2ac6564850717be182" prot="protected" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void var::matrix&lt; D &gt;::check_row</definition>
        <argsstring>(int i)</argsstring>
        <name>check_row</name>
        <param>
          <type>int</type>
          <declname>i</declname>
        </param>
        <briefdescription>
<para>checks index for rows </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>i</parametername>
</parameternamelist>
<parameterdescription>
<para>row index </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="includes/variables/matrix.hpp" line="70" column="18" bodyfile="includes/variables/matrix.hpp" bodystart="70" bodyend="74"/>
      </memberdef>
      <memberdef kind="function" id="classvar_1_1matrix_1a00796c4afbd0a44f4a482c8c4f9155a3" prot="protected" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classvar_1_1matrix_1a6b72a30baf5ce8386e0ea2284a1776cf" kindref="member">table</ref>&lt; D &gt;</type>
        <definition>table&lt;D&gt; var::matrix&lt; D &gt;::TT</definition>
        <argsstring>()</argsstring>
        <name>TT</name>
        <briefdescription>
<para>Returns transpose for data. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para><computeroutput>table&lt;D&gt;</computeroutput> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="includes/variables/matrix.hpp" line="81" column="19" bodyfile="includes/variables/matrix.hpp" bodystart="81" bodyend="95"/>
      </memberdef>
      <memberdef kind="function" id="classvar_1_1matrix_1a98defd0b837085eae86da59649934392" prot="protected" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void var::matrix&lt; D &gt;::check_size</definition>
        <argsstring>(int r, int c)</argsstring>
        <name>check_size</name>
        <param>
          <type>int</type>
          <declname>r</declname>
        </param>
        <param>
          <type>int</type>
          <declname>c</declname>
        </param>
        <briefdescription>
<para>Checks other matrix size for operators. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>r</parametername>
</parameternamelist>
<parameterdescription>
<para>row <linebreak/>
 </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>c</parametername>
</parameternamelist>
<parameterdescription>
<para>column </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="includes/variables/matrix.hpp" line="103" column="18" bodyfile="includes/variables/matrix.hpp" bodystart="103" bodyend="107"/>
      </memberdef>
      <memberdef kind="function" id="classvar_1_1matrix_1a23843a10260f18c0a8ee950a4c8ba0be" prot="protected" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classvar_1_1matrix" kindref="compound">matrix</ref></type>
        <definition>matrix var::matrix&lt; D &gt;::MM</definition>
        <argsstring>(int i, int j, matrix &amp;other)</argsstring>
        <name>MM</name>
        <param>
          <type>int</type>
          <declname>i</declname>
        </param>
        <param>
          <type>int</type>
          <declname>j</declname>
        </param>
        <param>
          <type><ref refid="classvar_1_1matrix" kindref="compound">matrix</ref> &amp;</type>
          <declname>other</declname>
        </param>
        <briefdescription>
<para>Protected minor (used in <computeroutput>DET</computeroutput>) </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>i</parametername>
</parameternamelist>
<parameterdescription>
<para>row index </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>j</parametername>
</parameternamelist>
<parameterdescription>
<para>column index </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>other</parametername>
</parameternamelist>
<parameterdescription>
<para><computeroutput>matrix</computeroutput> </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para><computeroutput>matrix</computeroutput> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="includes/variables/matrix.hpp" line="117" column="20" bodyfile="includes/variables/matrix.hpp" bodystart="117" bodyend="134"/>
      </memberdef>
      <memberdef kind="function" id="classvar_1_1matrix_1aac8393e86296c741a8e1023b329620b1" prot="protected" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>D</type>
        <definition>D var::matrix&lt; D &gt;::DET</definition>
        <argsstring>(matrix a)</argsstring>
        <name>DET</name>
        <param>
          <type><ref refid="classvar_1_1matrix" kindref="compound">matrix</ref></type>
          <declname>a</declname>
        </param>
        <briefdescription>
<para>Recursive determinant. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>a</parametername>
</parameternamelist>
<parameterdescription>
<para><computeroutput>matrix</computeroutput> type </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para><computeroutput>D</computeroutput> <linebreak/>
 </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="includes/variables/matrix.hpp" line="142" column="15" bodyfile="includes/variables/matrix.hpp" bodystart="142" bodyend="153"/>
      </memberdef>
      <memberdef kind="function" id="classvar_1_1matrix_1a54224ff2eefe0c6cd3fbeaff7a309f84" prot="protected" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void var::matrix&lt; D &gt;::square</definition>
        <argsstring>()</argsstring>
        <name>square</name>
        <briefdescription>
<para>throws exception if matrix is not a square </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="includes/variables/matrix.hpp" line="159" column="18" bodyfile="includes/variables/matrix.hpp" bodystart="159" bodyend="163"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-func">
      <memberdef kind="function" id="classvar_1_1matrix_1aaf88fb07ffd608510c2c834a925f3926" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type></type>
        <definition>var::matrix&lt; D &gt;::matrix</definition>
        <argsstring>(int r, int c)</argsstring>
        <name>matrix</name>
        <param>
          <type>int</type>
          <declname>r</declname>
        </param>
        <param>
          <type>int</type>
          <declname>c</declname>
        </param>
        <briefdescription>
<para>Construct a new matrix object. </para>
        </briefdescription>
        <detaileddescription>
<para><bold>Usage</bold>: <programlisting filename=".cpp"><codeline><highlight class="normal"><ref refid="classvar_1_1matrix" kindref="compound">var::matrix&lt;int&gt;</ref><sp/>m(2,<sp/>3);<sp/></highlight><highlight class="comment">//<sp/>2<sp/>rows,<sp/>3<sp/>colums</highlight></codeline>
</programlisting> <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>r</parametername>
</parameternamelist>
<parameterdescription>
<para>number of rows </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>c</parametername>
</parameternamelist>
<parameterdescription>
<para>number of colums </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="includes/variables/matrix.hpp" line="211" column="13" bodyfile="includes/variables/matrix.hpp" bodystart="211" bodyend="213"/>
      </memberdef>
      <memberdef kind="function" id="classvar_1_1matrix_1a1060b67ddd058f180bd4b1f304562f64" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type></type>
        <definition>var::matrix&lt; D &gt;::matrix</definition>
        <argsstring>()</argsstring>
        <name>matrix</name>
        <briefdescription>
<para>Default construct a new matrix object. </para>
        </briefdescription>
        <detaileddescription>
<para><bold>Usage</bold>: <programlisting filename=".cpp"><codeline><highlight class="normal"><ref refid="classvar_1_1matrix" kindref="compound">var::matrix&lt;int&gt;</ref><sp/>m;</highlight></codeline>
</programlisting> </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="includes/variables/matrix.hpp" line="223" column="13" bodyfile="includes/variables/matrix.hpp" bodystart="223" bodyend="223"/>
      </memberdef>
      <memberdef kind="function" id="classvar_1_1matrix_1a4b93fcfa4d64d096fd185ff1004256eb" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type></type>
        <definition>var::matrix&lt; D &gt;::matrix</definition>
        <argsstring>(std::initializer_list&lt; std::initializer_list&lt; D &gt;&gt; a)</argsstring>
        <name>matrix</name>
        <param>
          <type>std::initializer_list&lt; std::initializer_list&lt; D &gt;&gt;</type>
          <declname>a</declname>
        </param>
        <briefdescription>
<para>Construct a new matrix object. </para>
        </briefdescription>
        <detaileddescription>
<para><bold>Usage</bold>: <programlisting filename=".cpp"><codeline><highlight class="normal"><ref refid="classvar_1_1matrix" kindref="compound">var::matrix&lt;int&gt;</ref><sp/>m<sp/>=<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>{1,<sp/>2,<sp/>3},</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>{4,<sp/>5,<sp/>6},</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>{7,<sp/>8,<sp/>9}</highlight></codeline>
<codeline><highlight class="normal">};</highlight></codeline>
</programlisting></para>
<sect2 id="classvar_1_1matrix_1autotoc_md0">
<title>Getters</title>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>a</parametername>
</parameternamelist>
<parameterdescription>
<para>initializer list </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
</sect2>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="includes/variables/matrix.hpp" line="241" column="13" bodyfile="includes/variables/matrix.hpp" bodystart="241" bodyend="252"/>
      </memberdef>
      <memberdef kind="function" id="classvar_1_1matrix_1a591c6983a2637275bb1d10d2d2e1e4a5" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>int</type>
        <definition>int var::matrix&lt; D &gt;::row</definition>
        <argsstring>()</argsstring>
        <name>row</name>
        <briefdescription>
<para>Returns the number of rows. </para>
        </briefdescription>
        <detaileddescription>
<para><bold>Usage</bold>: <programlisting filename=".cpp"><codeline><highlight class="normal"><ref refid="classvar_1_1matrix" kindref="compound">var::matrix&lt;int&gt;</ref><sp/>m(2,<sp/>3);<sp/></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>r<sp/>=<sp/>m.row();</highlight></codeline>
</programlisting></para>
<para><simplesect kind="return"><para><computeroutput>int</computeroutput> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="includes/variables/matrix.hpp" line="265" column="17" bodyfile="includes/variables/matrix.hpp" bodystart="265" bodyend="267"/>
      </memberdef>
      <memberdef kind="function" id="classvar_1_1matrix_1a18f1458c2532b0aabbb3370d9556e745" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>int</type>
        <definition>int var::matrix&lt; D &gt;::col</definition>
        <argsstring>()</argsstring>
        <name>col</name>
        <briefdescription>
<para>Returns the number of columns. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para><computeroutput>int</computeroutput> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="includes/variables/matrix.hpp" line="274" column="17" bodyfile="includes/variables/matrix.hpp" bodystart="274" bodyend="276"/>
      </memberdef>
      <memberdef kind="function" id="classvar_1_1matrix_1a1c630d2e37b665b3fabcb3d76a4f8b89" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>int</type>
        <definition>int var::matrix&lt; D &gt;::size</definition>
        <argsstring>()</argsstring>
        <name>size</name>
        <briefdescription>
<para>Returns total number of elements. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para><computeroutput>int</computeroutput> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="includes/variables/matrix.hpp" line="283" column="17" bodyfile="includes/variables/matrix.hpp" bodystart="283" bodyend="285"/>
      </memberdef>
      <memberdef kind="function" id="classvar_1_1matrix_1a989e36acf06c040379a78946442eed25" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>auto</type>
        <definition>auto var::matrix&lt; D &gt;::begin</definition>
        <argsstring>()</argsstring>
        <name>begin</name>
        <briefdescription>
<para>Mainly invoked for the ranged for loop. </para>
        </briefdescription>
        <detaileddescription>
<para><bold>Usage</bold>: <programlisting filename=".cpp"><codeline><highlight class="keywordflow">for</highlight><highlight class="normal">(</highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>i:<sp/>m){</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(j:<sp/>i){</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>do<sp/>smth<sp/></highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
</programlisting></para>
<para><simplesect kind="return"><para><computeroutput>std::vector&lt;D&gt;</computeroutput> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="includes/variables/matrix.hpp" line="301" column="18" bodyfile="includes/variables/matrix.hpp" bodystart="301" bodyend="303"/>
      </memberdef>
      <memberdef kind="function" id="classvar_1_1matrix_1a905ab851aebd8b3781e6605bec99e0a8" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>auto</type>
        <definition>auto var::matrix&lt; D &gt;::end</definition>
        <argsstring>()</argsstring>
        <name>end</name>
        <briefdescription>
<para>Returns end of data. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para><computeroutput>std::vector&lt;D&gt;</computeroutput> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="includes/variables/matrix.hpp" line="310" column="18" bodyfile="includes/variables/matrix.hpp" bodystart="310" bodyend="312"/>
      </memberdef>
      <memberdef kind="function" id="classvar_1_1matrix_1a44444530f6334c9cd3f9c61c7aa91af8" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>auto</type>
        <definition>auto var::matrix&lt; D &gt;::begin</definition>
        <argsstring>() const</argsstring>
        <name>begin</name>
        <briefdescription>
<para>Returns const begin. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para><computeroutput>std::vector&lt;D&gt;</computeroutput> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="includes/variables/matrix.hpp" line="319" column="18" bodyfile="includes/variables/matrix.hpp" bodystart="319" bodyend="321"/>
      </memberdef>
      <memberdef kind="function" id="classvar_1_1matrix_1a493b344c09c695efcd3fec6065059948" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>auto</type>
        <definition>auto var::matrix&lt; D &gt;::end</definition>
        <argsstring>() const</argsstring>
        <name>end</name>
        <briefdescription>
<para>Returns const end. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para><computeroutput>std::vector&lt;D&gt;</computeroutput> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="includes/variables/matrix.hpp" line="328" column="18" bodyfile="includes/variables/matrix.hpp" bodystart="328" bodyend="330"/>
      </memberdef>
      <memberdef kind="function" id="classvar_1_1matrix_1ae1b45b32d3db9d173a5a689b8616866f" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>D</type>
        <definition>D var::matrix&lt; D &gt;::get_element</definition>
        <argsstring>(int i, int j)</argsstring>
        <name>get_element</name>
        <param>
          <type>int</type>
          <declname>i</declname>
        </param>
        <param>
          <type>int</type>
          <declname>j</declname>
        </param>
        <briefdescription>
<para>Get the element object. </para>
        </briefdescription>
        <detaileddescription>
<para><itemizedlist>
<listitem><para>Unlike the <computeroutput>[]</computeroutput> operator this does index checking</para>
</listitem></itemizedlist>
</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>i</parametername>
</parameternamelist>
<parameterdescription>
<para>row index </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>j</parametername>
</parameternamelist>
<parameterdescription>
<para>column index </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para><computeroutput>D</computeroutput> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="includes/variables/matrix.hpp" line="341" column="15" bodyfile="includes/variables/matrix.hpp" bodystart="341" bodyend="345"/>
      </memberdef>
      <memberdef kind="function" id="classvar_1_1matrix_1aa27021aa738d82a6b9dde82de321f5a1" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>std::vector&lt; D &gt;</type>
        <definition>std::vector&lt;D&gt; var::matrix&lt; D &gt;::get_row</definition>
        <argsstring>(int i)</argsstring>
        <name>get_row</name>
        <param>
          <type>int</type>
          <declname>i</declname>
        </param>
        <briefdescription>
<para>Returns the row at an index. </para>
        </briefdescription>
        <detaileddescription>
<para><bold>Usage</bold>: <linebreak/>
 <programlisting filename=".cpp"><codeline><highlight class="normal"><ref refid="classvar_1_1matrix" kindref="compound">var::matrix&lt;int&gt;</ref><sp/>m(3,<sp/>3);</highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/><ref refid="classvar_1_1matrix_1a18f1458c2532b0aabbb3370d9556e745" kindref="member">col</ref><sp/>=<sp/>m.get_col(1);</highlight></codeline>
</programlisting></para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>i</parametername>
</parameternamelist>
<parameterdescription>
<para>row index <linebreak/>
 </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para><computeroutput>std::vector&lt;D&gt;</computeroutput> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="includes/variables/matrix.hpp" line="359" column="25" bodyfile="includes/variables/matrix.hpp" bodystart="359" bodyend="362"/>
      </memberdef>
      <memberdef kind="function" id="classvar_1_1matrix_1a6de49f43eb3bc3f3ed6c0b658a97605c" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>std::vector&lt; D &gt;</type>
        <definition>std::vector&lt;D&gt; var::matrix&lt; D &gt;::get_col</definition>
        <argsstring>(int j)</argsstring>
        <name>get_col</name>
        <param>
          <type>int</type>
          <declname>j</declname>
        </param>
        <briefdescription>
<para>Returns the column at an index. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>j</parametername>
</parameternamelist>
<parameterdescription>
<para>column index </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para><computeroutput>std::vector&lt;D&gt;</computeroutput></para>
</simplesect>
</para>
<sect2 id="classvar_1_1matrix_1autotoc_md1">
<title>Mutable methods</title>
</sect2>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="includes/variables/matrix.hpp" line="373" column="25" bodyfile="includes/variables/matrix.hpp" bodystart="373" bodyend="380"/>
      </memberdef>
      <memberdef kind="function" id="classvar_1_1matrix_1a9bc064083b67aaab190bd66e7248a5ba" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void var::matrix&lt; D &gt;::resize</definition>
        <argsstring>(int r, int c)</argsstring>
        <name>resize</name>
        <param>
          <type>int</type>
          <declname>r</declname>
        </param>
        <param>
          <type>int</type>
          <declname>c</declname>
        </param>
        <briefdescription>
<para>Resizes the matrix. </para>
        </briefdescription>
        <detaileddescription>
<para><bold>Usage</bold>: <programlisting filename=".cpp"><codeline><highlight class="normal">m.resize(3,<sp/>3);</highlight></codeline>
</programlisting></para>
<para>!!! warning &quot;Warning&quot; <linebreak/>
 <preformatted>
    This resets all elements in the matrix
</preformatted></para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>r</parametername>
</parameternamelist>
<parameterdescription>
<para>number of rows </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>c</parametername>
</parameternamelist>
<parameterdescription>
<para>number of colums </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="includes/variables/matrix.hpp" line="398" column="18" bodyfile="includes/variables/matrix.hpp" bodystart="398" bodyend="409"/>
      </memberdef>
      <memberdef kind="function" id="classvar_1_1matrix_1a3c1bf3836d3d6b650675e9c4ba642651" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void var::matrix&lt; D &gt;::push_row</definition>
        <argsstring>(std::vector&lt; D &gt; a)</argsstring>
        <name>push_row</name>
        <param>
          <type>std::vector&lt; D &gt;</type>
          <declname>a</declname>
        </param>
        <briefdescription>
<para>Inserts row at the end or the matrix. </para>
        </briefdescription>
        <detaileddescription>
<para><bold>Usage</bold>: <linebreak/>
 <programlisting filename=".cpp"><codeline><highlight class="normal">m.push_row({1,<sp/>2,<sp/>3});</highlight></codeline>
</programlisting></para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>a</parametername>
</parameternamelist>
<parameterdescription>
<para>row vector </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="includes/variables/matrix.hpp" line="421" column="18" bodyfile="includes/variables/matrix.hpp" bodystart="421" bodyend="433"/>
      </memberdef>
      <memberdef kind="function" id="classvar_1_1matrix_1aca98d7a8c56c5afd964ba30b6cff7bfb" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void var::matrix&lt; D &gt;::push_col</definition>
        <argsstring>(std::vector&lt; D &gt; a)</argsstring>
        <name>push_col</name>
        <param>
          <type>std::vector&lt; D &gt;</type>
          <declname>a</declname>
        </param>
        <briefdescription>
<para>Inserts column at the end of the matrix. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>a</parametername>
</parameternamelist>
<parameterdescription>
<para>column vector </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="includes/variables/matrix.hpp" line="440" column="18" bodyfile="includes/variables/matrix.hpp" bodystart="440" bodyend="456"/>
      </memberdef>
      <memberdef kind="function" id="classvar_1_1matrix_1a3a4469d94dd4fd0235aaf555d3c4cc13" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void var::matrix&lt; D &gt;::insert_row</definition>
        <argsstring>(int i, std::vector&lt; D &gt; a)</argsstring>
        <name>insert_row</name>
        <param>
          <type>int</type>
          <declname>i</declname>
        </param>
        <param>
          <type>std::vector&lt; D &gt;</type>
          <declname>a</declname>
        </param>
        <briefdescription>
<para>Inserts row at specefic index. </para>
        </briefdescription>
        <detaileddescription>
<para><bold>Usage</bold>: <linebreak/>
 <programlisting filename=".cpp"><codeline><highlight class="normal">m.insert_row(1,<sp/>{1,<sp/>2,<sp/>3});</highlight></codeline>
</programlisting></para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>i</parametername>
</parameternamelist>
<parameterdescription>
<para>row index </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>a</parametername>
</parameternamelist>
<parameterdescription>
<para>row vector </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="includes/variables/matrix.hpp" line="469" column="18" bodyfile="includes/variables/matrix.hpp" bodystart="469" bodyend="478"/>
      </memberdef>
      <memberdef kind="function" id="classvar_1_1matrix_1a3804122082a2fb003338f62021c405e4" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void var::matrix&lt; D &gt;::insert_col</definition>
        <argsstring>(int j, std::vector&lt; D &gt; a)</argsstring>
        <name>insert_col</name>
        <param>
          <type>int</type>
          <declname>j</declname>
        </param>
        <param>
          <type>std::vector&lt; D &gt;</type>
          <declname>a</declname>
        </param>
        <briefdescription>
<para>Inserts column at specefic index. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>j</parametername>
</parameternamelist>
<parameterdescription>
<para>column index </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>a</parametername>
</parameternamelist>
<parameterdescription>
<para>column vector </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="includes/variables/matrix.hpp" line="486" column="18" bodyfile="includes/variables/matrix.hpp" bodystart="486" bodyend="498"/>
      </memberdef>
      <memberdef kind="function" id="classvar_1_1matrix_1adc31cf9d718ccf376c2309c4f6a5f6dd" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void var::matrix&lt; D &gt;::pop_row</definition>
        <argsstring>()</argsstring>
        <name>pop_row</name>
        <briefdescription>
<para>Removes last row. </para>
        </briefdescription>
        <detaileddescription>
<para><bold>Usage</bold>: <programlisting filename=".cpp"><codeline><highlight class="normal">m.pop_row(1);</highlight></codeline>
</programlisting> </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="includes/variables/matrix.hpp" line="509" column="18" bodyfile="includes/variables/matrix.hpp" bodystart="509" bodyend="515"/>
      </memberdef>
      <memberdef kind="function" id="classvar_1_1matrix_1a9043393e205545106f58c316da68df80" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void var::matrix&lt; D &gt;::pop_col</definition>
        <argsstring>()</argsstring>
        <name>pop_col</name>
        <briefdescription>
<para>removes last column </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="includes/variables/matrix.hpp" line="521" column="18" bodyfile="includes/variables/matrix.hpp" bodystart="521" bodyend="529"/>
      </memberdef>
      <memberdef kind="function" id="classvar_1_1matrix_1a1ee2cc11235c4798bb70ed96a0fbf29a" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void var::matrix&lt; D &gt;::erase_row</definition>
        <argsstring>(int i)</argsstring>
        <name>erase_row</name>
        <param>
          <type>int</type>
          <declname>i</declname>
        </param>
        <briefdescription>
<para>Erase row at index. </para>
        </briefdescription>
        <detaileddescription>
<para><bold>Usage</bold>: <programlisting filename=".cpp"><codeline><highlight class="normal">m.erase_row(1);</highlight></codeline>
</programlisting></para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>i</parametername>
</parameternamelist>
<parameterdescription>
<para>row index </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="includes/variables/matrix.hpp" line="541" column="18" bodyfile="includes/variables/matrix.hpp" bodystart="541" bodyend="545"/>
      </memberdef>
      <memberdef kind="function" id="classvar_1_1matrix_1a148b9d63ce138a9478aa8adb9e217986" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void var::matrix&lt; D &gt;::erase_col</definition>
        <argsstring>(int j)</argsstring>
        <name>erase_col</name>
        <param>
          <type>int</type>
          <declname>j</declname>
        </param>
        <briefdescription>
<para>Erases column at index. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>j</parametername>
</parameternamelist>
<parameterdescription>
<para>column index </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="includes/variables/matrix.hpp" line="553" column="18" bodyfile="includes/variables/matrix.hpp" bodystart="553" bodyend="559"/>
      </memberdef>
      <memberdef kind="function" id="classvar_1_1matrix_1a0f45fc90c8164ef40a6c820eeef096b1" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void var::matrix&lt; D &gt;::row_swap</definition>
        <argsstring>(int i1, int i2)</argsstring>
        <name>row_swap</name>
        <param>
          <type>int</type>
          <declname>i1</declname>
        </param>
        <param>
          <type>int</type>
          <declname>i2</declname>
        </param>
        <briefdescription>
<para>Swaps row of matrix. </para>
        </briefdescription>
        <detaileddescription>
<para><bold>Usage</bold>: <programlisting filename=".cpp"><codeline><highlight class="normal">m.row_swap(0,<sp/>1);<sp/></highlight><highlight class="comment">//<sp/>swaps<sp/>row<sp/>0<sp/>with<sp/>row<sp/>1</highlight></codeline>
</programlisting></para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>i1</parametername>
</parameternamelist>
<parameterdescription>
<para>first row </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>i2</parametername>
</parameternamelist>
<parameterdescription>
<para>second row </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="includes/variables/matrix.hpp" line="572" column="18" bodyfile="includes/variables/matrix.hpp" bodystart="572" bodyend="578"/>
      </memberdef>
      <memberdef kind="function" id="classvar_1_1matrix_1a82d3724b6ff3dd95144c9e25429c9dbe" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void var::matrix&lt; D &gt;::replace_row</definition>
        <argsstring>(int i, std::vector&lt; D &gt; a)</argsstring>
        <name>replace_row</name>
        <param>
          <type>int</type>
          <declname>i</declname>
        </param>
        <param>
          <type>std::vector&lt; D &gt;</type>
          <declname>a</declname>
        </param>
        <briefdescription>
<para>Replaces certain row. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>i</parametername>
</parameternamelist>
<parameterdescription>
<para>row index </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>a</parametername>
</parameternamelist>
<parameterdescription>
<para><computeroutput>std::vector</computeroutput> </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="includes/variables/matrix.hpp" line="586" column="18" bodyfile="includes/variables/matrix.hpp" bodystart="586" bodyend="592"/>
      </memberdef>
      <memberdef kind="function" id="classvar_1_1matrix_1a7c8ab8d695bb6b214bcfb44a544e0c0d" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void var::matrix&lt; D &gt;::replace_col</definition>
        <argsstring>(int j, std::vector&lt; D &gt; a)</argsstring>
        <name>replace_col</name>
        <param>
          <type>int</type>
          <declname>j</declname>
        </param>
        <param>
          <type>std::vector&lt; D &gt;</type>
          <declname>a</declname>
        </param>
        <briefdescription>
<para>Replaces certain colum. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>j</parametername>
</parameternamelist>
<parameterdescription>
<para>column index </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>a</parametername>
</parameternamelist>
<parameterdescription>
<para><computeroutput>std::vector</computeroutput> </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="includes/variables/matrix.hpp" line="600" column="18" bodyfile="includes/variables/matrix.hpp" bodystart="600" bodyend="608"/>
      </memberdef>
      <memberdef kind="function" id="classvar_1_1matrix_1a76ad44aa71ba8eaa73d9d4fd1431d3af" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void var::matrix&lt; D &gt;::col_swap</definition>
        <argsstring>(int j1, int j2)</argsstring>
        <name>col_swap</name>
        <param>
          <type>int</type>
          <declname>j1</declname>
        </param>
        <param>
          <type>int</type>
          <declname>j2</declname>
        </param>
        <briefdescription>
<para>Colum swap. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>j1</parametername>
</parameternamelist>
<parameterdescription>
<para>first column </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>j2</parametername>
</parameternamelist>
<parameterdescription>
<para>second column </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="includes/variables/matrix.hpp" line="616" column="18" bodyfile="includes/variables/matrix.hpp" bodystart="616" bodyend="625"/>
      </memberdef>
      <memberdef kind="function" id="classvar_1_1matrix_1a84d1beb5e7704a6e7799351bf0623657" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void var::matrix&lt; D &gt;::sort_rows</definition>
        <argsstring>(int d=1)</argsstring>
        <name>sort_rows</name>
        <param>
          <type>int</type>
          <declname>d</declname>
          <defval>1</defval>
        </param>
        <briefdescription>
<para>Sorts all rows. </para>
        </briefdescription>
        <detaileddescription>
<para><bold>Usage</bold>: <programlisting filename=".cpp"><codeline><highlight class="normal">m.sort_rows();</highlight></codeline>
</programlisting></para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>d</parametername>
</parameternamelist>
<parameterdescription>
<para>details are shown below </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>&lt;tt&gt;d</parametername>
</parameternamelist>
<parameterdescription>
<para>= 1 is accending order $\rightarrow$ <computeroutput>sort_rows();</computeroutput> <linebreak/>
 <linebreak/>
 </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>&lt;tt&gt;d</parametername>
</parameternamelist>
<parameterdescription>
<para>= 0 is decending order $\rightarrow$ <computeroutput>sort_rows(0);</computeroutput> </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="includes/variables/matrix.hpp" line="639" column="18" bodyfile="includes/variables/matrix.hpp" bodystart="639" bodyend="643"/>
      </memberdef>
      <memberdef kind="function" id="classvar_1_1matrix_1a06fa30fdba1e861449593cfd6e1398dc" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void var::matrix&lt; D &gt;::sort_cols</definition>
        <argsstring>(int d=1)</argsstring>
        <name>sort_cols</name>
        <param>
          <type>int</type>
          <declname>d</declname>
          <defval>1</defval>
        </param>
        <briefdescription>
<para>Sorts all columns. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>d</parametername>
</parameternamelist>
<parameterdescription>
<para>details are shown below </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>&lt;tt&gt;d</parametername>
</parameternamelist>
<parameterdescription>
<para>= 1 is accending order $\rightarrow$ <computeroutput>sort_rows();</computeroutput> <linebreak/>
 <linebreak/>
 </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>&lt;tt&gt;d</parametername>
</parameternamelist>
<parameterdescription>
<para>= 0 is decending order $\rightarrow$ <computeroutput>sort_rows(0);</computeroutput> </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="includes/variables/matrix.hpp" line="652" column="18" bodyfile="includes/variables/matrix.hpp" bodystart="652" bodyend="656"/>
      </memberdef>
      <memberdef kind="function" id="classvar_1_1matrix_1acc872e3d984edf32f474e221c749e632" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void var::matrix&lt; D &gt;::sort_row</definition>
        <argsstring>(int i, int d=1)</argsstring>
        <name>sort_row</name>
        <param>
          <type>int</type>
          <declname>i</declname>
        </param>
        <param>
          <type>int</type>
          <declname>d</declname>
          <defval>1</defval>
        </param>
        <briefdescription>
<para>Sorts rows at specefic index. </para>
        </briefdescription>
        <detaileddescription>
<para><bold>Usage</bold>: <programlisting filename=".cpp"><codeline><highlight class="normal">m.sort_row(0,<sp/>0);</highlight></codeline>
</programlisting></para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>i</parametername>
</parameternamelist>
<parameterdescription>
<para>row index </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>d</parametername>
</parameternamelist>
<parameterdescription>
<para>details are shown below </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>&lt;tt&gt;d</parametername>
</parameternamelist>
<parameterdescription>
<para>= 1 is accending order $\rightarrow$ <computeroutput>sort_rows();</computeroutput> <linebreak/>
 <linebreak/>
 </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>&lt;tt&gt;d</parametername>
</parameternamelist>
<parameterdescription>
<para>= 0 is decending order $\rightarrow$ <computeroutput>sort_rows(0);</computeroutput> </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="includes/variables/matrix.hpp" line="671" column="18" bodyfile="includes/variables/matrix.hpp" bodystart="671" bodyend="680"/>
      </memberdef>
      <memberdef kind="function" id="classvar_1_1matrix_1aaaa052e8ec27a392848bd750b34f35bf" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void var::matrix&lt; D &gt;::sort_col</definition>
        <argsstring>(int j, int d=1)</argsstring>
        <name>sort_col</name>
        <param>
          <type>int</type>
          <declname>j</declname>
        </param>
        <param>
          <type>int</type>
          <declname>d</declname>
          <defval>1</defval>
        </param>
        <briefdescription>
<para>Sorts column at specefic index. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>j</parametername>
</parameternamelist>
<parameterdescription>
<para>column index <linebreak/>
 </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>d</parametername>
</parameternamelist>
<parameterdescription>
<para>details are shown below </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>&lt;tt&gt;d</parametername>
</parameternamelist>
<parameterdescription>
<para>= 1 is accending order $\rightarrow$ <computeroutput>sort_rows();</computeroutput> <linebreak/>
 <linebreak/>
 </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>&lt;tt&gt;d</parametername>
</parameternamelist>
<parameterdescription>
<para>= 0 is decending order $\rightarrow$ <computeroutput>sort_rows(0);</computeroutput> </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="includes/variables/matrix.hpp" line="690" column="18" bodyfile="includes/variables/matrix.hpp" bodystart="690" bodyend="695"/>
      </memberdef>
      <memberdef kind="function" id="classvar_1_1matrix_1ac87b738aed9ec1933d057b7b3d8eb07c" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename LAMBDA</type>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void var::matrix&lt; D &gt;::row_op</definition>
        <argsstring>(int i, LAMBDA f)</argsstring>
        <name>row_op</name>
        <param>
          <type>int</type>
          <declname>i</declname>
        </param>
        <param>
          <type>LAMBDA</type>
          <declname>f</declname>
        </param>
        <briefdescription>
<para>Does operations on specefic rows. </para>
        </briefdescription>
        <detaileddescription>
<para><bold>Usage</bold>: <programlisting filename=".cpp"><codeline><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>f<sp/>=<sp/>[](</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>A){</highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>A*2+3;};</highlight></codeline>
<codeline><highlight class="normal">m.row_op(1,<sp/>f);</highlight></codeline>
</programlisting></para>
<para><parameterlist kind="templateparam"><parameteritem>
<parameternamelist>
<parametername>LAMBDA</parametername>
</parameternamelist>
<parameterdescription>
<para><computeroutput>std::function</computeroutput> </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>i</parametername>
</parameternamelist>
<parameterdescription>
<para>column index </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>f</parametername>
</parameternamelist>
<parameterdescription>
<para>function to change column elements </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="includes/variables/matrix.hpp" line="711" column="18" bodyfile="includes/variables/matrix.hpp" bodystart="711" bodyend="716"/>
      </memberdef>
      <memberdef kind="function" id="classvar_1_1matrix_1ab841b2356b699bcea97baccf5971d834" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename LAMBDA</type>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void var::matrix&lt; D &gt;::col_op</definition>
        <argsstring>(int j, LAMBDA f)</argsstring>
        <name>col_op</name>
        <param>
          <type>int</type>
          <declname>j</declname>
        </param>
        <param>
          <type>LAMBDA</type>
          <declname>f</declname>
        </param>
        <briefdescription>
<para>Does operations on a specefic column. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="templateparam"><parameteritem>
<parameternamelist>
<parametername>LAMBDA</parametername>
</parameternamelist>
<parameterdescription>
<para><computeroutput>std::function</computeroutput> </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>j</parametername>
</parameternamelist>
<parameterdescription>
<para>column index </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>f</parametername>
</parameternamelist>
<parameterdescription>
<para>function to change column elements</para>
</parameterdescription>
</parameteritem>
</parameterlist>
!!! warning &quot;Exception&quot; <linebreak/>
 <preformatted>
    All row and column operations (inserting, removing .. etc) throw an <computeroutput>std::invalid_argument</computeroutput> if&amp;#58;  
        1. There is a size mismatch  
        2. Invalid index 
</preformatted> </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="includes/variables/matrix.hpp" line="734" column="18" bodyfile="includes/variables/matrix.hpp" bodystart="734" bodyend="739"/>
      </memberdef>
      <memberdef kind="function" id="classvar_1_1matrix_1abf48edbbdf86b09b660ecfd2981f9711" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename LAMBDA</type>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void var::matrix&lt; D &gt;::mat_op</definition>
        <argsstring>(LAMBDA f)</argsstring>
        <name>mat_op</name>
        <param>
          <type>LAMBDA</type>
          <declname>f</declname>
        </param>
        <briefdescription>
<para>Function operation on all of the matrix. </para>
        </briefdescription>
        <detaileddescription>
<para><bold>Usage</bold>: <programlisting filename=".cpp"><codeline><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>f<sp/>=<sp/>[](</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>A){</highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>A*2+3;};</highlight></codeline>
<codeline><highlight class="normal">m.mat_op(f);</highlight></codeline>
</programlisting></para>
<para><parameterlist kind="templateparam"><parameteritem>
<parameternamelist>
<parametername>LAMBDA</parametername>
</parameternamelist>
<parameterdescription>
<para><computeroutput>std::function</computeroutput> </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>f</parametername>
</parameternamelist>
<parameterdescription>
<para>Function </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="includes/variables/matrix.hpp" line="754" column="18" bodyfile="includes/variables/matrix.hpp" bodystart="754" bodyend="760"/>
      </memberdef>
      <memberdef kind="function" id="classvar_1_1matrix_1a360593837b06f88da2dc1a189804bc36" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void var::matrix&lt; D &gt;::join_row</definition>
        <argsstring>(matrix other)</argsstring>
        <name>join_row</name>
        <param>
          <type><ref refid="classvar_1_1matrix" kindref="compound">matrix</ref></type>
          <declname>other</declname>
        </param>
        <briefdescription>
<para>Combines the rows of another matrix. </para>
        </briefdescription>
        <detaileddescription>
<para><bold>Usage</bold>: <programlisting filename=".cpp"><codeline><highlight class="comment">//<sp/>m2<sp/>must<sp/>have<sp/>same<sp/>number<sp/>of<sp/>columns<sp/>as<sp/>m1</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">m1.join_row(m2);</highlight></codeline>
</programlisting></para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>other</parametername>
</parameternamelist>
<parameterdescription>
<para><computeroutput>matrix</computeroutput> </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="includes/variables/matrix.hpp" line="773" column="18" bodyfile="includes/variables/matrix.hpp" bodystart="773" bodyend="780"/>
      </memberdef>
      <memberdef kind="function" id="classvar_1_1matrix_1ae6431ed7fca8e942a9887ae8fa68897b" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void var::matrix&lt; D &gt;::join_col</definition>
        <argsstring>(matrix other)</argsstring>
        <name>join_col</name>
        <param>
          <type><ref refid="classvar_1_1matrix" kindref="compound">matrix</ref></type>
          <declname>other</declname>
        </param>
        <briefdescription>
<para>Combines the columns of another matrix. </para>
        </briefdescription>
        <detaileddescription>
<para><itemizedlist>
<listitem><para><computeroutput>other</computeroutput> must have same number of rows</para>
</listitem></itemizedlist>
</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>other</parametername>
</parameternamelist>
<parameterdescription>
<para><computeroutput>matrix</computeroutput> </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="includes/variables/matrix.hpp" line="789" column="18" bodyfile="includes/variables/matrix.hpp" bodystart="789" bodyend="796"/>
      </memberdef>
      <memberdef kind="function" id="classvar_1_1matrix_1a9eac7bafdfd06437d0b86931335fb194" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void var::matrix&lt; D &gt;::turn_to</definition>
        <argsstring>(D n)</argsstring>
        <name>turn_to</name>
        <param>
          <type>D</type>
          <declname>n</declname>
        </param>
        <briefdescription>
<para>Converts all elements to n. </para>
        </briefdescription>
        <detaileddescription>
<para><bold>Usage</bold>: <programlisting filename=".cpp"><codeline><highlight class="normal">m.turn_to(1);<sp/></highlight></codeline>
</programlisting></para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>n</parametername>
</parameternamelist>
<parameterdescription>
<para>the specifeid variable</para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
<sect2 id="classvar_1_1matrix_1autotoc_md2">
<title>Immutable methods</title>
</sect2>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="includes/variables/matrix.hpp" line="811" column="18" bodyfile="includes/variables/matrix.hpp" bodystart="811" bodyend="817"/>
      </memberdef>
      <memberdef kind="function" id="classvar_1_1matrix_1af58bf7e07cebde78a2e0ad99acd5deeb" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>D</type>
        <definition>D var::matrix&lt; D &gt;::sum</definition>
        <argsstring>()</argsstring>
        <name>sum</name>
        <briefdescription>
<para>Sum of all elements. </para>
        </briefdescription>
        <detaileddescription>
<para><bold>Usage</bold>: <programlisting filename=".cpp"><codeline><highlight class="keyword">auto</highlight><highlight class="normal"><sp/><ref refid="classvar_1_1matrix_1af58bf7e07cebde78a2e0ad99acd5deeb" kindref="member">sum</ref><sp/>=<sp/>m.sum();</highlight></codeline>
</programlisting></para>
<para><simplesect kind="return"><para><computeroutput>D</computeroutput> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="includes/variables/matrix.hpp" line="829" column="15" bodyfile="includes/variables/matrix.hpp" bodystart="829" bodyend="837"/>
      </memberdef>
      <memberdef kind="function" id="classvar_1_1matrix_1a3a7b528f131d95929df267501b461183" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>D</type>
        <definition>D var::matrix&lt; D &gt;::tr</definition>
        <argsstring>()</argsstring>
        <name>tr</name>
        <briefdescription>
<para>Trace of a matrix. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para><computeroutput>D</computeroutput> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="includes/variables/matrix.hpp" line="844" column="15" bodyfile="includes/variables/matrix.hpp" bodystart="844" bodyend="851"/>
      </memberdef>
      <memberdef kind="function" id="classvar_1_1matrix_1af4104a0aa496424fc75256263e412d9f" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>D</type>
        <definition>D var::matrix&lt; D &gt;::det</definition>
        <argsstring>()</argsstring>
        <name>det</name>
        <briefdescription>
<para>Returns the determinant. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para><computeroutput>D</computeroutput> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="includes/variables/matrix.hpp" line="858" column="15" bodyfile="includes/variables/matrix.hpp" bodystart="858" bodyend="861"/>
      </memberdef>
      <memberdef kind="function" id="classvar_1_1matrix_1a3b2c5d8983bb1dcdc250768a0f0ce578" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classvar_1_1matrix" kindref="compound">matrix</ref></type>
        <definition>matrix var::matrix&lt; D &gt;::T</definition>
        <argsstring>()</argsstring>
        <name>T</name>
        <briefdescription>
<para>Transpose of a matrix. </para>
        </briefdescription>
        <detaileddescription>
<para><bold>Usage</bold>: <programlisting filename=".cpp"><codeline><highlight class="normal"><ref refid="classvar_1_1matrix" kindref="compound">var::matrix&lt;int&gt;</ref><sp/>m(3,<sp/>3);</highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/><ref refid="classvar_1_1matrix_1a3b2c5d8983bb1dcdc250768a0f0ce578" kindref="member">T</ref><sp/>=<sp/>m.<ref refid="classvar_1_1matrix_1a3b2c5d8983bb1dcdc250768a0f0ce578" kindref="member">T</ref>();</highlight></codeline>
</programlisting></para>
<para><simplesect kind="return"><para><computeroutput>matrix</computeroutput> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="includes/variables/matrix.hpp" line="874" column="20" bodyfile="includes/variables/matrix.hpp" bodystart="874" bodyend="879"/>
      </memberdef>
      <memberdef kind="function" id="classvar_1_1matrix_1ac97536b4f94f1dd614fb6267c07dd2b7" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classvar_1_1matrix" kindref="compound">matrix</ref></type>
        <definition>matrix var::matrix&lt; D &gt;::cofactor</definition>
        <argsstring>()</argsstring>
        <name>cofactor</name>
        <briefdescription>
<para>Returns cofactor matrix. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>matrix </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="includes/variables/matrix.hpp" line="886" column="20" bodyfile="includes/variables/matrix.hpp" bodystart="886" bodyend="896"/>
      </memberdef>
      <memberdef kind="function" id="classvar_1_1matrix_1ae63bcd0b556175ab578d7095b6cf647c" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classvar_1_1matrix" kindref="compound">matrix</ref></type>
        <definition>matrix var::matrix&lt; D &gt;::M</definition>
        <argsstring>(int i, int j)</argsstring>
        <name>M</name>
        <param>
          <type>int</type>
          <declname>i</declname>
        </param>
        <param>
          <type>int</type>
          <declname>j</declname>
        </param>
        <briefdescription>
<para>Minor of a matrix. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>i</parametername>
</parameternamelist>
<parameterdescription>
<para>row index </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>j</parametername>
</parameternamelist>
<parameterdescription>
<para>column index </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para><computeroutput>matrix</computeroutput> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="includes/variables/matrix.hpp" line="905" column="20" bodyfile="includes/variables/matrix.hpp" bodystart="905" bodyend="907"/>
      </memberdef>
      <memberdef kind="function" id="classvar_1_1matrix_1ad78a167d7400fac474fd03cf3363defb" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classvar_1_1matrix" kindref="compound">matrix</ref></type>
        <definition>matrix var::matrix&lt; D &gt;::adj</definition>
        <argsstring>()</argsstring>
        <name>adj</name>
        <briefdescription>
<para>Adjugate of a matrix. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para><computeroutput>matrix</computeroutput> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="includes/variables/matrix.hpp" line="914" column="20" bodyfile="includes/variables/matrix.hpp" bodystart="914" bodyend="918"/>
      </memberdef>
      <memberdef kind="function" id="classvar_1_1matrix_1a8a66138dce5fdb1b27a89349a8fd8539" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classvar_1_1matrix" kindref="compound">matrix</ref></type>
        <definition>matrix var::matrix&lt; D &gt;::inv</definition>
        <argsstring>()</argsstring>
        <name>inv</name>
        <briefdescription>
<para>Returns inverse of a matrix. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para><computeroutput>matrix</computeroutput> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="includes/variables/matrix.hpp" line="925" column="20" bodyfile="includes/variables/matrix.hpp" bodystart="925" bodyend="932"/>
      </memberdef>
      <memberdef kind="function" id="classvar_1_1matrix_1a5e7cc7e40124be3bd4a1accfacd68b05" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classvar_1_1matrix" kindref="compound">matrix</ref></type>
        <definition>matrix var::matrix&lt; D &gt;::rref</definition>
        <argsstring>()</argsstring>
        <name>rref</name>
        <briefdescription>
<para>Reduced row echolon form. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para><computeroutput>matrix</computeroutput> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="includes/variables/matrix.hpp" line="939" column="20" bodyfile="includes/variables/matrix.hpp" bodystart="939" bodyend="989"/>
      </memberdef>
      <memberdef kind="function" id="classvar_1_1matrix_1a29ff1c5a059b90bd4871d249d1c48c8b" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classvar_1_1matrix" kindref="compound">matrix</ref></type>
        <definition>matrix var::matrix&lt; D &gt;::ref</definition>
        <argsstring>()</argsstring>
        <name>ref</name>
        <briefdescription>
<para>Row echolon form. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para><computeroutput>matrix</computeroutput> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="includes/variables/matrix.hpp" line="996" column="20" bodyfile="includes/variables/matrix.hpp" bodystart="996" bodyend="1040"/>
      </memberdef>
      <memberdef kind="function" id="classvar_1_1matrix_1ac6d4763f62d11273f092f21ad3c0760f" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="structvar_1_1matrix_1_1LU" kindref="compound">LU</ref></type>
        <definition>LU var::matrix&lt; D &gt;::plu</definition>
        <argsstring>()</argsstring>
        <name>plu</name>
        <briefdescription>
<para>PLU decomposition. </para>
        </briefdescription>
        <detaileddescription>
<para><bold>Usage</bold>: <programlisting filename=".cpp"><codeline><highlight class="comment">//<sp/>the<sp/>output<sp/>is<sp/>LU<sp/>struct<sp/></highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>LU<sp/>=<sp/>m.plu();</highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>L<sp/>=<sp/>LU.L;</highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>U<sp/>=<sp/>LU.U;</highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>P<sp/>=<sp/>LU.p;</highlight></codeline>
</programlisting></para>
<para><simplesect kind="return"><para><computeroutput>LU</computeroutput> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="includes/variables/matrix.hpp" line="1056" column="16" bodyfile="includes/variables/matrix.hpp" bodystart="1056" bodyend="1142"/>
      </memberdef>
      <memberdef kind="function" id="classvar_1_1matrix_1a69ffd8772f87c70f5a8e525b0e4dd71f" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool var::matrix&lt; D &gt;::is_square</definition>
        <argsstring>()</argsstring>
        <name>is_square</name>
        <briefdescription>
<para>Checks if matrix is square. </para>
        </briefdescription>
        <detaileddescription>
<para><bold>Usage</bold>: <programlisting filename=".cpp"><codeline><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="classvar_1_1matrix_1a54224ff2eefe0c6cd3fbeaff7a309f84" kindref="member">square</ref><sp/>=<sp/>m.is_square();</highlight></codeline>
</programlisting></para>
<para><simplesect kind="return"><para>true </para>
</simplesect>
<simplesect kind="return"><para>false </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="includes/variables/matrix.hpp" line="1155" column="18" bodyfile="includes/variables/matrix.hpp" bodystart="1155" bodyend="1157"/>
      </memberdef>
      <memberdef kind="function" id="classvar_1_1matrix_1a9db378f2cc8cc600c2137dcea6fadfc9" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool var::matrix&lt; D &gt;::is_empty</definition>
        <argsstring>()</argsstring>
        <name>is_empty</name>
        <briefdescription>
<para>Returns if the matrix is empty or not. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>true </para>
</simplesect>
<simplesect kind="return"><para>false </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="includes/variables/matrix.hpp" line="1165" column="18" bodyfile="includes/variables/matrix.hpp" bodystart="1165" bodyend="1167"/>
      </memberdef>
      <memberdef kind="function" id="classvar_1_1matrix_1a34a63853e0456af7ba9bbd7e10b4cfc6" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool var::matrix&lt; D &gt;::is_identity</definition>
        <argsstring>()</argsstring>
        <name>is_identity</name>
        <briefdescription>
<para>Checks if matrix is an identity matrix. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>true </para>
</simplesect>
<simplesect kind="return"><para>false</para>
</simplesect>
</para>
<sect2 id="classvar_1_1matrix_1autotoc_md3">
<title>Operator methods</title>
</sect2>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="includes/variables/matrix.hpp" line="1178" column="18" bodyfile="includes/variables/matrix.hpp" bodystart="1178" bodyend="1197"/>
      </memberdef>
      <memberdef kind="function" id="classvar_1_1matrix_1a2d10297e28d8c6c6264d6f174003d193" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classvar_1_1matrix_1_1Col" kindref="compound">Col</ref></type>
        <definition>Col var::matrix&lt; D &gt;::operator[]</definition>
        <argsstring>(int i)</argsstring>
        <name>operator[]</name>
        <param>
          <type>int</type>
          <declname>i</declname>
        </param>
        <briefdescription>
<para>[][] operator for <computeroutput>matrix</computeroutput> </para>
        </briefdescription>
        <detaileddescription>
<para><bold>Usage</bold>: <programlisting filename=".cpp"><codeline><highlight class="comment">//<sp/>m[row][col]</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">m[0][0]<sp/>=<sp/>5;</highlight></codeline>
</programlisting></para>
<para><itemizedlist>
<listitem><para>Does not check the correct row and colum index;</para>
</listitem></itemizedlist>
</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>i</parametername>
</parameternamelist>
<parameterdescription>
<para>row index </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para><computeroutput>Col</computeroutput> which then returns &amp;D </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="includes/variables/matrix.hpp" line="1215" column="17" bodyfile="includes/variables/matrix.hpp" bodystart="1215" bodyend="1217"/>
      </memberdef>
      <memberdef kind="function" id="classvar_1_1matrix_1aaee49a5cde5696ed5d41b2ed5b15d69a" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classvar_1_1matrix" kindref="compound">matrix</ref></type>
        <definition>matrix var::matrix&lt; D &gt;::operator+</definition>
        <argsstring>(matrix const &amp;other)</argsstring>
        <name>operator+</name>
        <param>
          <type><ref refid="classvar_1_1matrix" kindref="compound">matrix</ref> const &amp;</type>
          <declname>other</declname>
        </param>
        <briefdescription>
<para>Matrix addition. </para>
        </briefdescription>
        <detaileddescription>
<para><bold>Usage</bold>: <programlisting filename=".cpp"><codeline><highlight class="comment">//<sp/>m1<sp/>and<sp/>m2<sp/>are<sp/>matrix<sp/>class</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>summed<sp/>=<sp/>m1+m2;<sp/></highlight></codeline>
</programlisting></para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>other</parametername>
</parameternamelist>
<parameterdescription>
<para></para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para><computeroutput>matrix</computeroutput> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="includes/variables/matrix.hpp" line="1233" column="20" bodyfile="includes/variables/matrix.hpp" bodystart="1233" bodyend="1243"/>
      </memberdef>
      <memberdef kind="function" id="classvar_1_1matrix_1af312c6541557412aa40999381c832613" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classvar_1_1matrix" kindref="compound">matrix</ref></type>
        <definition>matrix var::matrix&lt; D &gt;::operator+</definition>
        <argsstring>(D n)</argsstring>
        <name>operator+</name>
        <param>
          <type>D</type>
          <declname>n</declname>
        </param>
        <briefdescription>
<para><computeroutput>matrix+var</computeroutput> as <computeroutput>var</computeroutput> as added to all elements </para>
        </briefdescription>
        <detaileddescription>
<para><bold>Usage</bold>: <programlisting filename=".cpp"><codeline><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>m_add_2<sp/>=<sp/>m+2;<sp/></highlight><highlight class="comment">//<sp/>or<sp/>2+m<sp/></highlight></codeline>
</programlisting></para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>n</parametername>
</parameternamelist>
<parameterdescription>
<para>variable to add </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para><computeroutput>matrix</computeroutput> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="includes/variables/matrix.hpp" line="1256" column="20" bodyfile="includes/variables/matrix.hpp" bodystart="1256" bodyend="1264"/>
      </memberdef>
      <memberdef kind="function" id="classvar_1_1matrix_1abd66c334c203ef12d4449146ddd9c2bc" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void var::matrix&lt; D &gt;::operator+=</definition>
        <argsstring>(matrix a)</argsstring>
        <name>operator+=</name>
        <param>
          <type><ref refid="classvar_1_1matrix" kindref="compound">matrix</ref></type>
          <declname>a</declname>
        </param>
        <briefdescription>
<para>Increments current matrix by matrix <computeroutput>a</computeroutput> </para>
        </briefdescription>
        <detaileddescription>
<para><bold>Usage</bold>: <programlisting filename=".cpp"><codeline><highlight class="normal">m1+=m2;<sp/></highlight><highlight class="comment">//<sp/>m1,m2<sp/>-&gt;<sp/>matrix</highlight></codeline>
</programlisting></para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>a</parametername>
</parameternamelist>
<parameterdescription>
<para><computeroutput>matrix</computeroutput> </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="includes/variables/matrix.hpp" line="1287" column="18" bodyfile="includes/variables/matrix.hpp" bodystart="1287" bodyend="1289"/>
      </memberdef>
      <memberdef kind="function" id="classvar_1_1matrix_1a35688c9538dccc5762fb4d197ef4d2a8" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void var::matrix&lt; D &gt;::operator+=</definition>
        <argsstring>(D a)</argsstring>
        <name>operator+=</name>
        <param>
          <type>D</type>
          <declname>a</declname>
        </param>
        <briefdescription>
<para>Specific variable increment. </para>
        </briefdescription>
        <detaileddescription>
<para><bold>Usage</bold>: <programlisting filename=".cpp"><codeline><highlight class="normal">m+=2;<sp/></highlight><highlight class="comment">//<sp/>increments<sp/>every<sp/>element<sp/>by<sp/>2</highlight></codeline>
</programlisting></para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>a</parametername>
</parameternamelist>
<parameterdescription>
<para>increments each value by a </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="includes/variables/matrix.hpp" line="1301" column="18" bodyfile="includes/variables/matrix.hpp" bodystart="1301" bodyend="1305"/>
      </memberdef>
      <memberdef kind="function" id="classvar_1_1matrix_1a5647352c1d02074e3fd80349226c8b46" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void var::matrix&lt; D &gt;::operator++</definition>
        <argsstring>(int a)</argsstring>
        <name>operator++</name>
        <param>
          <type>int</type>
          <declname>a</declname>
        </param>
        <briefdescription>
<para>Increment operator. </para>
        </briefdescription>
        <detaileddescription>
<para><bold>Usage</bold>: <programlisting filename=".cpp"><codeline><highlight class="normal">m++;<sp/>all<sp/>values<sp/>will<sp/>be<sp/>increased<sp/>by<sp/>1</highlight></codeline>
</programlisting></para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>a</parametername>
</parameternamelist>
<parameterdescription>
<para></para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="includes/variables/matrix.hpp" line="1317" column="18" bodyfile="includes/variables/matrix.hpp" bodystart="1317" bodyend="1319"/>
      </memberdef>
      <memberdef kind="function" id="classvar_1_1matrix_1a277209428c74da8a84cc6e59b540cead" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classvar_1_1matrix" kindref="compound">matrix</ref></type>
        <definition>matrix var::matrix&lt; D &gt;::operator-</definition>
        <argsstring>()</argsstring>
        <name>operator-</name>
        <briefdescription>
<para>Negative of a matrix. </para>
        </briefdescription>
        <detaileddescription>
<para><bold>Usage</bold>: <programlisting filename=".cpp"><codeline><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>negated<sp/>=<sp/>-m;<sp/></highlight></codeline>
</programlisting></para>
<para><simplesect kind="return"><para><computeroutput>matrix</computeroutput> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="includes/variables/matrix.hpp" line="1333" column="20" bodyfile="includes/variables/matrix.hpp" bodystart="1333" bodyend="1341"/>
      </memberdef>
      <memberdef kind="function" id="classvar_1_1matrix_1a20cab5ed13b35173c242b6fe0909eda6" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classvar_1_1matrix" kindref="compound">matrix</ref></type>
        <definition>matrix var::matrix&lt; D &gt;::operator-</definition>
        <argsstring>(matrix const &amp;other)</argsstring>
        <name>operator-</name>
        <param>
          <type><ref refid="classvar_1_1matrix" kindref="compound">matrix</ref> const &amp;</type>
          <declname>other</declname>
        </param>
        <briefdescription>
<para>Matrix subtraction. </para>
        </briefdescription>
        <detaileddescription>
<para><bold>Usage</bold>: <programlisting filename=".cpp"><codeline><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>subtracted<sp/>=<sp/>m1-m2;<sp/></highlight></codeline>
</programlisting></para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>other</parametername>
</parameternamelist>
<parameterdescription>
<para><computeroutput>matrix</computeroutput> </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>matrix </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="includes/variables/matrix.hpp" line="1354" column="20" bodyfile="includes/variables/matrix.hpp" bodystart="1354" bodyend="1363"/>
      </memberdef>
      <memberdef kind="function" id="classvar_1_1matrix_1a0052ad415d92a84561c48b2f94c5159b" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classvar_1_1matrix" kindref="compound">matrix</ref></type>
        <definition>matrix var::matrix&lt; D &gt;::operator-</definition>
        <argsstring>(D n)</argsstring>
        <name>operator-</name>
        <param>
          <type>D</type>
          <declname>n</declname>
        </param>
        <briefdescription>
<para><computeroutput>matrix-var</computeroutput> </para>
        </briefdescription>
        <detaileddescription>
<para><bold>Usage</bold>: <programlisting filename=".cpp"><codeline><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>m_take_2<sp/>=<sp/>m-2;<sp/></highlight><highlight class="comment">//<sp/>or<sp/>2-m<sp/></highlight></codeline>
</programlisting></para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>n</parametername>
</parameternamelist>
<parameterdescription>
<para>variable to add </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para><computeroutput>matrix</computeroutput> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="includes/variables/matrix.hpp" line="1376" column="20" bodyfile="includes/variables/matrix.hpp" bodystart="1376" bodyend="1384"/>
      </memberdef>
      <memberdef kind="function" id="classvar_1_1matrix_1a526e90d7aa20a8d7e5f0ffec0d921f85" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void var::matrix&lt; D &gt;::operator-=</definition>
        <argsstring>(matrix a)</argsstring>
        <name>operator-=</name>
        <param>
          <type><ref refid="classvar_1_1matrix" kindref="compound">matrix</ref></type>
          <declname>a</declname>
        </param>
        <briefdescription>
<para>Decrement current matrix by matrix <computeroutput>a</computeroutput> </para>
        </briefdescription>
        <detaileddescription>
<para><bold>Usage</bold>: <programlisting filename=".cpp"><codeline><highlight class="normal">m1<sp/>-=<sp/>m2;</highlight></codeline>
</programlisting></para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>a</parametername>
</parameternamelist>
<parameterdescription>
<para><computeroutput>matrix</computeroutput> </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="includes/variables/matrix.hpp" line="1408" column="18" bodyfile="includes/variables/matrix.hpp" bodystart="1408" bodyend="1410"/>
      </memberdef>
      <memberdef kind="function" id="classvar_1_1matrix_1a66887a6e49d49ebd94abeebc63c514d8" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void var::matrix&lt; D &gt;::operator-=</definition>
        <argsstring>(D a)</argsstring>
        <name>operator-=</name>
        <param>
          <type>D</type>
          <declname>a</declname>
        </param>
        <briefdescription>
<para>Decrement current matrix by value <computeroutput>a</computeroutput> </para>
        </briefdescription>
        <detaileddescription>
<para><bold>Usage</bold>: <programlisting filename=".cpp"><codeline><highlight class="normal">m<sp/>-=<sp/>2;<sp/></highlight><highlight class="comment">//<sp/>subtracts<sp/>each<sp/>element<sp/>by<sp/>2</highlight></codeline>
</programlisting></para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>a</parametername>
</parameternamelist>
<parameterdescription>
<para>Decrements each value by a </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="includes/variables/matrix.hpp" line="1422" column="18" bodyfile="includes/variables/matrix.hpp" bodystart="1422" bodyend="1426"/>
      </memberdef>
      <memberdef kind="function" id="classvar_1_1matrix_1a5c89ab3b482be4e3083452ba99369032" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void var::matrix&lt; D &gt;::operator--</definition>
        <argsstring>(int a=1)</argsstring>
        <name>operator--</name>
        <param>
          <type>int</type>
          <declname>a</declname>
          <defval>1</defval>
        </param>
        <briefdescription>
<para>Decrement operator. </para>
        </briefdescription>
        <detaileddescription>
<para><bold>Usage</bold>: <programlisting filename=".cpp"><codeline><highlight class="normal">m--;<sp/></highlight><highlight class="comment">//<sp/>deacreses<sp/>every<sp/>value<sp/>of<sp/>m<sp/>by<sp/>1<sp/></highlight></codeline>
</programlisting></para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>a</parametername>
</parameternamelist>
<parameterdescription>
<para></para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="includes/variables/matrix.hpp" line="1438" column="18" bodyfile="includes/variables/matrix.hpp" bodystart="1438" bodyend="1440"/>
      </memberdef>
      <memberdef kind="function" id="classvar_1_1matrix_1a3d767a0fcfa836340881b6fd9f4ee4e5" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classvar_1_1matrix" kindref="compound">matrix</ref></type>
        <definition>matrix var::matrix&lt; D &gt;::operator*</definition>
        <argsstring>(matrix const &amp;other)</argsstring>
        <name>operator*</name>
        <param>
          <type><ref refid="classvar_1_1matrix" kindref="compound">matrix</ref> const &amp;</type>
          <declname>other</declname>
        </param>
        <briefdescription>
<para>Matrix multiplication. </para>
        </briefdescription>
        <detaileddescription>
<para><bold>Usage</bold>: <programlisting filename=".cpp"><codeline><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>matrix_mul<sp/>=<sp/>m*m;</highlight></codeline>
</programlisting></para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>other</parametername>
</parameternamelist>
<parameterdescription>
<para><computeroutput>matrix</computeroutput> </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para><computeroutput>matrix</computeroutput> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="includes/variables/matrix.hpp" line="1455" column="20" bodyfile="includes/variables/matrix.hpp" bodystart="1455" bodyend="1474"/>
      </memberdef>
      <memberdef kind="function" id="classvar_1_1matrix_1a6ba280ed6e9ad194e8f2eb25a8aff4bc" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classvar_1_1matrix" kindref="compound">matrix</ref></type>
        <definition>matrix var::matrix&lt; D &gt;::operator*</definition>
        <argsstring>(D n)</argsstring>
        <name>operator*</name>
        <param>
          <type>D</type>
          <declname>n</declname>
        </param>
        <briefdescription>
<para><computeroutput>matrix*var</computeroutput> </para>
        </briefdescription>
        <detaileddescription>
<para><bold>Usage</bold>: <programlisting filename=".cpp"><codeline><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>m_by_2<sp/>=<sp/>m*2;<sp/></highlight><highlight class="comment">//<sp/>or<sp/>2*m</highlight></codeline>
</programlisting></para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>n</parametername>
</parameternamelist>
<parameterdescription>
<para>variable multiplying with </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para><computeroutput>matrix</computeroutput> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="includes/variables/matrix.hpp" line="1487" column="20" bodyfile="includes/variables/matrix.hpp" bodystart="1487" bodyend="1495"/>
      </memberdef>
      <memberdef kind="function" id="classvar_1_1matrix_1a4a4fbae6b9a26b6b37d25dc09756882f" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classvar_1_1matrix" kindref="compound">matrix</ref></type>
        <definition>matrix var::matrix&lt; D &gt;::mathmul</definition>
        <argsstring>(matrix const &amp;other)</argsstring>
        <name>mathmul</name>
        <param>
          <type><ref refid="classvar_1_1matrix" kindref="compound">matrix</ref> const &amp;</type>
          <declname>other</declname>
        </param>
        <briefdescription>
<para>Normal multiplicatoin. </para>
        </briefdescription>
        <detaileddescription>
<para><bold>Usage</bold>: <programlisting filename=".cpp"><codeline><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>mul_m<sp/>=<sp/>m1.mathmul(m2);</highlight></codeline>
</programlisting></para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>other</parametername>
</parameternamelist>
<parameterdescription>
<para><computeroutput>matrix</computeroutput> </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para><computeroutput>matrix</computeroutput> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="includes/variables/matrix.hpp" line="1508" column="20" bodyfile="includes/variables/matrix.hpp" bodystart="1508" bodyend="1518"/>
      </memberdef>
      <memberdef kind="function" id="classvar_1_1matrix_1a9683bc54b999348c59ae33b261334796" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classvar_1_1matrix" kindref="compound">matrix</ref></type>
        <definition>matrix var::matrix&lt; D &gt;::operator/</definition>
        <argsstring>(matrix &amp;other)</argsstring>
        <name>operator/</name>
        <param>
          <type><ref refid="classvar_1_1matrix" kindref="compound">matrix</ref> &amp;</type>
          <declname>other</declname>
        </param>
        <briefdescription>
<para>Matrix division using inverse. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>other</parametername>
</parameternamelist>
<parameterdescription>
<para><computeroutput>matrix</computeroutput> </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para><computeroutput>matrix</computeroutput> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="includes/variables/matrix.hpp" line="1539" column="20" bodyfile="includes/variables/matrix.hpp" bodystart="1539" bodyend="1542"/>
      </memberdef>
      <memberdef kind="function" id="classvar_1_1matrix_1a1b9e65f8c962ec95aeac343d5d6ba89b" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classvar_1_1matrix" kindref="compound">matrix</ref></type>
        <definition>matrix var::matrix&lt; D &gt;::operator/</definition>
        <argsstring>(D n)</argsstring>
        <name>operator/</name>
        <param>
          <type>D</type>
          <declname>n</declname>
        </param>
        <briefdescription>
<para><computeroutput>matrix/var</computeroutput> </para>
        </briefdescription>
        <detaileddescription>
<para><bold>Usage</bold>: <programlisting filename=".cpp"><codeline><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>m_over_2<sp/>=<sp/>m/2;<sp/></highlight><highlight class="comment">//<sp/>2/m<sp/>can<sp/>work</highlight></codeline>
</programlisting></para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>n</parametername>
</parameternamelist>
<parameterdescription>
<para>our variable </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para><computeroutput>matrix</computeroutput> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="includes/variables/matrix.hpp" line="1555" column="20" bodyfile="includes/variables/matrix.hpp" bodystart="1555" bodyend="1564"/>
      </memberdef>
      <memberdef kind="function" id="classvar_1_1matrix_1a7f70df54e0a1007bdce21b563281d547" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classvar_1_1matrix" kindref="compound">matrix</ref></type>
        <definition>matrix var::matrix&lt; D &gt;::mathdiv</definition>
        <argsstring>(matrix const &amp;other)</argsstring>
        <name>mathdiv</name>
        <param>
          <type><ref refid="classvar_1_1matrix" kindref="compound">matrix</ref> const &amp;</type>
          <declname>other</declname>
        </param>
        <briefdescription>
<para>Normal math division. </para>
        </briefdescription>
        <detaileddescription>
<para><bold>Usage</bold>: <programlisting filename=".cpp"><codeline><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>divided<sp/>=<sp/>m1.mathdiv(m2);</highlight></codeline>
</programlisting></para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>other</parametername>
</parameternamelist>
<parameterdescription>
<para><computeroutput>matrix</computeroutput> </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para><computeroutput>matrix</computeroutput> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="includes/variables/matrix.hpp" line="1577" column="20" bodyfile="includes/variables/matrix.hpp" bodystart="1577" bodyend="1586"/>
      </memberdef>
      <memberdef kind="function" id="classvar_1_1matrix_1aa8b1ba57b6570c21aeb6c5a841512d3a" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classvar_1_1matrix" kindref="compound">matrix</ref></type>
        <definition>matrix var::matrix&lt; D &gt;::operator()</definition>
        <argsstring>(int i1, int i2)</argsstring>
        <name>operator()</name>
        <param>
          <type>int</type>
          <declname>i1</declname>
        </param>
        <param>
          <type>int</type>
          <declname>i2</declname>
        </param>
        <briefdescription>
<para>Returns a sliced matrix. </para>
        </briefdescription>
        <detaileddescription>
<para><bold>Usage</bold>: <programlisting filename=".cpp"><codeline><highlight class="comment">//<sp/>m(inclusive,<sp/>exclusive)</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>sliced<sp/>=<sp/>m(1,<sp/>3);<sp/></highlight><highlight class="comment">//<sp/>row-1<sp/>to<sp/>row-2</highlight></codeline>
</programlisting></para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>i1</parametername>
</parameternamelist>
<parameterdescription>
<para>index row 1 (inclusive) </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>i2</parametername>
</parameternamelist>
<parameterdescription>
<para>index row 2 (exclusive) </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para><computeroutput>matrix</computeroutput> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="includes/variables/matrix.hpp" line="1621" column="20" bodyfile="includes/variables/matrix.hpp" bodystart="1621" bodyend="1629"/>
      </memberdef>
      <memberdef kind="function" id="classvar_1_1matrix_1a49e14ee296d37fb152a42b5cb69ae82c" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>std::vector&lt; D &gt;</type>
        <definition>std::vector&lt;D&gt; var::matrix&lt; D &gt;::operator()</definition>
        <argsstring>(int i, int j1, int j2)</argsstring>
        <name>operator()</name>
        <param>
          <type>int</type>
          <declname>i</declname>
        </param>
        <param>
          <type>int</type>
          <declname>j1</declname>
        </param>
        <param>
          <type>int</type>
          <declname>j2</declname>
        </param>
        <briefdescription>
<para>Column per row slicing. </para>
        </briefdescription>
        <detaileddescription>
<para><itemizedlist>
<listitem><para>Condition <computeroutput>j2 &gt;= j1</computeroutput> must be true.</para>
</listitem></itemizedlist>
</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>i</parametername>
</parameternamelist>
<parameterdescription>
<para>row index </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>j1</parametername>
</parameternamelist>
<parameterdescription>
<para>column index 1 (inclusive) </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>j2</parametername>
</parameternamelist>
<parameterdescription>
<para>column index 2 (exclusive) </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para><computeroutput>std::vector&lt;D&gt;</computeroutput> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="includes/variables/matrix.hpp" line="1641" column="25" bodyfile="includes/variables/matrix.hpp" bodystart="1641" bodyend="1650"/>
      </memberdef>
      <memberdef kind="function" id="classvar_1_1matrix_1ad71f5d3e213b100c3e4f545f74a92b86" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classvar_1_1matrix" kindref="compound">matrix</ref></type>
        <definition>matrix var::matrix&lt; D &gt;::operator()</definition>
        <argsstring>(int i1, int i2, int j1, int j2)</argsstring>
        <name>operator()</name>
        <param>
          <type>int</type>
          <declname>i1</declname>
        </param>
        <param>
          <type>int</type>
          <declname>i2</declname>
        </param>
        <param>
          <type>int</type>
          <declname>j1</declname>
        </param>
        <param>
          <type>int</type>
          <declname>j2</declname>
        </param>
        <briefdescription>
<para>Row and column slice. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>i1</parametername>
</parameternamelist>
<parameterdescription>
<para>row index 1 (inclusive) </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>i2</parametername>
</parameternamelist>
<parameterdescription>
<para>row index 2 (exclusive) </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>j1</parametername>
</parameternamelist>
<parameterdescription>
<para>column index 1 (inclusive) </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>j2</parametername>
</parameternamelist>
<parameterdescription>
<para>column index 2 (exclusive) </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>matrix</para>
</simplesect>
!!! warning &quot;Exception&quot; <linebreak/>
 <preformatted>
    All ``()`` operators will throw an <computeroutput>std::invalid_argument</computeroutput> if&amp;#58;  
        1. Index must be correct
        2. ``i2&gt;=i1`` and ``j2&gt;=j1``  
</preformatted> </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="includes/variables/matrix.hpp" line="1669" column="20" bodyfile="includes/variables/matrix.hpp" bodystart="1669" bodyend="1693"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="friend">
      <memberdef kind="friend" id="classvar_1_1matrix_1acd798c4a5acd27adbadc15b750d13aa9" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classvar_1_1matrix" kindref="compound">matrix</ref></type>
        <definition>matrix operator+</definition>
        <argsstring>(D n, matrix &amp;other)</argsstring>
        <name>operator+</name>
        <param>
          <type>D</type>
          <declname>n</declname>
        </param>
        <param>
          <type><ref refid="classvar_1_1matrix" kindref="compound">matrix</ref> &amp;</type>
          <declname>other</declname>
        </param>
        <briefdescription>
<para><computeroutput>var+matrix</computeroutput> </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>n</parametername>
</parameternamelist>
<parameterdescription>
<para>variable to add </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>other</parametername>
</parameternamelist>
<parameterdescription>
<para><computeroutput>matrix</computeroutput> </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para><computeroutput>matrix</computeroutput> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="includes/variables/matrix.hpp" line="1273" column="27" bodyfile="includes/variables/matrix.hpp" bodystart="1273" bodyend="1275"/>
      </memberdef>
      <memberdef kind="friend" id="classvar_1_1matrix_1aec0f669b84ef6cbf1197fda5328d2d3e" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classvar_1_1matrix" kindref="compound">matrix</ref></type>
        <definition>matrix operator-</definition>
        <argsstring>(D n, matrix &amp;other)</argsstring>
        <name>operator-</name>
        <param>
          <type>D</type>
          <declname>n</declname>
        </param>
        <param>
          <type><ref refid="classvar_1_1matrix" kindref="compound">matrix</ref> &amp;</type>
          <declname>other</declname>
        </param>
        <briefdescription>
<para><computeroutput>var-matrix</computeroutput> </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>n</parametername>
</parameternamelist>
<parameterdescription>
<para>variable to add </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>other</parametername>
</parameternamelist>
<parameterdescription>
<para><computeroutput>matrix</computeroutput> </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para><computeroutput>matrix</computeroutput> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="includes/variables/matrix.hpp" line="1393" column="27" bodyfile="includes/variables/matrix.hpp" bodystart="1393" bodyend="1396"/>
      </memberdef>
      <memberdef kind="friend" id="classvar_1_1matrix_1afa75e72ad7b2e69f24b69e6dcfdbbcc6" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classvar_1_1matrix" kindref="compound">matrix</ref></type>
        <definition>matrix operator*</definition>
        <argsstring>(D n, matrix &amp;other)</argsstring>
        <name>operator*</name>
        <param>
          <type>D</type>
          <declname>n</declname>
        </param>
        <param>
          <type><ref refid="classvar_1_1matrix" kindref="compound">matrix</ref> &amp;</type>
          <declname>other</declname>
        </param>
        <briefdescription>
<para><computeroutput>var*matrix</computeroutput> </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>n</parametername>
</parameternamelist>
<parameterdescription>
<para>variable multiplying with </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>other</parametername>
</parameternamelist>
<parameterdescription>
<para><computeroutput>matrix</computeroutput> </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para><computeroutput>matrix</computeroutput> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="includes/variables/matrix.hpp" line="1527" column="27" bodyfile="includes/variables/matrix.hpp" bodystart="1527" bodyend="1529"/>
      </memberdef>
      <memberdef kind="friend" id="classvar_1_1matrix_1a21bdbe6bff69133cc693c53cac84bfec" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classvar_1_1matrix" kindref="compound">matrix</ref></type>
        <definition>matrix operator/</definition>
        <argsstring>(D n, matrix &amp;other)</argsstring>
        <name>operator/</name>
        <param>
          <type>D</type>
          <declname>n</declname>
        </param>
        <param>
          <type><ref refid="classvar_1_1matrix" kindref="compound">matrix</ref> &amp;</type>
          <declname>other</declname>
        </param>
        <briefdescription>
<para><computeroutput>var/matrix</computeroutput> </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>n</parametername>
</parameternamelist>
<parameterdescription>
<para>our variable </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>other</parametername>
</parameternamelist>
<parameterdescription>
<para><computeroutput>matrix</computeroutput> </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para><computeroutput>matrix</computeroutput> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="includes/variables/matrix.hpp" line="1595" column="27" bodyfile="includes/variables/matrix.hpp" bodystart="1595" bodyend="1604"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
<para>Class for 2d matrix of objects. </para>
    </briefdescription>
    <detaileddescription>
<para><parameterlist kind="templateparam"><parameteritem>
<parameternamelist>
<parametername>D</parametername>
</parameternamelist>
<parameterdescription>
<para>can be of any type </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
    </detaileddescription>
    <collaborationgraph>
      <node id="1">
        <label>var::matrix&lt; D &gt;</label>
        <link refid="classvar_1_1matrix"/>
      </node>
    </collaborationgraph>
    <location file="includes/variables/matrix.hpp" line="14" column="16" bodyfile="includes/variables/matrix.hpp" bodystart="15" bodyend="1887"/>
    <listofallmembers>
      <member refid="classvar_1_1matrix_1ab19eccf26d9fefbca395626e7790318b" prot="private" virt="non-virtual"><scope>var::matrix</scope><name>_col</name></member>
      <member refid="classvar_1_1matrix_1aaeb36b64e9670ebf5874fc26da0cfe2a" prot="private" virt="non-virtual"><scope>var::matrix</scope><name>_row</name></member>
      <member refid="classvar_1_1matrix_1ad78a167d7400fac474fd03cf3363defb" prot="public" virt="non-virtual"><scope>var::matrix</scope><name>adj</name></member>
      <member refid="classvar_1_1matrix_1a989e36acf06c040379a78946442eed25" prot="public" virt="non-virtual"><scope>var::matrix</scope><name>begin</name></member>
      <member refid="classvar_1_1matrix_1a44444530f6334c9cd3f9c61c7aa91af8" prot="public" virt="non-virtual"><scope>var::matrix</scope><name>begin</name></member>
      <member refid="classvar_1_1matrix_1a81c4b4795406aa26c149f678603815a9" prot="protected" virt="non-virtual"><scope>var::matrix</scope><name>check_col</name></member>
      <member refid="classvar_1_1matrix_1abe65d7997f230b2ac6564850717be182" prot="protected" virt="non-virtual"><scope>var::matrix</scope><name>check_row</name></member>
      <member refid="classvar_1_1matrix_1a98defd0b837085eae86da59649934392" prot="protected" virt="non-virtual"><scope>var::matrix</scope><name>check_size</name></member>
      <member refid="classvar_1_1matrix_1ac97536b4f94f1dd614fb6267c07dd2b7" prot="public" virt="non-virtual"><scope>var::matrix</scope><name>cofactor</name></member>
      <member refid="classvar_1_1matrix_1a18f1458c2532b0aabbb3370d9556e745" prot="public" virt="non-virtual"><scope>var::matrix</scope><name>col</name></member>
      <member refid="classvar_1_1matrix_1ab841b2356b699bcea97baccf5971d834" prot="public" virt="non-virtual"><scope>var::matrix</scope><name>col_op</name></member>
      <member refid="classvar_1_1matrix_1a76ad44aa71ba8eaa73d9d4fd1431d3af" prot="public" virt="non-virtual"><scope>var::matrix</scope><name>col_swap</name></member>
      <member refid="classvar_1_1matrix_1aeaf9bfe82e5fadff5e7c245dc2ed7691" prot="private" virt="non-virtual"><scope>var::matrix</scope><name>data</name></member>
      <member refid="classvar_1_1matrix_1af4104a0aa496424fc75256263e412d9f" prot="public" virt="non-virtual"><scope>var::matrix</scope><name>det</name></member>
      <member refid="classvar_1_1matrix_1aac8393e86296c741a8e1023b329620b1" prot="protected" virt="non-virtual"><scope>var::matrix</scope><name>DET</name></member>
      <member refid="classvar_1_1matrix_1a905ab851aebd8b3781e6605bec99e0a8" prot="public" virt="non-virtual"><scope>var::matrix</scope><name>end</name></member>
      <member refid="classvar_1_1matrix_1a493b344c09c695efcd3fec6065059948" prot="public" virt="non-virtual"><scope>var::matrix</scope><name>end</name></member>
      <member refid="classvar_1_1matrix_1a148b9d63ce138a9478aa8adb9e217986" prot="public" virt="non-virtual"><scope>var::matrix</scope><name>erase_col</name></member>
      <member refid="classvar_1_1matrix_1a1ee2cc11235c4798bb70ed96a0fbf29a" prot="public" virt="non-virtual"><scope>var::matrix</scope><name>erase_row</name></member>
      <member refid="classvar_1_1matrix_1a6de49f43eb3bc3f3ed6c0b658a97605c" prot="public" virt="non-virtual"><scope>var::matrix</scope><name>get_col</name></member>
      <member refid="classvar_1_1matrix_1ae1b45b32d3db9d173a5a689b8616866f" prot="public" virt="non-virtual"><scope>var::matrix</scope><name>get_element</name></member>
      <member refid="classvar_1_1matrix_1aa27021aa738d82a6b9dde82de321f5a1" prot="public" virt="non-virtual"><scope>var::matrix</scope><name>get_row</name></member>
      <member refid="classvar_1_1matrix_1a3804122082a2fb003338f62021c405e4" prot="public" virt="non-virtual"><scope>var::matrix</scope><name>insert_col</name></member>
      <member refid="classvar_1_1matrix_1a3a4469d94dd4fd0235aaf555d3c4cc13" prot="public" virt="non-virtual"><scope>var::matrix</scope><name>insert_row</name></member>
      <member refid="classvar_1_1matrix_1a8a66138dce5fdb1b27a89349a8fd8539" prot="public" virt="non-virtual"><scope>var::matrix</scope><name>inv</name></member>
      <member refid="classvar_1_1matrix_1a9db378f2cc8cc600c2137dcea6fadfc9" prot="public" virt="non-virtual"><scope>var::matrix</scope><name>is_empty</name></member>
      <member refid="classvar_1_1matrix_1a34a63853e0456af7ba9bbd7e10b4cfc6" prot="public" virt="non-virtual"><scope>var::matrix</scope><name>is_identity</name></member>
      <member refid="classvar_1_1matrix_1a69ffd8772f87c70f5a8e525b0e4dd71f" prot="public" virt="non-virtual"><scope>var::matrix</scope><name>is_square</name></member>
      <member refid="classvar_1_1matrix_1ae6431ed7fca8e942a9887ae8fa68897b" prot="public" virt="non-virtual"><scope>var::matrix</scope><name>join_col</name></member>
      <member refid="classvar_1_1matrix_1a360593837b06f88da2dc1a189804bc36" prot="public" virt="non-virtual"><scope>var::matrix</scope><name>join_row</name></member>
      <member refid="classvar_1_1matrix_1ae63bcd0b556175ab578d7095b6cf647c" prot="public" virt="non-virtual"><scope>var::matrix</scope><name>M</name></member>
      <member refid="classvar_1_1matrix_1abf48edbbdf86b09b660ecfd2981f9711" prot="public" virt="non-virtual"><scope>var::matrix</scope><name>mat_op</name></member>
      <member refid="classvar_1_1matrix_1a7f70df54e0a1007bdce21b563281d547" prot="public" virt="non-virtual"><scope>var::matrix</scope><name>mathdiv</name></member>
      <member refid="classvar_1_1matrix_1a4a4fbae6b9a26b6b37d25dc09756882f" prot="public" virt="non-virtual"><scope>var::matrix</scope><name>mathmul</name></member>
      <member refid="classvar_1_1matrix_1aaf88fb07ffd608510c2c834a925f3926" prot="public" virt="non-virtual"><scope>var::matrix</scope><name>matrix</name></member>
      <member refid="classvar_1_1matrix_1a1060b67ddd058f180bd4b1f304562f64" prot="public" virt="non-virtual"><scope>var::matrix</scope><name>matrix</name></member>
      <member refid="classvar_1_1matrix_1a4b93fcfa4d64d096fd185ff1004256eb" prot="public" virt="non-virtual"><scope>var::matrix</scope><name>matrix</name></member>
      <member refid="classvar_1_1matrix_1a23843a10260f18c0a8ee950a4c8ba0be" prot="protected" virt="non-virtual"><scope>var::matrix</scope><name>MM</name></member>
      <member refid="classvar_1_1matrix_1aa8b1ba57b6570c21aeb6c5a841512d3a" prot="public" virt="non-virtual"><scope>var::matrix</scope><name>operator()</name></member>
      <member refid="classvar_1_1matrix_1a49e14ee296d37fb152a42b5cb69ae82c" prot="public" virt="non-virtual"><scope>var::matrix</scope><name>operator()</name></member>
      <member refid="classvar_1_1matrix_1ad71f5d3e213b100c3e4f545f74a92b86" prot="public" virt="non-virtual"><scope>var::matrix</scope><name>operator()</name></member>
      <member refid="classvar_1_1matrix_1a3d767a0fcfa836340881b6fd9f4ee4e5" prot="public" virt="non-virtual"><scope>var::matrix</scope><name>operator*</name></member>
      <member refid="classvar_1_1matrix_1a6ba280ed6e9ad194e8f2eb25a8aff4bc" prot="public" virt="non-virtual"><scope>var::matrix</scope><name>operator*</name></member>
      <member refid="classvar_1_1matrix_1afa75e72ad7b2e69f24b69e6dcfdbbcc6" prot="public" virt="non-virtual"><scope>var::matrix</scope><name>operator*</name></member>
      <member refid="classvar_1_1matrix_1aaee49a5cde5696ed5d41b2ed5b15d69a" prot="public" virt="non-virtual"><scope>var::matrix</scope><name>operator+</name></member>
      <member refid="classvar_1_1matrix_1af312c6541557412aa40999381c832613" prot="public" virt="non-virtual"><scope>var::matrix</scope><name>operator+</name></member>
      <member refid="classvar_1_1matrix_1acd798c4a5acd27adbadc15b750d13aa9" prot="public" virt="non-virtual"><scope>var::matrix</scope><name>operator+</name></member>
      <member refid="classvar_1_1matrix_1a5647352c1d02074e3fd80349226c8b46" prot="public" virt="non-virtual"><scope>var::matrix</scope><name>operator++</name></member>
      <member refid="classvar_1_1matrix_1abd66c334c203ef12d4449146ddd9c2bc" prot="public" virt="non-virtual"><scope>var::matrix</scope><name>operator+=</name></member>
      <member refid="classvar_1_1matrix_1a35688c9538dccc5762fb4d197ef4d2a8" prot="public" virt="non-virtual"><scope>var::matrix</scope><name>operator+=</name></member>
      <member refid="classvar_1_1matrix_1a277209428c74da8a84cc6e59b540cead" prot="public" virt="non-virtual"><scope>var::matrix</scope><name>operator-</name></member>
      <member refid="classvar_1_1matrix_1a20cab5ed13b35173c242b6fe0909eda6" prot="public" virt="non-virtual"><scope>var::matrix</scope><name>operator-</name></member>
      <member refid="classvar_1_1matrix_1a0052ad415d92a84561c48b2f94c5159b" prot="public" virt="non-virtual"><scope>var::matrix</scope><name>operator-</name></member>
      <member refid="classvar_1_1matrix_1aec0f669b84ef6cbf1197fda5328d2d3e" prot="public" virt="non-virtual"><scope>var::matrix</scope><name>operator-</name></member>
      <member refid="classvar_1_1matrix_1a5c89ab3b482be4e3083452ba99369032" prot="public" virt="non-virtual"><scope>var::matrix</scope><name>operator--</name></member>
      <member refid="classvar_1_1matrix_1a526e90d7aa20a8d7e5f0ffec0d921f85" prot="public" virt="non-virtual"><scope>var::matrix</scope><name>operator-=</name></member>
      <member refid="classvar_1_1matrix_1a66887a6e49d49ebd94abeebc63c514d8" prot="public" virt="non-virtual"><scope>var::matrix</scope><name>operator-=</name></member>
      <member refid="classvar_1_1matrix_1a9683bc54b999348c59ae33b261334796" prot="public" virt="non-virtual"><scope>var::matrix</scope><name>operator/</name></member>
      <member refid="classvar_1_1matrix_1a1b9e65f8c962ec95aeac343d5d6ba89b" prot="public" virt="non-virtual"><scope>var::matrix</scope><name>operator/</name></member>
      <member refid="classvar_1_1matrix_1a21bdbe6bff69133cc693c53cac84bfec" prot="public" virt="non-virtual"><scope>var::matrix</scope><name>operator/</name></member>
      <member refid="classvar_1_1matrix_1a2d10297e28d8c6c6264d6f174003d193" prot="public" virt="non-virtual"><scope>var::matrix</scope><name>operator[]</name></member>
      <member refid="classvar_1_1matrix_1ac6d4763f62d11273f092f21ad3c0760f" prot="public" virt="non-virtual"><scope>var::matrix</scope><name>plu</name></member>
      <member refid="classvar_1_1matrix_1a9043393e205545106f58c316da68df80" prot="public" virt="non-virtual"><scope>var::matrix</scope><name>pop_col</name></member>
      <member refid="classvar_1_1matrix_1adc31cf9d718ccf376c2309c4f6a5f6dd" prot="public" virt="non-virtual"><scope>var::matrix</scope><name>pop_row</name></member>
      <member refid="classvar_1_1matrix_1aca98d7a8c56c5afd964ba30b6cff7bfb" prot="public" virt="non-virtual"><scope>var::matrix</scope><name>push_col</name></member>
      <member refid="classvar_1_1matrix_1a3c1bf3836d3d6b650675e9c4ba642651" prot="public" virt="non-virtual"><scope>var::matrix</scope><name>push_row</name></member>
      <member refid="classvar_1_1matrix_1a29ff1c5a059b90bd4871d249d1c48c8b" prot="public" virt="non-virtual"><scope>var::matrix</scope><name>ref</name></member>
      <member refid="classvar_1_1matrix_1a7c8ab8d695bb6b214bcfb44a544e0c0d" prot="public" virt="non-virtual"><scope>var::matrix</scope><name>replace_col</name></member>
      <member refid="classvar_1_1matrix_1a82d3724b6ff3dd95144c9e25429c9dbe" prot="public" virt="non-virtual"><scope>var::matrix</scope><name>replace_row</name></member>
      <member refid="classvar_1_1matrix_1a9bc064083b67aaab190bd66e7248a5ba" prot="public" virt="non-virtual"><scope>var::matrix</scope><name>resize</name></member>
      <member refid="classvar_1_1matrix_1a591c6983a2637275bb1d10d2d2e1e4a5" prot="public" virt="non-virtual"><scope>var::matrix</scope><name>row</name></member>
      <member refid="classvar_1_1matrix_1ac87b738aed9ec1933d057b7b3d8eb07c" prot="public" virt="non-virtual"><scope>var::matrix</scope><name>row_op</name></member>
      <member refid="classvar_1_1matrix_1a0f45fc90c8164ef40a6c820eeef096b1" prot="public" virt="non-virtual"><scope>var::matrix</scope><name>row_swap</name></member>
      <member refid="classvar_1_1matrix_1a5e7cc7e40124be3bd4a1accfacd68b05" prot="public" virt="non-virtual"><scope>var::matrix</scope><name>rref</name></member>
      <member refid="classvar_1_1matrix_1a1c630d2e37b665b3fabcb3d76a4f8b89" prot="public" virt="non-virtual"><scope>var::matrix</scope><name>size</name></member>
      <member refid="classvar_1_1matrix_1aaaa052e8ec27a392848bd750b34f35bf" prot="public" virt="non-virtual"><scope>var::matrix</scope><name>sort_col</name></member>
      <member refid="classvar_1_1matrix_1a06fa30fdba1e861449593cfd6e1398dc" prot="public" virt="non-virtual"><scope>var::matrix</scope><name>sort_cols</name></member>
      <member refid="classvar_1_1matrix_1acc872e3d984edf32f474e221c749e632" prot="public" virt="non-virtual"><scope>var::matrix</scope><name>sort_row</name></member>
      <member refid="classvar_1_1matrix_1a84d1beb5e7704a6e7799351bf0623657" prot="public" virt="non-virtual"><scope>var::matrix</scope><name>sort_rows</name></member>
      <member refid="classvar_1_1matrix_1a54224ff2eefe0c6cd3fbeaff7a309f84" prot="protected" virt="non-virtual"><scope>var::matrix</scope><name>square</name></member>
      <member refid="classvar_1_1matrix_1af58bf7e07cebde78a2e0ad99acd5deeb" prot="public" virt="non-virtual"><scope>var::matrix</scope><name>sum</name></member>
      <member refid="classvar_1_1matrix_1a3b2c5d8983bb1dcdc250768a0f0ce578" prot="public" virt="non-virtual"><scope>var::matrix</scope><name>T</name></member>
      <member refid="classvar_1_1matrix_1a6b72a30baf5ce8386e0ea2284a1776cf" prot="protected" virt="non-virtual"><scope>var::matrix</scope><name>table</name></member>
      <member refid="classvar_1_1matrix_1a3a7b528f131d95929df267501b461183" prot="public" virt="non-virtual"><scope>var::matrix</scope><name>tr</name></member>
      <member refid="classvar_1_1matrix_1a00796c4afbd0a44f4a482c8c4f9155a3" prot="protected" virt="non-virtual"><scope>var::matrix</scope><name>TT</name></member>
      <member refid="classvar_1_1matrix_1a9eac7bafdfd06437d0b86931335fb194" prot="public" virt="non-virtual"><scope>var::matrix</scope><name>turn_to</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
