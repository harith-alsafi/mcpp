<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.9.2" xml:lang="en-US">
  <compounddef id="classvar_1_1matrix" kind="class" language="C++" prot="public">
    <compoundname>var::matrix</compoundname>
    <includes refid="matrix_8hpp" local="yes">matrix.hpp</includes>
    <innerclass refid="classvar_1_1matrix_1_1Col" prot="protected">var::matrix::Col</innerclass>
    <templateparamlist>
      <param>
        <type>typename D</type>
      </param>
    </templateparamlist>
      <sectiondef kind="protected-type">
      <memberdef kind="typedef" id="classvar_1_1matrix_1a6b72a30baf5ce8386e0ea2284a1776cf" prot="protected" static="no">
        <templateparamlist>
          <param>
            <type>typename <ref refid="classvar_1_1matrix_1a3b2c5d8983bb1dcdc250768a0f0ce578" kindref="member">T</ref></type>
          </param>
        </templateparamlist>
        <type>std::vector&lt; std::vector&lt; <ref refid="classvar_1_1matrix_1a3b2c5d8983bb1dcdc250768a0f0ce578" kindref="member">T</ref> &gt; &gt;</type>
        <definition>using var::matrix&lt; D &gt;::table =  std::vector&lt;std::vector&lt;T&gt; &gt;</definition>
        <argsstring></argsstring>
        <name>table</name>
        <briefdescription>
<para>2D vector definition </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="templateparam"><parameteritem>
<parameternamelist>
<parametername>T</parametername>
</parameternamelist>
<parameterdescription>
<para></para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="includes/variables/matrix.hpp" line="53" column="13" bodyfile="includes/variables/matrix.hpp" bodystart="53" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="private-attrib">
      <memberdef kind="variable" id="classvar_1_1matrix_1aeaf9bfe82e5fadff5e7c245dc2ed7691" prot="private" static="no" mutable="no">
        <type><ref refid="classvar_1_1matrix_1a6b72a30baf5ce8386e0ea2284a1776cf" kindref="member">table</ref>&lt; D &gt;</type>
        <definition>table&lt;D&gt; var::matrix&lt; D &gt;::data</definition>
        <argsstring></argsstring>
        <name>data</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="includes/variables/matrix.hpp" line="167" column="19" bodyfile="includes/variables/matrix.hpp" bodystart="167" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classvar_1_1matrix_1aaeb36b64e9670ebf5874fc26da0cfe2a" prot="private" static="no" mutable="no">
        <type>int</type>
        <definition>int var::matrix&lt; D &gt;::_row</definition>
        <argsstring></argsstring>
        <name>_row</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="includes/variables/matrix.hpp" line="168" column="17" bodyfile="includes/variables/matrix.hpp" bodystart="168" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classvar_1_1matrix_1ab19eccf26d9fefbca395626e7790318b" prot="private" static="no" mutable="no">
        <type>int</type>
        <definition>int var::matrix&lt; D &gt;::_col</definition>
        <argsstring></argsstring>
        <name>_col</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="includes/variables/matrix.hpp" line="169" column="17" bodyfile="includes/variables/matrix.hpp" bodystart="169" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="protected-func">
      <memberdef kind="function" id="classvar_1_1matrix_1a81c4b4795406aa26c149f678603815a9" prot="protected" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void var::matrix&lt; D &gt;::check_col</definition>
        <argsstring>(int j)</argsstring>
        <name>check_col</name>
        <param>
          <type>int</type>
          <declname>j</declname>
        </param>
        <briefdescription>
<para>checks index for columns </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>j</parametername>
</parameternamelist>
<parameterdescription>
<para>colum index </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="includes/variables/matrix.hpp" line="60" column="18" bodyfile="includes/variables/matrix.hpp" bodystart="60" bodyend="64"/>
      </memberdef>
      <memberdef kind="function" id="classvar_1_1matrix_1abe65d7997f230b2ac6564850717be182" prot="protected" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void var::matrix&lt; D &gt;::check_row</definition>
        <argsstring>(int i)</argsstring>
        <name>check_row</name>
        <param>
          <type>int</type>
          <declname>i</declname>
        </param>
        <briefdescription>
<para>checks index for rows </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>i</parametername>
</parameternamelist>
<parameterdescription>
<para>row index </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="includes/variables/matrix.hpp" line="71" column="18" bodyfile="includes/variables/matrix.hpp" bodystart="71" bodyend="75"/>
      </memberdef>
      <memberdef kind="function" id="classvar_1_1matrix_1a00796c4afbd0a44f4a482c8c4f9155a3" prot="protected" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classvar_1_1matrix_1a6b72a30baf5ce8386e0ea2284a1776cf" kindref="member">table</ref>&lt; D &gt;</type>
        <definition>table&lt;D&gt; var::matrix&lt; D &gt;::TT</definition>
        <argsstring>()</argsstring>
        <name>TT</name>
        <briefdescription>
<para>Returns transpose for data. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>table&lt;D&gt; </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="includes/variables/matrix.hpp" line="82" column="19" bodyfile="includes/variables/matrix.hpp" bodystart="82" bodyend="96"/>
      </memberdef>
      <memberdef kind="function" id="classvar_1_1matrix_1a98defd0b837085eae86da59649934392" prot="protected" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void var::matrix&lt; D &gt;::check_size</definition>
        <argsstring>(int r, int c)</argsstring>
        <name>check_size</name>
        <param>
          <type>int</type>
          <declname>r</declname>
        </param>
        <param>
          <type>int</type>
          <declname>c</declname>
        </param>
        <briefdescription>
<para>Checks other matrix size for operators. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>r</parametername>
</parameternamelist>
<parameterdescription>
<para>row <linebreak/>
 </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>c</parametername>
</parameternamelist>
<parameterdescription>
<para>colum </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="includes/variables/matrix.hpp" line="104" column="18" bodyfile="includes/variables/matrix.hpp" bodystart="104" bodyend="108"/>
      </memberdef>
      <memberdef kind="function" id="classvar_1_1matrix_1aeb8bdaf174065f964bdd63e3c55ec5e2" prot="protected" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classvar_1_1matrix" kindref="compound">matrix</ref></type>
        <definition>matrix var::matrix&lt; D &gt;::M</definition>
        <argsstring>(int i, int j, matrix &amp;other)</argsstring>
        <name>M</name>
        <param>
          <type>int</type>
          <declname>i</declname>
        </param>
        <param>
          <type>int</type>
          <declname>j</declname>
        </param>
        <param>
          <type><ref refid="classvar_1_1matrix" kindref="compound">matrix</ref> &amp;</type>
          <declname>other</declname>
        </param>
        <briefdescription>
<para>minor of a matrix </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>i</parametername>
</parameternamelist>
<parameterdescription>
<para>row </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>j</parametername>
</parameternamelist>
<parameterdescription>
<para>colum </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>other</parametername>
</parameternamelist>
<parameterdescription>
<para>matrix </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>matrix </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="includes/variables/matrix.hpp" line="118" column="20" bodyfile="includes/variables/matrix.hpp" bodystart="118" bodyend="135"/>
      </memberdef>
      <memberdef kind="function" id="classvar_1_1matrix_1aac8393e86296c741a8e1023b329620b1" prot="protected" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>D</type>
        <definition>D var::matrix&lt; D &gt;::DET</definition>
        <argsstring>(matrix a)</argsstring>
        <name>DET</name>
        <param>
          <type><ref refid="classvar_1_1matrix" kindref="compound">matrix</ref></type>
          <declname>a</declname>
        </param>
        <briefdescription>
<para>Recursive determinant. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>a</parametername>
</parameternamelist>
<parameterdescription>
<para>matrix </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>D <linebreak/>
 </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="includes/variables/matrix.hpp" line="143" column="15" bodyfile="includes/variables/matrix.hpp" bodystart="143" bodyend="154"/>
      </memberdef>
      <memberdef kind="function" id="classvar_1_1matrix_1a54224ff2eefe0c6cd3fbeaff7a309f84" prot="protected" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void var::matrix&lt; D &gt;::square</definition>
        <argsstring>()</argsstring>
        <name>square</name>
        <briefdescription>
<para>throws exception if matrix is not a square </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="includes/variables/matrix.hpp" line="160" column="18" bodyfile="includes/variables/matrix.hpp" bodystart="160" bodyend="164"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-func">
      <memberdef kind="function" id="classvar_1_1matrix_1aaf88fb07ffd608510c2c834a925f3926" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type></type>
        <definition>var::matrix&lt; D &gt;::matrix</definition>
        <argsstring>(int r, int c)</argsstring>
        <name>matrix</name>
        <param>
          <type>int</type>
          <declname>r</declname>
        </param>
        <param>
          <type>int</type>
          <declname>c</declname>
        </param>
        <briefdescription>
<para>Construct a new matrix object Usage: </para>
        </briefdescription>
        <detaileddescription>
<para><programlisting filename=".cpp"><codeline><highlight class="normal"><ref refid="classvar_1_1matrix" kindref="compound">var::matrix&lt;int&gt;</ref><sp/>m(2,<sp/>3);<sp/></highlight><highlight class="comment">//<sp/>2<sp/>rows,<sp/>3<sp/>colums</highlight></codeline>
</programlisting> <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>r</parametername>
</parameternamelist>
<parameterdescription>
<para>number of rows </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>c</parametername>
</parameternamelist>
<parameterdescription>
<para>number of colums </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="includes/variables/matrix.hpp" line="180" column="13" bodyfile="includes/variables/matrix.hpp" bodystart="180" bodyend="182"/>
      </memberdef>
      <memberdef kind="function" id="classvar_1_1matrix_1a1060b67ddd058f180bd4b1f304562f64" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type></type>
        <definition>var::matrix&lt; D &gt;::matrix</definition>
        <argsstring>()</argsstring>
        <name>matrix</name>
        <briefdescription>
<para>Default construct a new matrix object Usage: </para>
        </briefdescription>
        <detaileddescription>
<para><programlisting filename=".cpp"><codeline><highlight class="normal"><ref refid="classvar_1_1matrix" kindref="compound">var::matrix&lt;int&gt;</ref><sp/>m;</highlight></codeline>
</programlisting> </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="includes/variables/matrix.hpp" line="191" column="13" bodyfile="includes/variables/matrix.hpp" bodystart="191" bodyend="191"/>
      </memberdef>
      <memberdef kind="function" id="classvar_1_1matrix_1a4b93fcfa4d64d096fd185ff1004256eb" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type></type>
        <definition>var::matrix&lt; D &gt;::matrix</definition>
        <argsstring>(std::initializer_list&lt; std::initializer_list&lt; D &gt;&gt; a)</argsstring>
        <name>matrix</name>
        <param>
          <type>std::initializer_list&lt; std::initializer_list&lt; D &gt;&gt;</type>
          <declname>a</declname>
        </param>
        <briefdescription>
<para>Construct a new matrix object Usage: </para>
        </briefdescription>
        <detaileddescription>
<para><programlisting filename=".cpp"><codeline><highlight class="normal"><ref refid="classvar_1_1matrix" kindref="compound">var::matrix&lt;int&gt;</ref><sp/>m<sp/>=<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>{1,<sp/>2,<sp/>3},</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>{4,<sp/>5,<sp/>6},</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>{7,<sp/>8,<sp/>9}</highlight></codeline>
<codeline><highlight class="normal">};</highlight></codeline>
</programlisting> <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>a</parametername>
</parameternamelist>
<parameterdescription>
<para>initializer list </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="includes/variables/matrix.hpp" line="205" column="13" bodyfile="includes/variables/matrix.hpp" bodystart="205" bodyend="216"/>
      </memberdef>
      <memberdef kind="function" id="classvar_1_1matrix_1a9bc064083b67aaab190bd66e7248a5ba" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void var::matrix&lt; D &gt;::resize</definition>
        <argsstring>(int r, int c)</argsstring>
        <name>resize</name>
        <param>
          <type>int</type>
          <declname>r</declname>
        </param>
        <param>
          <type>int</type>
          <declname>c</declname>
        </param>
        <briefdescription>
<para>Resizes the matrix Usage: </para>
        </briefdescription>
        <detaileddescription>
<para><programlisting filename=".cpp"><codeline><highlight class="normal">m.resize(5,<sp/>6);</highlight></codeline>
</programlisting></para>
<para>!!! warning &quot;Warning&quot; <linebreak/>
 <preformatted>
    This resets all elements in the matrix
</preformatted> <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>r</parametername>
</parameternamelist>
<parameterdescription>
<para>number of rows </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>c</parametername>
</parameternamelist>
<parameterdescription>
<para>number of colums </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="includes/variables/matrix.hpp" line="232" column="18" bodyfile="includes/variables/matrix.hpp" bodystart="232" bodyend="243"/>
      </memberdef>
      <memberdef kind="function" id="classvar_1_1matrix_1a591c6983a2637275bb1d10d2d2e1e4a5" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>int</type>
        <definition>int var::matrix&lt; D &gt;::row</definition>
        <argsstring>()</argsstring>
        <name>row</name>
        <briefdescription>
<para>Returns the number of rows. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>int </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="includes/variables/matrix.hpp" line="250" column="17" bodyfile="includes/variables/matrix.hpp" bodystart="250" bodyend="252"/>
      </memberdef>
      <memberdef kind="function" id="classvar_1_1matrix_1a18f1458c2532b0aabbb3370d9556e745" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>int</type>
        <definition>int var::matrix&lt; D &gt;::col</definition>
        <argsstring>()</argsstring>
        <name>col</name>
        <briefdescription>
<para>Returns the number of columns. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>int </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="includes/variables/matrix.hpp" line="259" column="17" bodyfile="includes/variables/matrix.hpp" bodystart="259" bodyend="261"/>
      </memberdef>
      <memberdef kind="function" id="classvar_1_1matrix_1a1c630d2e37b665b3fabcb3d76a4f8b89" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>int</type>
        <definition>int var::matrix&lt; D &gt;::size</definition>
        <argsstring>()</argsstring>
        <name>size</name>
        <briefdescription>
<para>Returns total number of elements. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>int </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="includes/variables/matrix.hpp" line="268" column="17" bodyfile="includes/variables/matrix.hpp" bodystart="268" bodyend="270"/>
      </memberdef>
      <memberdef kind="function" id="classvar_1_1matrix_1aa27021aa738d82a6b9dde82de321f5a1" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>std::vector&lt; D &gt;</type>
        <definition>std::vector&lt;D&gt; var::matrix&lt; D &gt;::get_row</definition>
        <argsstring>(int i)</argsstring>
        <name>get_row</name>
        <param>
          <type>int</type>
          <declname>i</declname>
        </param>
        <briefdescription>
<para>Returns the row at an index. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>i</parametername>
</parameternamelist>
<parameterdescription>
<para>row index <linebreak/>
 </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>std::vector&lt;D&gt; </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="includes/variables/matrix.hpp" line="278" column="25" bodyfile="includes/variables/matrix.hpp" bodystart="278" bodyend="281"/>
      </memberdef>
      <memberdef kind="function" id="classvar_1_1matrix_1a6de49f43eb3bc3f3ed6c0b658a97605c" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>std::vector&lt; D &gt;</type>
        <definition>std::vector&lt;D&gt; var::matrix&lt; D &gt;::get_col</definition>
        <argsstring>(int j)</argsstring>
        <name>get_col</name>
        <param>
          <type>int</type>
          <declname>j</declname>
        </param>
        <briefdescription>
<para>returns the colum at an index </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>j</parametername>
</parameternamelist>
<parameterdescription>
<para>colum index </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para><computeroutput>std::vector&lt;D&gt;</computeroutput> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="includes/variables/matrix.hpp" line="289" column="25" bodyfile="includes/variables/matrix.hpp" bodystart="289" bodyend="296"/>
      </memberdef>
      <memberdef kind="function" id="classvar_1_1matrix_1aa141055a5f25f5d62dd26ae0e915f6af" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void var::matrix&lt; D &gt;::push_row</definition>
        <argsstring>(const std::vector&lt; D &gt; &amp;a)</argsstring>
        <name>push_row</name>
        <param>
          <type>const std::vector&lt; D &gt; &amp;</type>
          <declname>a</declname>
        </param>
        <briefdescription>
<para>insterts row at the end </para>
        </briefdescription>
        <detaileddescription>
<para>!!! warning &quot;Exception&quot; <linebreak/>
 <preformatted>
    This will throw an ``stdinvalid_argument`` if there is a size mismatch. 
</preformatted> <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>a</parametername>
</parameternamelist>
<parameterdescription>
<para></para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="includes/variables/matrix.hpp" line="307" column="18" bodyfile="includes/variables/matrix.hpp" bodystart="307" bodyend="319"/>
      </memberdef>
      <memberdef kind="function" id="classvar_1_1matrix_1a9dd2a2ef22d04744482819c77b80f031" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void var::matrix&lt; D &gt;::push_col</definition>
        <argsstring>(const std::vector&lt; D &gt; &amp;a)</argsstring>
        <name>push_col</name>
        <param>
          <type>const std::vector&lt; D &gt; &amp;</type>
          <declname>a</declname>
        </param>
        <briefdescription>
<para>insterts column at the end </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>a</parametername>
</parameternamelist>
<parameterdescription>
<para></para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="includes/variables/matrix.hpp" line="326" column="18" bodyfile="includes/variables/matrix.hpp" bodystart="326" bodyend="342"/>
      </memberdef>
      <memberdef kind="function" id="classvar_1_1matrix_1a3a4469d94dd4fd0235aaf555d3c4cc13" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void var::matrix&lt; D &gt;::insert_row</definition>
        <argsstring>(int i, std::vector&lt; D &gt; a)</argsstring>
        <name>insert_row</name>
        <param>
          <type>int</type>
          <declname>i</declname>
        </param>
        <param>
          <type>std::vector&lt; D &gt;</type>
          <declname>a</declname>
        </param>
        <briefdescription>
<para>inserts row at specefic index </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>i</parametername>
</parameternamelist>
<parameterdescription>
<para></para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>a</parametername>
</parameternamelist>
<parameterdescription>
<para></para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="includes/variables/matrix.hpp" line="350" column="18" bodyfile="includes/variables/matrix.hpp" bodystart="350" bodyend="359"/>
      </memberdef>
      <memberdef kind="function" id="classvar_1_1matrix_1abe7454d75f120bebef0ee5c2c1b262a7" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void var::matrix&lt; D &gt;::insert_col</definition>
        <argsstring>(int j, const std::vector&lt; D &gt; &amp;a)</argsstring>
        <name>insert_col</name>
        <param>
          <type>int</type>
          <declname>j</declname>
        </param>
        <param>
          <type>const std::vector&lt; D &gt; &amp;</type>
          <declname>a</declname>
        </param>
        <briefdescription>
<para>inserts column at specefic index </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>j</parametername>
</parameternamelist>
<parameterdescription>
<para></para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>a</parametername>
</parameternamelist>
<parameterdescription>
<para></para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="includes/variables/matrix.hpp" line="367" column="18" bodyfile="includes/variables/matrix.hpp" bodystart="367" bodyend="379"/>
      </memberdef>
      <memberdef kind="function" id="classvar_1_1matrix_1adc31cf9d718ccf376c2309c4f6a5f6dd" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void var::matrix&lt; D &gt;::pop_row</definition>
        <argsstring>()</argsstring>
        <name>pop_row</name>
        <briefdescription>
<para>removes last row </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="includes/variables/matrix.hpp" line="385" column="18" bodyfile="includes/variables/matrix.hpp" bodystart="385" bodyend="391"/>
      </memberdef>
      <memberdef kind="function" id="classvar_1_1matrix_1a9043393e205545106f58c316da68df80" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void var::matrix&lt; D &gt;::pop_col</definition>
        <argsstring>()</argsstring>
        <name>pop_col</name>
        <briefdescription>
<para>removes last colum </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="includes/variables/matrix.hpp" line="397" column="18" bodyfile="includes/variables/matrix.hpp" bodystart="397" bodyend="405"/>
      </memberdef>
      <memberdef kind="function" id="classvar_1_1matrix_1a1ee2cc11235c4798bb70ed96a0fbf29a" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void var::matrix&lt; D &gt;::erase_row</definition>
        <argsstring>(int i)</argsstring>
        <name>erase_row</name>
        <param>
          <type>int</type>
          <declname>i</declname>
        </param>
        <briefdescription>
<para>erase row at index </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>i</parametername>
</parameternamelist>
<parameterdescription>
<para></para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="includes/variables/matrix.hpp" line="412" column="18" bodyfile="includes/variables/matrix.hpp" bodystart="412" bodyend="416"/>
      </memberdef>
      <memberdef kind="function" id="classvar_1_1matrix_1a148b9d63ce138a9478aa8adb9e217986" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void var::matrix&lt; D &gt;::erase_col</definition>
        <argsstring>(int j)</argsstring>
        <name>erase_col</name>
        <param>
          <type>int</type>
          <declname>j</declname>
        </param>
        <briefdescription>
<para>erase column at index </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>j</parametername>
</parameternamelist>
<parameterdescription>
<para></para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="includes/variables/matrix.hpp" line="423" column="18" bodyfile="includes/variables/matrix.hpp" bodystart="423" bodyend="429"/>
      </memberdef>
      <memberdef kind="function" id="classvar_1_1matrix_1a84d1beb5e7704a6e7799351bf0623657" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void var::matrix&lt; D &gt;::sort_rows</definition>
        <argsstring>(int d=1)</argsstring>
        <name>sort_rows</name>
        <param>
          <type>int</type>
          <declname>d</declname>
          <defval>1</defval>
        </param>
        <briefdescription>
<para>sorts all rows </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>d</parametername>
</parameternamelist>
<parameterdescription>
<para>d = 1 is accending order -&gt; sort_rows() d = 0 is decending order -&gt; sort_rows(0) </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="includes/variables/matrix.hpp" line="438" column="18" bodyfile="includes/variables/matrix.hpp" bodystart="438" bodyend="442"/>
      </memberdef>
      <memberdef kind="function" id="classvar_1_1matrix_1a06fa30fdba1e861449593cfd6e1398dc" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void var::matrix&lt; D &gt;::sort_cols</definition>
        <argsstring>(int d=1)</argsstring>
        <name>sort_cols</name>
        <param>
          <type>int</type>
          <declname>d</declname>
          <defval>1</defval>
        </param>
        <briefdescription>
<para>sorts all columns </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>d</parametername>
</parameternamelist>
<parameterdescription>
<para>d = 1 is accending order -&gt; sort_cols() d = 0 is decending order -&gt; sort_cols(0) </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="includes/variables/matrix.hpp" line="451" column="18" bodyfile="includes/variables/matrix.hpp" bodystart="451" bodyend="455"/>
      </memberdef>
      <memberdef kind="function" id="classvar_1_1matrix_1acc872e3d984edf32f474e221c749e632" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void var::matrix&lt; D &gt;::sort_row</definition>
        <argsstring>(int i, int d=1)</argsstring>
        <name>sort_row</name>
        <param>
          <type>int</type>
          <declname>i</declname>
        </param>
        <param>
          <type>int</type>
          <declname>d</declname>
          <defval>1</defval>
        </param>
        <briefdescription>
<para>sorts rows at specefic index </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>i</parametername>
</parameternamelist>
<parameterdescription>
<para></para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>d</parametername>
</parameternamelist>
<parameterdescription>
<para>d = 1 is accending order -&gt; sort_cols() d = 0 is decending order -&gt; sort_cols(0) </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="includes/variables/matrix.hpp" line="465" column="18" bodyfile="includes/variables/matrix.hpp" bodystart="465" bodyend="474"/>
      </memberdef>
      <memberdef kind="function" id="classvar_1_1matrix_1aaaa052e8ec27a392848bd750b34f35bf" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void var::matrix&lt; D &gt;::sort_col</definition>
        <argsstring>(int j, int d=1)</argsstring>
        <name>sort_col</name>
        <param>
          <type>int</type>
          <declname>j</declname>
        </param>
        <param>
          <type>int</type>
          <declname>d</declname>
          <defval>1</defval>
        </param>
        <briefdescription>
<para>sorts colum at specefic index </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>j</parametername>
</parameternamelist>
<parameterdescription>
<para></para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>d</parametername>
</parameternamelist>
<parameterdescription>
<para>d = 1 is accending order -&gt; sort_cols() d = 0 is decending order -&gt; sort_cols(0) </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="includes/variables/matrix.hpp" line="484" column="18" bodyfile="includes/variables/matrix.hpp" bodystart="484" bodyend="489"/>
      </memberdef>
      <memberdef kind="function" id="classvar_1_1matrix_1ac87b738aed9ec1933d057b7b3d8eb07c" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename LAMBDA</type>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void var::matrix&lt; D &gt;::row_op</definition>
        <argsstring>(int i, LAMBDA f)</argsstring>
        <name>row_op</name>
        <param>
          <type>int</type>
          <declname>i</declname>
        </param>
        <param>
          <type>LAMBDA</type>
          <declname>f</declname>
        </param>
        <briefdescription>
<para>does operations on specefic rows operations are specified by lambda function </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="templateparam"><parameteritem>
<parameternamelist>
<parametername>LAMBDA</parametername>
</parameternamelist>
<parameterdescription>
<para></para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>i</parametername>
</parameternamelist>
<parameterdescription>
<para></para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>f</parametername>
</parameternamelist>
<parameterdescription>
<para></para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="includes/variables/matrix.hpp" line="499" column="18" bodyfile="includes/variables/matrix.hpp" bodystart="499" bodyend="504"/>
      </memberdef>
      <memberdef kind="function" id="classvar_1_1matrix_1ab841b2356b699bcea97baccf5971d834" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename LAMBDA</type>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void var::matrix&lt; D &gt;::col_op</definition>
        <argsstring>(int j, LAMBDA f)</argsstring>
        <name>col_op</name>
        <param>
          <type>int</type>
          <declname>j</declname>
        </param>
        <param>
          <type>LAMBDA</type>
          <declname>f</declname>
        </param>
        <briefdescription>
<para>does operations on specefic colum operations are specified by lambda function </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="templateparam"><parameteritem>
<parameternamelist>
<parametername>LAMBDA</parametername>
</parameternamelist>
<parameterdescription>
<para></para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>j</parametername>
</parameternamelist>
<parameterdescription>
<para></para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>f</parametername>
</parameternamelist>
<parameterdescription>
<para></para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="includes/variables/matrix.hpp" line="514" column="18" bodyfile="includes/variables/matrix.hpp" bodystart="514" bodyend="519"/>
      </memberdef>
      <memberdef kind="function" id="classvar_1_1matrix_1a9eac7bafdfd06437d0b86931335fb194" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void var::matrix&lt; D &gt;::turn_to</definition>
        <argsstring>(D n)</argsstring>
        <name>turn_to</name>
        <param>
          <type>D</type>
          <declname>n</declname>
        </param>
        <briefdescription>
<para>converts all elements to n </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>n</parametername>
</parameternamelist>
<parameterdescription>
<para></para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="includes/variables/matrix.hpp" line="526" column="18" bodyfile="includes/variables/matrix.hpp" bodystart="526" bodyend="532"/>
      </memberdef>
      <memberdef kind="function" id="classvar_1_1matrix_1af58bf7e07cebde78a2e0ad99acd5deeb" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>D</type>
        <definition>D var::matrix&lt; D &gt;::sum</definition>
        <argsstring>()</argsstring>
        <name>sum</name>
        <briefdescription>
<para>sum of all elements </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>D </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="includes/variables/matrix.hpp" line="539" column="15" bodyfile="includes/variables/matrix.hpp" bodystart="539" bodyend="547"/>
      </memberdef>
      <memberdef kind="function" id="classvar_1_1matrix_1a3a7b528f131d95929df267501b461183" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>D</type>
        <definition>D var::matrix&lt; D &gt;::tr</definition>
        <argsstring>()</argsstring>
        <name>tr</name>
        <briefdescription>
<para>trace of a matrix </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>D </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="includes/variables/matrix.hpp" line="554" column="15" bodyfile="includes/variables/matrix.hpp" bodystart="554" bodyend="561"/>
      </memberdef>
      <memberdef kind="function" id="classvar_1_1matrix_1a3b2c5d8983bb1dcdc250768a0f0ce578" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classvar_1_1matrix" kindref="compound">matrix</ref></type>
        <definition>matrix var::matrix&lt; D &gt;::T</definition>
        <argsstring>()</argsstring>
        <name>T</name>
        <briefdescription>
<para>returns transpose </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>matrix </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="includes/variables/matrix.hpp" line="568" column="20" bodyfile="includes/variables/matrix.hpp" bodystart="568" bodyend="573"/>
      </memberdef>
      <memberdef kind="function" id="classvar_1_1matrix_1af4104a0aa496424fc75256263e412d9f" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>D</type>
        <definition>D var::matrix&lt; D &gt;::det</definition>
        <argsstring>()</argsstring>
        <name>det</name>
        <briefdescription>
<para>returns the determinant </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>D </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="includes/variables/matrix.hpp" line="580" column="15" bodyfile="includes/variables/matrix.hpp" bodystart="580" bodyend="583"/>
      </memberdef>
      <memberdef kind="function" id="classvar_1_1matrix_1ac97536b4f94f1dd614fb6267c07dd2b7" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classvar_1_1matrix" kindref="compound">matrix</ref></type>
        <definition>matrix var::matrix&lt; D &gt;::cofactor</definition>
        <argsstring>()</argsstring>
        <name>cofactor</name>
        <briefdescription>
<para>returns cofactor matrix </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>matrix </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="includes/variables/matrix.hpp" line="590" column="20" bodyfile="includes/variables/matrix.hpp" bodystart="590" bodyend="600"/>
      </memberdef>
      <memberdef kind="function" id="classvar_1_1matrix_1ad78a167d7400fac474fd03cf3363defb" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classvar_1_1matrix" kindref="compound">matrix</ref></type>
        <definition>matrix var::matrix&lt; D &gt;::adj</definition>
        <argsstring>()</argsstring>
        <name>adj</name>
        <briefdescription>
<para>adjugate of a matrix </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>matrix </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="includes/variables/matrix.hpp" line="607" column="20" bodyfile="includes/variables/matrix.hpp" bodystart="607" bodyend="611"/>
      </memberdef>
      <memberdef kind="function" id="classvar_1_1matrix_1a8a66138dce5fdb1b27a89349a8fd8539" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classvar_1_1matrix" kindref="compound">matrix</ref></type>
        <definition>matrix var::matrix&lt; D &gt;::inv</definition>
        <argsstring>()</argsstring>
        <name>inv</name>
        <briefdescription>
<para>returns inverse of a matrix </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>matrix </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="includes/variables/matrix.hpp" line="618" column="20" bodyfile="includes/variables/matrix.hpp" bodystart="618" bodyend="621"/>
      </memberdef>
      <memberdef kind="function" id="classvar_1_1matrix_1a5e7cc7e40124be3bd4a1accfacd68b05" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classvar_1_1matrix" kindref="compound">matrix</ref></type>
        <definition>matrix var::matrix&lt; D &gt;::rref</definition>
        <argsstring>()</argsstring>
        <name>rref</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="includes/variables/matrix.hpp" line="624" column="20" bodyfile="includes/variables/matrix.hpp" bodystart="624" bodyend="626"/>
      </memberdef>
      <memberdef kind="function" id="classvar_1_1matrix_1a69ffd8772f87c70f5a8e525b0e4dd71f" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool var::matrix&lt; D &gt;::is_square</definition>
        <argsstring>()</argsstring>
        <name>is_square</name>
        <briefdescription>
<para>checks if matrix is square </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>true </para>
</simplesect>
<simplesect kind="return"><para>false </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="includes/variables/matrix.hpp" line="634" column="18" bodyfile="includes/variables/matrix.hpp" bodystart="634" bodyend="636"/>
      </memberdef>
      <memberdef kind="function" id="classvar_1_1matrix_1a34a63853e0456af7ba9bbd7e10b4cfc6" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool var::matrix&lt; D &gt;::is_identity</definition>
        <argsstring>()</argsstring>
        <name>is_identity</name>
        <briefdescription>
<para>checks if matrix is an identity matrix </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>true </para>
</simplesect>
<simplesect kind="return"><para>false </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="includes/variables/matrix.hpp" line="644" column="18" bodyfile="includes/variables/matrix.hpp" bodystart="644" bodyend="663"/>
      </memberdef>
      <memberdef kind="function" id="classvar_1_1matrix_1a2d10297e28d8c6c6264d6f174003d193" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classvar_1_1matrix_1_1Col" kindref="compound">Col</ref></type>
        <definition>Col var::matrix&lt; D &gt;::operator[]</definition>
        <argsstring>(int i)</argsstring>
        <name>operator[]</name>
        <param>
          <type>int</type>
          <declname>i</declname>
        </param>
        <briefdescription>
<para>[] operator for rows calls another [] operator for column </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>i</parametername>
</parameternamelist>
<parameterdescription>
<para></para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Row </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="includes/variables/matrix.hpp" line="676" column="17" bodyfile="includes/variables/matrix.hpp" bodystart="676" bodyend="678"/>
      </memberdef>
      <memberdef kind="function" id="classvar_1_1matrix_1aaee49a5cde5696ed5d41b2ed5b15d69a" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classvar_1_1matrix" kindref="compound">matrix</ref></type>
        <definition>matrix var::matrix&lt; D &gt;::operator+</definition>
        <argsstring>(matrix const &amp;other)</argsstring>
        <name>operator+</name>
        <param>
          <type><ref refid="classvar_1_1matrix" kindref="compound">matrix</ref> const &amp;</type>
          <declname>other</declname>
        </param>
        <briefdescription>
<para>matrix addition </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>other</parametername>
</parameternamelist>
<parameterdescription>
<para></para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>matrix </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="includes/variables/matrix.hpp" line="688" column="20" bodyfile="includes/variables/matrix.hpp" bodystart="688" bodyend="698"/>
      </memberdef>
      <memberdef kind="function" id="classvar_1_1matrix_1af312c6541557412aa40999381c832613" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classvar_1_1matrix" kindref="compound">matrix</ref></type>
        <definition>matrix var::matrix&lt; D &gt;::operator+</definition>
        <argsstring>(D n)</argsstring>
        <name>operator+</name>
        <param>
          <type>D</type>
          <declname>n</declname>
        </param>
        <briefdescription>
<para>matrix+var </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>n</parametername>
</parameternamelist>
<parameterdescription>
<para></para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>matrix </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="includes/variables/matrix.hpp" line="706" column="20" bodyfile="includes/variables/matrix.hpp" bodystart="706" bodyend="714"/>
      </memberdef>
      <memberdef kind="function" id="classvar_1_1matrix_1a277209428c74da8a84cc6e59b540cead" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classvar_1_1matrix" kindref="compound">matrix</ref></type>
        <definition>matrix var::matrix&lt; D &gt;::operator-</definition>
        <argsstring>()</argsstring>
        <name>operator-</name>
        <briefdescription>
<para>-matrix </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>matrix </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="includes/variables/matrix.hpp" line="734" column="20" bodyfile="includes/variables/matrix.hpp" bodystart="734" bodyend="742"/>
      </memberdef>
      <memberdef kind="function" id="classvar_1_1matrix_1a20cab5ed13b35173c242b6fe0909eda6" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classvar_1_1matrix" kindref="compound">matrix</ref></type>
        <definition>matrix var::matrix&lt; D &gt;::operator-</definition>
        <argsstring>(matrix const &amp;other)</argsstring>
        <name>operator-</name>
        <param>
          <type><ref refid="classvar_1_1matrix" kindref="compound">matrix</ref> const &amp;</type>
          <declname>other</declname>
        </param>
        <briefdescription>
<para>matrix subtraction </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>other</parametername>
</parameternamelist>
<parameterdescription>
<para></para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>matrix </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="includes/variables/matrix.hpp" line="750" column="20" bodyfile="includes/variables/matrix.hpp" bodystart="750" bodyend="759"/>
      </memberdef>
      <memberdef kind="function" id="classvar_1_1matrix_1a0052ad415d92a84561c48b2f94c5159b" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classvar_1_1matrix" kindref="compound">matrix</ref></type>
        <definition>matrix var::matrix&lt; D &gt;::operator-</definition>
        <argsstring>(D n)</argsstring>
        <name>operator-</name>
        <param>
          <type>D</type>
          <declname>n</declname>
        </param>
        <briefdescription>
<para>matrix-var </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>n</parametername>
</parameternamelist>
<parameterdescription>
<para></para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>matrix </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="includes/variables/matrix.hpp" line="767" column="20" bodyfile="includes/variables/matrix.hpp" bodystart="767" bodyend="775"/>
      </memberdef>
      <memberdef kind="function" id="classvar_1_1matrix_1a3d767a0fcfa836340881b6fd9f4ee4e5" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classvar_1_1matrix" kindref="compound">matrix</ref></type>
        <definition>matrix var::matrix&lt; D &gt;::operator*</definition>
        <argsstring>(matrix const &amp;other)</argsstring>
        <name>operator*</name>
        <param>
          <type><ref refid="classvar_1_1matrix" kindref="compound">matrix</ref> const &amp;</type>
          <declname>other</declname>
        </param>
        <briefdescription>
<para>matrix multiplication </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>other</parametername>
</parameternamelist>
<parameterdescription>
<para></para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>matrix </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="includes/variables/matrix.hpp" line="797" column="20" bodyfile="includes/variables/matrix.hpp" bodystart="797" bodyend="816"/>
      </memberdef>
      <memberdef kind="function" id="classvar_1_1matrix_1a6ba280ed6e9ad194e8f2eb25a8aff4bc" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classvar_1_1matrix" kindref="compound">matrix</ref></type>
        <definition>matrix var::matrix&lt; D &gt;::operator*</definition>
        <argsstring>(D n)</argsstring>
        <name>operator*</name>
        <param>
          <type>D</type>
          <declname>n</declname>
        </param>
        <briefdescription>
<para>matrix*var </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>n</parametername>
</parameternamelist>
<parameterdescription>
<para></para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>matrix </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="includes/variables/matrix.hpp" line="824" column="20" bodyfile="includes/variables/matrix.hpp" bodystart="824" bodyend="832"/>
      </memberdef>
      <memberdef kind="function" id="classvar_1_1matrix_1a9683bc54b999348c59ae33b261334796" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classvar_1_1matrix" kindref="compound">matrix</ref></type>
        <definition>matrix var::matrix&lt; D &gt;::operator/</definition>
        <argsstring>(matrix &amp;other)</argsstring>
        <name>operator/</name>
        <param>
          <type><ref refid="classvar_1_1matrix" kindref="compound">matrix</ref> &amp;</type>
          <declname>other</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="includes/variables/matrix.hpp" line="847" column="20" bodyfile="includes/variables/matrix.hpp" bodystart="847" bodyend="849"/>
      </memberdef>
      <memberdef kind="function" id="classvar_1_1matrix_1a1b9e65f8c962ec95aeac343d5d6ba89b" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classvar_1_1matrix" kindref="compound">matrix</ref></type>
        <definition>matrix var::matrix&lt; D &gt;::operator/</definition>
        <argsstring>(D n)</argsstring>
        <name>operator/</name>
        <param>
          <type>D</type>
          <declname>n</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="includes/variables/matrix.hpp" line="851" column="20" bodyfile="includes/variables/matrix.hpp" bodystart="851" bodyend="861"/>
      </memberdef>
      <memberdef kind="function" id="classvar_1_1matrix_1a7629935f8527febca8ff4a34dff026ff" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classvar_1_1matrix" kindref="compound">matrix</ref></type>
        <definition>matrix var::matrix&lt; D &gt;::operator%</definition>
        <argsstring>(D n)</argsstring>
        <name>operator%</name>
        <param>
          <type>D</type>
          <declname>n</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="includes/variables/matrix.hpp" line="874" column="20" bodyfile="includes/variables/matrix.hpp" bodystart="874" bodyend="882"/>
      </memberdef>
      <memberdef kind="function" id="classvar_1_1matrix_1a5f9279a96dbcea4c2f124a664fb54d26" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool var::matrix&lt; D &gt;::operator==</definition>
        <argsstring>(matrix other)</argsstring>
        <name>operator==</name>
        <param>
          <type><ref refid="classvar_1_1matrix" kindref="compound">matrix</ref></type>
          <declname>other</declname>
        </param>
        <briefdescription>
<para>equals method for all elements </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>other</parametername>
</parameternamelist>
<parameterdescription>
<para></para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>true </para>
</simplesect>
<simplesect kind="return"><para>false </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="includes/variables/matrix.hpp" line="893" column="18" bodyfile="includes/variables/matrix.hpp" bodystart="893" bodyend="904"/>
      </memberdef>
      <memberdef kind="function" id="classvar_1_1matrix_1aa4f3ec80a3e1f97ff9eb9c7fccfff043" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool var::matrix&lt; D &gt;::operator&lt;</definition>
        <argsstring>(matrix other)</argsstring>
        <name>operator&lt;</name>
        <param>
          <type><ref refid="classvar_1_1matrix" kindref="compound">matrix</ref></type>
          <declname>other</declname>
        </param>
        <briefdescription>
<para>less than operator </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>other</parametername>
</parameternamelist>
<parameterdescription>
<para></para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>true </para>
</simplesect>
<simplesect kind="return"><para>false </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="includes/variables/matrix.hpp" line="913" column="13" bodyfile="includes/variables/matrix.hpp" bodystart="913" bodyend="925"/>
      </memberdef>
      <memberdef kind="function" id="classvar_1_1matrix_1a1e8a7d11cb6bb76ffd28639b9b73a8d8" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool var::matrix&lt; D &gt;::operator&gt;</definition>
        <argsstring>(matrix other)</argsstring>
        <name>operator&gt;</name>
        <param>
          <type><ref refid="classvar_1_1matrix" kindref="compound">matrix</ref></type>
          <declname>other</declname>
        </param>
        <briefdescription>
<para>more than </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>other</parametername>
</parameternamelist>
<parameterdescription>
<para></para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>true </para>
</simplesect>
<simplesect kind="return"><para>false </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="includes/variables/matrix.hpp" line="934" column="18" bodyfile="includes/variables/matrix.hpp" bodystart="934" bodyend="936"/>
      </memberdef>
      <memberdef kind="function" id="classvar_1_1matrix_1ad030c6e976b07c8177ab7cda48548ba1" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool var::matrix&lt; D &gt;::operator&lt;=</definition>
        <argsstring>(matrix other)</argsstring>
        <name>operator&lt;=</name>
        <param>
          <type><ref refid="classvar_1_1matrix" kindref="compound">matrix</ref></type>
          <declname>other</declname>
        </param>
        <briefdescription>
<para>less than or equal </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>other</parametername>
</parameternamelist>
<parameterdescription>
<para></para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>true </para>
</simplesect>
<simplesect kind="return"><para>false </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="includes/variables/matrix.hpp" line="945" column="13" bodyfile="includes/variables/matrix.hpp" bodystart="945" bodyend="955"/>
      </memberdef>
      <memberdef kind="function" id="classvar_1_1matrix_1a208af77ec9a1ac74ed6e0f55af7a4e94" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool var::matrix&lt; D &gt;::operator&gt;=</definition>
        <argsstring>(matrix other)</argsstring>
        <name>operator&gt;=</name>
        <param>
          <type><ref refid="classvar_1_1matrix" kindref="compound">matrix</ref></type>
          <declname>other</declname>
        </param>
        <briefdescription>
<para>more than or equal </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>other</parametername>
</parameternamelist>
<parameterdescription>
<para></para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>true </para>
</simplesect>
<simplesect kind="return"><para>false </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="includes/variables/matrix.hpp" line="964" column="18" bodyfile="includes/variables/matrix.hpp" bodystart="964" bodyend="966"/>
      </memberdef>
      <memberdef kind="function" id="classvar_1_1matrix_1aacd1f3a184f36944918cb26b8ac6cccb" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool var::matrix&lt; D &gt;::operator!=</definition>
        <argsstring>(matrix other)</argsstring>
        <name>operator!=</name>
        <param>
          <type><ref refid="classvar_1_1matrix" kindref="compound">matrix</ref></type>
          <declname>other</declname>
        </param>
        <briefdescription>
<para>not equal method </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>other</parametername>
</parameternamelist>
<parameterdescription>
<para></para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>true </para>
</simplesect>
<simplesect kind="return"><para>false </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="includes/variables/matrix.hpp" line="975" column="18" bodyfile="includes/variables/matrix.hpp" bodystart="975" bodyend="977"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="friend">
      <memberdef kind="friend" id="classvar_1_1matrix_1acd798c4a5acd27adbadc15b750d13aa9" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classvar_1_1matrix" kindref="compound">matrix</ref></type>
        <definition>matrix operator+</definition>
        <argsstring>(D n, matrix &amp;other)</argsstring>
        <name>operator+</name>
        <param>
          <type>D</type>
          <declname>n</declname>
        </param>
        <param>
          <type><ref refid="classvar_1_1matrix" kindref="compound">matrix</ref> &amp;</type>
          <declname>other</declname>
        </param>
        <briefdescription>
<para>var+matrix </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>n</parametername>
</parameternamelist>
<parameterdescription>
<para></para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>other</parametername>
</parameternamelist>
<parameterdescription>
<para></para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>matrix </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="includes/variables/matrix.hpp" line="723" column="27" bodyfile="includes/variables/matrix.hpp" bodystart="723" bodyend="725"/>
      </memberdef>
      <memberdef kind="friend" id="classvar_1_1matrix_1aec0f669b84ef6cbf1197fda5328d2d3e" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classvar_1_1matrix" kindref="compound">matrix</ref></type>
        <definition>matrix operator-</definition>
        <argsstring>(D n, matrix &amp;other)</argsstring>
        <name>operator-</name>
        <param>
          <type>D</type>
          <declname>n</declname>
        </param>
        <param>
          <type><ref refid="classvar_1_1matrix" kindref="compound">matrix</ref> &amp;</type>
          <declname>other</declname>
        </param>
        <briefdescription>
<para>var-matrix </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>n</parametername>
</parameternamelist>
<parameterdescription>
<para></para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>other</parametername>
</parameternamelist>
<parameterdescription>
<para></para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>matrix </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="includes/variables/matrix.hpp" line="784" column="27" bodyfile="includes/variables/matrix.hpp" bodystart="784" bodyend="787"/>
      </memberdef>
      <memberdef kind="friend" id="classvar_1_1matrix_1afa75e72ad7b2e69f24b69e6dcfdbbcc6" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classvar_1_1matrix" kindref="compound">matrix</ref></type>
        <definition>matrix operator*</definition>
        <argsstring>(D n, matrix &amp;other)</argsstring>
        <name>operator*</name>
        <param>
          <type>D</type>
          <declname>n</declname>
        </param>
        <param>
          <type><ref refid="classvar_1_1matrix" kindref="compound">matrix</ref> &amp;</type>
          <declname>other</declname>
        </param>
        <briefdescription>
<para>var*matrix </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>n</parametername>
</parameternamelist>
<parameterdescription>
<para></para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>other</parametername>
</parameternamelist>
<parameterdescription>
<para></para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>matrix </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="includes/variables/matrix.hpp" line="841" column="27" bodyfile="includes/variables/matrix.hpp" bodystart="841" bodyend="843"/>
      </memberdef>
      <memberdef kind="friend" id="classvar_1_1matrix_1a21bdbe6bff69133cc693c53cac84bfec" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classvar_1_1matrix" kindref="compound">matrix</ref></type>
        <definition>matrix operator/</definition>
        <argsstring>(D n, matrix &amp;other)</argsstring>
        <name>operator/</name>
        <param>
          <type>D</type>
          <declname>n</declname>
        </param>
        <param>
          <type><ref refid="classvar_1_1matrix" kindref="compound">matrix</ref> &amp;</type>
          <declname>other</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="includes/variables/matrix.hpp" line="863" column="27" bodyfile="includes/variables/matrix.hpp" bodystart="863" bodyend="871"/>
      </memberdef>
      <memberdef kind="friend" id="classvar_1_1matrix_1a78e6d80e0013a91eff88db4ab4b92aaa" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>std::ostream &amp;</type>
        <definition>std::ostream&amp; operator&lt;&lt;</definition>
        <argsstring>(std::ostream &amp;out, matrix const &amp;other)</argsstring>
        <name>operator&lt;&lt;</name>
        <param>
          <type>std::ostream &amp;</type>
          <declname>out</declname>
        </param>
        <param>
          <type><ref refid="classvar_1_1matrix" kindref="compound">matrix</ref> const &amp;</type>
          <declname>other</declname>
        </param>
        <briefdescription>
<para>print method for the class var::matrix&lt;int&gt; m; cout &lt;&lt; m; </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="templateparam"><parameteritem>
<parameternamelist>
<parametername>D</parametername>
</parameternamelist>
<parameterdescription>
<para></para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>out</parametername>
</parameternamelist>
<parameterdescription>
<para></para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>other</parametername>
</parameternamelist>
<parameterdescription>
<para></para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>std::ostream&amp; </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="includes/variables/matrix.hpp" line="989" column="20" bodyfile="includes/variables/matrix.hpp" bodystart="989" bodyend="1002"/>
      </memberdef>
      <memberdef kind="friend" id="classvar_1_1matrix_1ae68eff2c0e5df021eec102858661dd2a" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>std::istream &amp;</type>
        <definition>std::istream&amp; operator&gt;&gt;</definition>
        <argsstring>(std::istream &amp;input, matrix &amp;other)</argsstring>
        <name>operator&gt;&gt;</name>
        <param>
          <type>std::istream &amp;</type>
          <declname>input</declname>
        </param>
        <param>
          <type><ref refid="classvar_1_1matrix" kindref="compound">matrix</ref> &amp;</type>
          <declname>other</declname>
        </param>
        <briefdescription>
<para>input operator </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>input</parametername>
</parameternamelist>
<parameterdescription>
<para>x </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>other</parametername>
</parameternamelist>
<parameterdescription>
<para></para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>std::istream&amp; </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="includes/variables/matrix.hpp" line="1011" column="33" bodyfile="includes/variables/matrix.hpp" bodystart="1011" bodyend="1024"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
<para>Class for 2d matrix of objects. </para>
    </briefdescription>
    <detaileddescription>
<para><parameterlist kind="templateparam"><parameteritem>
<parameternamelist>
<parametername>D</parametername>
</parameternamelist>
<parameterdescription>
<para>can be of any type </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
    </detaileddescription>
    <collaborationgraph>
      <node id="1">
        <label>var::matrix&lt; D &gt;</label>
        <link refid="classvar_1_1matrix"/>
      </node>
    </collaborationgraph>
    <location file="includes/variables/matrix.hpp" line="13" column="16" bodyfile="includes/variables/matrix.hpp" bodystart="14" bodyend="1025"/>
    <listofallmembers>
      <member refid="classvar_1_1matrix_1ab19eccf26d9fefbca395626e7790318b" prot="private" virt="non-virtual"><scope>var::matrix</scope><name>_col</name></member>
      <member refid="classvar_1_1matrix_1aaeb36b64e9670ebf5874fc26da0cfe2a" prot="private" virt="non-virtual"><scope>var::matrix</scope><name>_row</name></member>
      <member refid="classvar_1_1matrix_1ad78a167d7400fac474fd03cf3363defb" prot="public" virt="non-virtual"><scope>var::matrix</scope><name>adj</name></member>
      <member refid="classvar_1_1matrix_1a81c4b4795406aa26c149f678603815a9" prot="protected" virt="non-virtual"><scope>var::matrix</scope><name>check_col</name></member>
      <member refid="classvar_1_1matrix_1abe65d7997f230b2ac6564850717be182" prot="protected" virt="non-virtual"><scope>var::matrix</scope><name>check_row</name></member>
      <member refid="classvar_1_1matrix_1a98defd0b837085eae86da59649934392" prot="protected" virt="non-virtual"><scope>var::matrix</scope><name>check_size</name></member>
      <member refid="classvar_1_1matrix_1ac97536b4f94f1dd614fb6267c07dd2b7" prot="public" virt="non-virtual"><scope>var::matrix</scope><name>cofactor</name></member>
      <member refid="classvar_1_1matrix_1a18f1458c2532b0aabbb3370d9556e745" prot="public" virt="non-virtual"><scope>var::matrix</scope><name>col</name></member>
      <member refid="classvar_1_1matrix_1ab841b2356b699bcea97baccf5971d834" prot="public" virt="non-virtual"><scope>var::matrix</scope><name>col_op</name></member>
      <member refid="classvar_1_1matrix_1aeaf9bfe82e5fadff5e7c245dc2ed7691" prot="private" virt="non-virtual"><scope>var::matrix</scope><name>data</name></member>
      <member refid="classvar_1_1matrix_1af4104a0aa496424fc75256263e412d9f" prot="public" virt="non-virtual"><scope>var::matrix</scope><name>det</name></member>
      <member refid="classvar_1_1matrix_1aac8393e86296c741a8e1023b329620b1" prot="protected" virt="non-virtual"><scope>var::matrix</scope><name>DET</name></member>
      <member refid="classvar_1_1matrix_1a148b9d63ce138a9478aa8adb9e217986" prot="public" virt="non-virtual"><scope>var::matrix</scope><name>erase_col</name></member>
      <member refid="classvar_1_1matrix_1a1ee2cc11235c4798bb70ed96a0fbf29a" prot="public" virt="non-virtual"><scope>var::matrix</scope><name>erase_row</name></member>
      <member refid="classvar_1_1matrix_1a6de49f43eb3bc3f3ed6c0b658a97605c" prot="public" virt="non-virtual"><scope>var::matrix</scope><name>get_col</name></member>
      <member refid="classvar_1_1matrix_1aa27021aa738d82a6b9dde82de321f5a1" prot="public" virt="non-virtual"><scope>var::matrix</scope><name>get_row</name></member>
      <member refid="classvar_1_1matrix_1abe7454d75f120bebef0ee5c2c1b262a7" prot="public" virt="non-virtual"><scope>var::matrix</scope><name>insert_col</name></member>
      <member refid="classvar_1_1matrix_1a3a4469d94dd4fd0235aaf555d3c4cc13" prot="public" virt="non-virtual"><scope>var::matrix</scope><name>insert_row</name></member>
      <member refid="classvar_1_1matrix_1a8a66138dce5fdb1b27a89349a8fd8539" prot="public" virt="non-virtual"><scope>var::matrix</scope><name>inv</name></member>
      <member refid="classvar_1_1matrix_1a34a63853e0456af7ba9bbd7e10b4cfc6" prot="public" virt="non-virtual"><scope>var::matrix</scope><name>is_identity</name></member>
      <member refid="classvar_1_1matrix_1a69ffd8772f87c70f5a8e525b0e4dd71f" prot="public" virt="non-virtual"><scope>var::matrix</scope><name>is_square</name></member>
      <member refid="classvar_1_1matrix_1aeb8bdaf174065f964bdd63e3c55ec5e2" prot="protected" virt="non-virtual"><scope>var::matrix</scope><name>M</name></member>
      <member refid="classvar_1_1matrix_1aaf88fb07ffd608510c2c834a925f3926" prot="public" virt="non-virtual"><scope>var::matrix</scope><name>matrix</name></member>
      <member refid="classvar_1_1matrix_1a1060b67ddd058f180bd4b1f304562f64" prot="public" virt="non-virtual"><scope>var::matrix</scope><name>matrix</name></member>
      <member refid="classvar_1_1matrix_1a4b93fcfa4d64d096fd185ff1004256eb" prot="public" virt="non-virtual"><scope>var::matrix</scope><name>matrix</name></member>
      <member refid="classvar_1_1matrix_1aacd1f3a184f36944918cb26b8ac6cccb" prot="public" virt="non-virtual"><scope>var::matrix</scope><name>operator!=</name></member>
      <member refid="classvar_1_1matrix_1a7629935f8527febca8ff4a34dff026ff" prot="public" virt="non-virtual"><scope>var::matrix</scope><name>operator%</name></member>
      <member refid="classvar_1_1matrix_1a3d767a0fcfa836340881b6fd9f4ee4e5" prot="public" virt="non-virtual"><scope>var::matrix</scope><name>operator*</name></member>
      <member refid="classvar_1_1matrix_1a6ba280ed6e9ad194e8f2eb25a8aff4bc" prot="public" virt="non-virtual"><scope>var::matrix</scope><name>operator*</name></member>
      <member refid="classvar_1_1matrix_1afa75e72ad7b2e69f24b69e6dcfdbbcc6" prot="public" virt="non-virtual"><scope>var::matrix</scope><name>operator*</name></member>
      <member refid="classvar_1_1matrix_1aaee49a5cde5696ed5d41b2ed5b15d69a" prot="public" virt="non-virtual"><scope>var::matrix</scope><name>operator+</name></member>
      <member refid="classvar_1_1matrix_1af312c6541557412aa40999381c832613" prot="public" virt="non-virtual"><scope>var::matrix</scope><name>operator+</name></member>
      <member refid="classvar_1_1matrix_1acd798c4a5acd27adbadc15b750d13aa9" prot="public" virt="non-virtual"><scope>var::matrix</scope><name>operator+</name></member>
      <member refid="classvar_1_1matrix_1a277209428c74da8a84cc6e59b540cead" prot="public" virt="non-virtual"><scope>var::matrix</scope><name>operator-</name></member>
      <member refid="classvar_1_1matrix_1a20cab5ed13b35173c242b6fe0909eda6" prot="public" virt="non-virtual"><scope>var::matrix</scope><name>operator-</name></member>
      <member refid="classvar_1_1matrix_1a0052ad415d92a84561c48b2f94c5159b" prot="public" virt="non-virtual"><scope>var::matrix</scope><name>operator-</name></member>
      <member refid="classvar_1_1matrix_1aec0f669b84ef6cbf1197fda5328d2d3e" prot="public" virt="non-virtual"><scope>var::matrix</scope><name>operator-</name></member>
      <member refid="classvar_1_1matrix_1a9683bc54b999348c59ae33b261334796" prot="public" virt="non-virtual"><scope>var::matrix</scope><name>operator/</name></member>
      <member refid="classvar_1_1matrix_1a1b9e65f8c962ec95aeac343d5d6ba89b" prot="public" virt="non-virtual"><scope>var::matrix</scope><name>operator/</name></member>
      <member refid="classvar_1_1matrix_1a21bdbe6bff69133cc693c53cac84bfec" prot="public" virt="non-virtual"><scope>var::matrix</scope><name>operator/</name></member>
      <member refid="classvar_1_1matrix_1aa4f3ec80a3e1f97ff9eb9c7fccfff043" prot="public" virt="non-virtual"><scope>var::matrix</scope><name>operator&lt;</name></member>
      <member refid="classvar_1_1matrix_1a78e6d80e0013a91eff88db4ab4b92aaa" prot="public" virt="non-virtual"><scope>var::matrix</scope><name>operator&lt;&lt;</name></member>
      <member refid="classvar_1_1matrix_1ad030c6e976b07c8177ab7cda48548ba1" prot="public" virt="non-virtual"><scope>var::matrix</scope><name>operator&lt;=</name></member>
      <member refid="classvar_1_1matrix_1a5f9279a96dbcea4c2f124a664fb54d26" prot="public" virt="non-virtual"><scope>var::matrix</scope><name>operator==</name></member>
      <member refid="classvar_1_1matrix_1a1e8a7d11cb6bb76ffd28639b9b73a8d8" prot="public" virt="non-virtual"><scope>var::matrix</scope><name>operator&gt;</name></member>
      <member refid="classvar_1_1matrix_1a208af77ec9a1ac74ed6e0f55af7a4e94" prot="public" virt="non-virtual"><scope>var::matrix</scope><name>operator&gt;=</name></member>
      <member refid="classvar_1_1matrix_1ae68eff2c0e5df021eec102858661dd2a" prot="public" virt="non-virtual"><scope>var::matrix</scope><name>operator&gt;&gt;</name></member>
      <member refid="classvar_1_1matrix_1a2d10297e28d8c6c6264d6f174003d193" prot="public" virt="non-virtual"><scope>var::matrix</scope><name>operator[]</name></member>
      <member refid="classvar_1_1matrix_1a9043393e205545106f58c316da68df80" prot="public" virt="non-virtual"><scope>var::matrix</scope><name>pop_col</name></member>
      <member refid="classvar_1_1matrix_1adc31cf9d718ccf376c2309c4f6a5f6dd" prot="public" virt="non-virtual"><scope>var::matrix</scope><name>pop_row</name></member>
      <member refid="classvar_1_1matrix_1a9dd2a2ef22d04744482819c77b80f031" prot="public" virt="non-virtual"><scope>var::matrix</scope><name>push_col</name></member>
      <member refid="classvar_1_1matrix_1aa141055a5f25f5d62dd26ae0e915f6af" prot="public" virt="non-virtual"><scope>var::matrix</scope><name>push_row</name></member>
      <member refid="classvar_1_1matrix_1a9bc064083b67aaab190bd66e7248a5ba" prot="public" virt="non-virtual"><scope>var::matrix</scope><name>resize</name></member>
      <member refid="classvar_1_1matrix_1a591c6983a2637275bb1d10d2d2e1e4a5" prot="public" virt="non-virtual"><scope>var::matrix</scope><name>row</name></member>
      <member refid="classvar_1_1matrix_1ac87b738aed9ec1933d057b7b3d8eb07c" prot="public" virt="non-virtual"><scope>var::matrix</scope><name>row_op</name></member>
      <member refid="classvar_1_1matrix_1a5e7cc7e40124be3bd4a1accfacd68b05" prot="public" virt="non-virtual"><scope>var::matrix</scope><name>rref</name></member>
      <member refid="classvar_1_1matrix_1a1c630d2e37b665b3fabcb3d76a4f8b89" prot="public" virt="non-virtual"><scope>var::matrix</scope><name>size</name></member>
      <member refid="classvar_1_1matrix_1aaaa052e8ec27a392848bd750b34f35bf" prot="public" virt="non-virtual"><scope>var::matrix</scope><name>sort_col</name></member>
      <member refid="classvar_1_1matrix_1a06fa30fdba1e861449593cfd6e1398dc" prot="public" virt="non-virtual"><scope>var::matrix</scope><name>sort_cols</name></member>
      <member refid="classvar_1_1matrix_1acc872e3d984edf32f474e221c749e632" prot="public" virt="non-virtual"><scope>var::matrix</scope><name>sort_row</name></member>
      <member refid="classvar_1_1matrix_1a84d1beb5e7704a6e7799351bf0623657" prot="public" virt="non-virtual"><scope>var::matrix</scope><name>sort_rows</name></member>
      <member refid="classvar_1_1matrix_1a54224ff2eefe0c6cd3fbeaff7a309f84" prot="protected" virt="non-virtual"><scope>var::matrix</scope><name>square</name></member>
      <member refid="classvar_1_1matrix_1af58bf7e07cebde78a2e0ad99acd5deeb" prot="public" virt="non-virtual"><scope>var::matrix</scope><name>sum</name></member>
      <member refid="classvar_1_1matrix_1a3b2c5d8983bb1dcdc250768a0f0ce578" prot="public" virt="non-virtual"><scope>var::matrix</scope><name>T</name></member>
      <member refid="classvar_1_1matrix_1a6b72a30baf5ce8386e0ea2284a1776cf" prot="protected" virt="non-virtual"><scope>var::matrix</scope><name>table</name></member>
      <member refid="classvar_1_1matrix_1a3a7b528f131d95929df267501b461183" prot="public" virt="non-virtual"><scope>var::matrix</scope><name>tr</name></member>
      <member refid="classvar_1_1matrix_1a00796c4afbd0a44f4a482c8c4f9155a3" prot="protected" virt="non-virtual"><scope>var::matrix</scope><name>TT</name></member>
      <member refid="classvar_1_1matrix_1a9eac7bafdfd06437d0b86931335fb194" prot="public" virt="non-virtual"><scope>var::matrix</scope><name>turn_to</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
