<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.9.2" xml:lang="en-US">
  <compounddef id="differential_8hpp" kind="file" language="C++">
    <compoundname>differential.hpp</compoundname>
    <includes refid="mcpp_8hpp" local="yes">../mcpp.hpp</includes>
    <includes local="no">cmath</includes>
    <includes local="no">vector</includes>
    <includedby refid="mcpp_8hpp" local="yes">includes/mcpp.hpp</includedby>
    <incdepgraph>
      <node id="1">
        <label>includes/calculus/differential.hpp</label>
        <link refid="differential_8hpp"/>
        <childnode refid="2" relation="include">
        </childnode>
        <childnode refid="3" relation="include">
        </childnode>
      </node>
      <node id="2">
        <label>cmath</label>
      </node>
      <node id="3">
        <label>vector</label>
      </node>
    </incdepgraph>
    <innernamespace refid="namespacecalc">calc</innernamespace>
      <sectiondef kind="func">
      <memberdef kind="function" id="namespacecalc_1aef0e9f050ce61e1bf65a446fd15f5356" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename LAMBDA</type>
          </param>
          <param>
            <type>typename D</type>
          </param>
        </templateparamlist>
        <type>D</type>
        <definition>D calc::diff</definition>
        <argsstring>(LAMBDA f, D x, unsigned int n=1, D dx=D(0.00001))</argsstring>
        <name>diff</name>
        <param>
          <type>LAMBDA</type>
          <declname>f</declname>
        </param>
        <param>
          <type>D</type>
          <declname>x</declname>
        </param>
        <param>
          <type>unsigned int</type>
          <declname>n</declname>
          <defval>1</defval>
        </param>
        <param>
          <type>D</type>
          <declname>dx</declname>
          <defval>D(0.00001)</defval>
        </param>
        <briefdescription>
<para>Nth order derivative at a point Higher orders are more prone to inaccuracies. You can assign your dx at higher orders to avoid them Be aware that the function already approximates <computeroutput>dx</computeroutput> at higher orders. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="templateparam"><parameteritem>
<parameternamelist>
<parametername>LAMBDA</parametername>
</parameternamelist>
<parameterdescription>
<para>std::function </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>D</parametername>
</parameternamelist>
<parameterdescription>
<para>any floating point type (double, float ..) </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>f</parametername>
</parameternamelist>
<parameterdescription>
<para>Function </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>x</parametername>
</parameternamelist>
<parameterdescription>
<para>Point </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>n</parametername>
</parameternamelist>
<parameterdescription>
<para>Derivative order </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>dx</parametername>
</parameternamelist>
<parameterdescription>
<para>Step size </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>D </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="includes/calculus/differential.hpp" line="39" column="3" bodyfile="includes/calculus/differential.hpp" bodystart="39" bodyend="51"/>
      </memberdef>
      <memberdef kind="function" id="namespacecalc_1a62f25765745ef5e93bab651eeec6a27f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename D</type>
          </param>
        </templateparamlist>
        <type>std::vector&lt; D &gt;</type>
        <definition>std::vector&lt;D&gt; calc::diff</definition>
        <argsstring>(std::vector&lt; D &gt; &amp;x, std::vector&lt; D &gt; &amp;y, int n=1)</argsstring>
        <name>diff</name>
        <param>
          <type>std::vector&lt; D &gt; &amp;</type>
          <declname>x</declname>
        </param>
        <param>
          <type>std::vector&lt; D &gt; &amp;</type>
          <declname>y</declname>
        </param>
        <param>
          <type>int</type>
          <declname>n</declname>
          <defval>1</defval>
        </param>
        <briefdescription>
<para>Derivative of 2 std::vectors. It returns a vector of size: <computeroutput>x.size()-n</computeroutput> </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="templateparam"><parameteritem>
<parameternamelist>
<parametername>D</parametername>
</parameternamelist>
<parameterdescription>
<para>any floating point type (double, float ..) </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>x</parametername>
</parameternamelist>
<parameterdescription>
<para>Domain vector </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>y</parametername>
</parameternamelist>
<parameterdescription>
<para>Range vector </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>n</parametername>
</parameternamelist>
<parameterdescription>
<para>Derivative order </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>std::vector&lt;D&gt; </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="includes/calculus/differential.hpp" line="63" column="13" bodyfile="includes/calculus/differential.hpp" bodystart="63" bodyend="73"/>
      </memberdef>
      <memberdef kind="function" id="namespacecalc_1ac76968f519762530915c08a852f0d65b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename D</type>
          </param>
          <param>
            <type>typename LAMBDA</type>
          </param>
        </templateparamlist>
        <type>std::vector&lt; D &gt;</type>
        <definition>std::vector&lt;D&gt; calc::diff</definition>
        <argsstring>(LAMBDA f, std::vector&lt; D &gt; &amp;x, int n=1)</argsstring>
        <name>diff</name>
        <param>
          <type>LAMBDA</type>
          <declname>f</declname>
        </param>
        <param>
          <type>std::vector&lt; D &gt; &amp;</type>
          <declname>x</declname>
        </param>
        <param>
          <type>int</type>
          <declname>n</declname>
          <defval>1</defval>
        </param>
        <briefdescription>
<para>Derivative of function with given vector. It returns a vector of size: <computeroutput>x.size()-n</computeroutput> </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="templateparam"><parameteritem>
<parameternamelist>
<parametername>D</parametername>
</parameternamelist>
<parameterdescription>
<para></para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>LAMBDA</parametername>
</parameternamelist>
<parameterdescription>
<para></para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>f</parametername>
</parameternamelist>
<parameterdescription>
<para>Function </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>x</parametername>
</parameternamelist>
<parameterdescription>
<para>Domain vector </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>n</parametername>
</parameternamelist>
<parameterdescription>
<para>Derivative order </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>std::vector&lt;D&gt; </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="includes/calculus/differential.hpp" line="86" column="13" bodyfile="includes/calculus/differential.hpp" bodystart="86" bodyend="90"/>
      </memberdef>
      <memberdef kind="function" id="namespacecalc_1a54f053a3ff29590353d43b13b21b50fb" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename D</type>
          </param>
          <param>
            <type>typename LAMBDA</type>
          </param>
        </templateparamlist>
        <type>std::vector&lt; D &gt;</type>
        <definition>std::vector&lt;D&gt; calc::taylor</definition>
        <argsstring>(LAMBDA f, std::vector&lt; D &gt; &amp;x, D x0=D(0))</argsstring>
        <name>taylor</name>
        <param>
          <type>LAMBDA</type>
          <declname>f</declname>
        </param>
        <param>
          <type>std::vector&lt; D &gt; &amp;</type>
          <declname>x</declname>
        </param>
        <param>
          <type>D</type>
          <declname>x0</declname>
          <defval>D(0)</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="includes/calculus/differential.hpp" line="93" column="13" bodyfile="includes/calculus/differential.hpp" bodystart="93" bodyend="95"/>
      </memberdef>
      <memberdef kind="function" id="namespacecalc_1a689d6bfc729bb5513235adb9e1fb55aa" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename D</type>
          </param>
          <param>
            <type>typename LAMBDA</type>
          </param>
        </templateparamlist>
        <type>std::vector&lt; D &gt;</type>
        <definition>std::vector&lt;D&gt; calc::eular_method</definition>
        <argsstring>(LAMBDA f, D x0, unsigned int n)</argsstring>
        <name>eular_method</name>
        <param>
          <type>LAMBDA</type>
          <declname>f</declname>
        </param>
        <param>
          <type>D</type>
          <declname>x0</declname>
        </param>
        <param>
          <type>unsigned int</type>
          <declname>n</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="includes/calculus/differential.hpp" line="98" column="13" bodyfile="includes/calculus/differential.hpp" bodystart="98" bodyend="100"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
<para>Differential calculus. </para>
    </briefdescription>
    <detaileddescription>
<para><simplesect kind="author"><para>Harith Al-Safi (<ulink url="mailto:harith.alsafi@gmail.com">harith.alsafi@gmail.com</ulink>) </para>
</simplesect>
<simplesect kind="version"><para>1.0 </para>
</simplesect>
<simplesect kind="date"><para>17/07/2022</para>
</simplesect>
<simplesect kind="copyright"><para>Copyright (c) 2022 </para>
</simplesect>
</para>
    </detaileddescription>
    <programlisting>
<codeline lineno="1"><highlight class="normal"></highlight></codeline>
<codeline lineno="11"><highlight class="normal"></highlight><highlight class="preprocessor">#pragma<sp/>once</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="12"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;../mcpp.hpp&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="13"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;cmath&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="14"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;vector&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="15"><highlight class="normal"></highlight></codeline>
<codeline lineno="22" refid="namespacecalc" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">namespace<sp/></highlight><highlight class="normal"><ref refid="namespacecalc" kindref="compound">calc</ref></highlight></codeline>
<codeline lineno="23"><highlight class="normal">{</highlight></codeline>
<codeline lineno="38"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>LAMBDA,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>D&gt;</highlight></codeline>
<codeline lineno="39"><highlight class="normal"><sp/><sp/><sp/><sp/>D<sp/><ref refid="namespacecalc_1aef0e9f050ce61e1bf65a446fd15f5356" kindref="member">diff</ref>(LAMBDA<sp/>f,<sp/>D<sp/>x,<sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>n<sp/>=<sp/>1,<sp/>D<sp/>dx<sp/>=<sp/>D(0.00001))</highlight></codeline>
<codeline lineno="40"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="41"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>BUG<sp/>higher<sp/>orders<sp/>have<sp/>high<sp/>error</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="42"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>D<sp/>ans<sp/>=<sp/>D(0.0);</highlight></codeline>
<codeline lineno="43"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(n<sp/>&gt;<sp/>2<sp/>&amp;&amp;<sp/>x<sp/>!=<sp/>D(0)<sp/>&amp;&amp;<sp/>dx<sp/>==<sp/>D(0.00001))<sp/>{</highlight></codeline>
<codeline lineno="44"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>dx<sp/>=<sp/>x<sp/>*<sp/>sqrt(__DBL_EPSILON__)<sp/>*<sp/>1<sp/>*<sp/>pow(10,<sp/>n);</highlight></codeline>
<codeline lineno="45"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="46"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>k<sp/>=<sp/>0;<sp/>k<sp/>&lt;=<sp/>n;<sp/>k++)<sp/>{</highlight></codeline>
<codeline lineno="47"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ans<sp/>+=</highlight></codeline>
<codeline lineno="48"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>pow((-1),<sp/>k)<sp/>*<sp/><ref refid="namespacemth_1a1d4d7ae61316264e1d077af404d9076d" kindref="member">mth::combination</ref>(n,<sp/>k)<sp/>*<sp/>f(x<sp/>+<sp/>(n<sp/>-<sp/>D(2)<sp/>*<sp/>k)<sp/>*<sp/>dx);</highlight></codeline>
<codeline lineno="49"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="50"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>D(ans<sp/>/<sp/>(pow((D(2)<sp/>*<sp/>dx),<sp/>n)));</highlight></codeline>
<codeline lineno="51"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="52"><highlight class="normal"></highlight></codeline>
<codeline lineno="62"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>D&gt;</highlight></codeline>
<codeline lineno="63"><highlight class="normal"><sp/><sp/><sp/><sp/>std::vector&lt;D&gt;<sp/><ref refid="namespacecalc_1aef0e9f050ce61e1bf65a446fd15f5356" kindref="member">diff</ref>(std::vector&lt;D&gt;<sp/>&amp;x,<sp/>std::vector&lt;D&gt;<sp/>&amp;y,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>n<sp/>=<sp/>1)</highlight></codeline>
<codeline lineno="64"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="65"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>dx<sp/>=<sp/><ref refid="namespacevect_1a777d4eff1699dc4d1faf0c848baeebda" kindref="member">vect::difference</ref>(x);</highlight></codeline>
<codeline lineno="66"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>dy<sp/>=<sp/><ref refid="namespacevect_1a777d4eff1699dc4d1faf0c848baeebda" kindref="member">vect::difference</ref>(y);</highlight></codeline>
<codeline lineno="67"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>yp<sp/>=<sp/>dy<sp/>/<sp/>dx;</highlight></codeline>
<codeline lineno="68"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>xp<sp/>=<sp/><ref refid="namespacevect_1a2da816be096db605cfeb29720fb77a82" kindref="member">vect::averages</ref>(x);</highlight></codeline>
<codeline lineno="69"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(n<sp/>==<sp/>1)<sp/>{</highlight></codeline>
<codeline lineno="70"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>yp;</highlight></codeline>
<codeline lineno="71"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="72"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="namespacecalc_1aef0e9f050ce61e1bf65a446fd15f5356" kindref="member">diff</ref>(xp,<sp/>yp,<sp/>n<sp/>-<sp/>1);</highlight></codeline>
<codeline lineno="73"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="74"><highlight class="normal"></highlight></codeline>
<codeline lineno="85"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>D,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>LAMBDA&gt;</highlight></codeline>
<codeline lineno="86"><highlight class="normal"><sp/><sp/><sp/><sp/>std::vector&lt;D&gt;<sp/><ref refid="namespacecalc_1aef0e9f050ce61e1bf65a446fd15f5356" kindref="member">diff</ref>(LAMBDA<sp/>f,<sp/>std::vector&lt;D&gt;<sp/>&amp;x,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>n<sp/>=<sp/>1)</highlight></codeline>
<codeline lineno="87"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="88"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>y<sp/>=<sp/><ref refid="namespacevect_1a1f8e4036ea4a5bede28b045061e59fbd" kindref="member">vect::vec_op</ref>(f,<sp/>x);</highlight></codeline>
<codeline lineno="89"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="namespacecalc_1aef0e9f050ce61e1bf65a446fd15f5356" kindref="member">diff</ref>(x,<sp/>y,<sp/>n);</highlight></codeline>
<codeline lineno="90"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="91"><highlight class="normal"></highlight></codeline>
<codeline lineno="92"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>D,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>LAMBDA&gt;</highlight></codeline>
<codeline lineno="93"><highlight class="normal"><sp/><sp/><sp/><sp/>std::vector&lt;D&gt;<sp/><ref refid="namespacecalc_1a54f053a3ff29590353d43b13b21b50fb" kindref="member">taylor</ref>(LAMBDA<sp/>f,<sp/>std::vector&lt;D&gt;<sp/>&amp;x,<sp/>D<sp/>x0<sp/>=<sp/>D(0))</highlight></codeline>
<codeline lineno="94"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="95"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="96"><highlight class="normal"></highlight></codeline>
<codeline lineno="97"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>D,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>LAMBDA&gt;</highlight></codeline>
<codeline lineno="98"><highlight class="normal"><sp/><sp/><sp/><sp/>std::vector&lt;D&gt;<sp/><ref refid="namespacecalc_1a689d6bfc729bb5513235adb9e1fb55aa" kindref="member">eular_method</ref>(LAMBDA<sp/>f,<sp/>D<sp/>x0,<sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>n)</highlight></codeline>
<codeline lineno="99"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="100"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="101"><highlight class="normal"></highlight></codeline>
<codeline lineno="102"><highlight class="normal">}</highlight></codeline>
<codeline lineno="103"><highlight class="normal"></highlight></codeline>
<codeline lineno="104"><highlight class="normal"></highlight><highlight class="comment">//<sp/>TODO<sp/>differentiation</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="105"><highlight class="normal"></highlight><highlight class="comment">//<sp/>TODO<sp/>Eular<sp/>method</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="106"><highlight class="normal"></highlight><highlight class="comment">//<sp/>TODO<sp/>power<sp/>series</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="107"><highlight class="normal"></highlight><highlight class="comment">//<sp/>TODO<sp/>limits</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="108"><highlight class="normal"></highlight><highlight class="comment">//<sp/>TODO<sp/>more<sp/>testing<sp/>on<sp/>&apos;diff&apos;<sp/>cases</highlight></codeline>
    </programlisting>
    <location file="includes/calculus/differential.hpp"/>
  </compounddef>
</doxygen>
